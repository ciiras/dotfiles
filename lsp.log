
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/mason-lspconfig/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/mason-lspconfig/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/colorizer.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/colorizer.vim"
line 1: if exists('g:loaded_colorizer')
line 2:   finish
line 3: endif
line 4: 
line 5: command! ColorizerAttachToBuffer lua require'colorizer'.attach_to_buffer(0)
line 6: command! ColorizerDetachFromBuffer lua require'colorizer'.detach_from_buffer(0)
line 7: command! ColorizerReloadAllBuffers lua require'colorizer'.reload_all_buffers()
line 8: command! ColorizerToggle lua local c = require'colorizer' if c.is_buffer_attached(0) then c.detach_from_buffer(0) else c.attach_to_buffer(0) end
line 11: 
line 12: let g:loaded_colorizer = 1
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/colorizer.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup ColorizerSetup
Executing: autocmd!
Executing: autocmd FileType * lua COLORIZER_SETUP_HOOK()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim"
line 1: if exists('g:loaded_devicons') | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: 
line 3: let s:save_cpo = &cpo
line 4: set cpo&vim
line 5: 
line 6: " TODO change so its easier to get
line 7: let g:nvim_web_devicons = 1
line 8: 
line 9: let &cpo = s:save_cpo
line 10: unlet s:save_cpo
line 11: 
line 12: let g:loaded_devicons = 1
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/barbar.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/barbar.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/barbar.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyBackground Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyERRORBorder guifg=#8A1F1F
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyWARNBorder guifg=#79491D
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyINFOBorder guifg=#4F6752
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyDEBUGBorder guifg=#8B8B8B
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyTRACEBorder guifg=#4F3552
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyERRORIcon guifg=#F70067
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyWARNIcon guifg=#F79000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyINFOIcon guifg=#A9FF68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyDEBUGIcon guifg=#8B8B8B
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyTRACEIcon guifg=#D484FF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyERRORTitle  guifg=#F70067
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyWARNTitle guifg=#F79000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyINFOTitle guifg=#A9FF68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyDEBUGTitle  guifg=#8B8B8B
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyTRACETitle  guifg=#D484FF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyERRORBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyWARNBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyINFOBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyDEBUGBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyTRACEBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing:     hi default link NotifyLogTime Comment
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyLogTitle Special
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:   
Executing:   augroup NvimNotifyRefreshHighlights
Executing:     autocmd!
Executing:     autocmd ColorScheme * lua require('notify.config.highlights').setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:   augroup END
Executing: command! Notifications :lua require("notify")._print_history()<CR>
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim"
line 1: 
line 2: " Create command for running busted
line 3: command! -nargs=1 -complete=file PlenaryBustedFile lua require('plenary.test_harness').test_file([[<args>]])
line 5: 
line 6: command! -nargs=+ -complete=file PlenaryBustedDirectory lua require('plenary.test_harness').test_directory_command([[<args>]])
line 8: 
line 9: nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua"
Executing: command! -bar -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdate lua require'nvim-treesitter.install'.commands.TSUpdate['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallSync lua require'nvim-treesitter.install'.commands.TSInstallSync['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#installed_parsers TSUninstall lua require'nvim-treesitter.install'.commands.TSUninstall['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallFromGrammar lua require'nvim-treesitter.install'.commands.TSInstallFromGrammar['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstall lua require'nvim-treesitter.install'.commands.TSInstall['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdateSync lua require'nvim-treesitter.install'.commands.TSUpdateSync['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=0 TSInstallInfo lua require'nvim-treesitter.info'.commands.TSInstallInfo['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=? -complete=custom,nvim_treesitter#available_modules TSModuleInfo lua require'nvim-treesitter.info'.commands.TSModuleInfo['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSToggle lua require'nvim-treesitter.configs'.commands.TSToggle['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSDisable lua require'nvim-treesitter.configs'.commands.TSDisable['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSEnable lua require'nvim-treesitter.configs'.commands.TSEnable['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufToggle lua require'nvim-treesitter.configs'.commands.TSBufToggle['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufDisable lua require'nvim-treesitter.configs'.commands.TSBufDisable['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufEnable lua require'nvim-treesitter.configs'.commands.TSBufEnable['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQueryUserAfter lua require'nvim-treesitter.configs'.commands.TSEditQueryUserAfter['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQuery lua require'nvim-treesitter.configs'.commands.TSEditQuery['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: command! -bar -nargs=0 TSConfigInfo lua require'nvim-treesitter.configs'.commands.TSConfigInfo['run<bang>'](<f-args>)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Searching for "data/plenary/filetypes/base.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/data/plenary/filetypes/base.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/data/plenary/filetypes/base.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/data/plenary/filetypes/base.lua"
Searching for "data/plenary/filetypes/builtin.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/data/plenary/filetypes/builtin.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/data/plenary/filetypes/builtin.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/trouble.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/trouble.vim"
line 1: 
line 2: augroup Trouble
line 3:   autocmd!
line 4:   if has('nvim-0.6')
line 5:     " Use the new diagnostic subsystem for neovim 0.6 and up
line 6:     au DiagnosticChanged * lua require'trouble'.refresh({auto = true, provider = "diagnostics"})
line 7:   else
line 8:     au User LspDiagnosticsChanged lua require'trouble'.refresh({auto = true, provider = "diagnostics"})
line 9:   endif
line 10:   autocmd BufWinEnter,BufEnter * lua require("trouble").action("on_win_enter")
line 11: augroup end
line 12: 
line 13: function! s:complete(arg,line,pos) abort
line 16: 
line 17: command! -nargs=* -complete=custom,s:complete Trouble lua require'trouble'.open(<f-args>)
line 18: command! -nargs=* -complete=custom,s:complete TroubleToggle lua require'trouble'.toggle(<f-args>)
line 19: command! TroubleClose lua require'trouble'.close()
line 20: command! TroubleRefresh lua require'trouble'.refresh()
line 21: 
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/trouble.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: hi def link TroubleFoldIcon CursorLineNr
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleIndent LineNr
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleNormal Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextWarning TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleLocation LineNr
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleCode Comment
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroublePreview Search
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleFile Directory
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextInformation TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSource Comment
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextHint TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleCount TabLineSel
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleText Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextError TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignOther TroubleSignInformation
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleOther DiagnosticOther
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignOther DiagnosticSignOther
Executing: hi def link TroubleError DiagnosticError
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignError DiagnosticSignError
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleWarning DiagnosticWarn
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignWarning DiagnosticSignWarn
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleInformation DiagnosticInfo
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignInformation DiagnosticSignInfo
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleHint DiagnosticHint
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignHint DiagnosticSignHint
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleFoldIcon CursorLineNr
Executing: hi def link TroubleIndent LineNr
Executing: hi def link TroubleNormal Normal
Executing: hi def link TroubleTextWarning TroubleText
Executing: hi def link TroubleLocation LineNr
Executing: hi def link TroubleCode Comment
Executing: hi def link TroublePreview Search
Executing: hi def link TroubleFile Directory
Executing: hi def link TroubleTextInformation TroubleText
Executing: hi def link TroubleSource Comment
Executing: hi def link TroubleTextHint TroubleText
Executing: hi def link TroubleCount TabLineSel
Executing: hi def link TroubleText Normal
Executing: hi def link TroubleTextError TroubleText
Executing: hi def link TroubleSignOther TroubleSignInformation
Executing: hi def link TroubleOther DiagnosticOther
Executing: hi def link TroubleSignOther DiagnosticSignOther
Executing: hi def link TroubleError DiagnosticError
Executing: hi def link TroubleSignError DiagnosticSignError
Executing: hi def link TroubleWarning DiagnosticWarn
Executing: hi def link TroubleSignWarning DiagnosticSignWarn
Executing: hi def link TroubleInformation DiagnosticInfo
Executing: hi def link TroubleSignInformation DiagnosticSignInfo
Executing: hi def link TroubleHint DiagnosticHint
Executing: hi def link TroubleSignHint DiagnosticSignHint
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Searching for "parser/bash.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/bash.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/bash.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/bash.so"
Searching for "parser/c.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/c.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/c.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/c.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/c.so"
Searching for "parser/c_sharp.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/c_sharp.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/c_sharp.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/c_sharp.so"
Searching for "parser/diff.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/diff.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/diff.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/diff.so"
Searching for "parser/dockerfile.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/dockerfile.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/dockerfile.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/dockerfile.so"
Searching for "parser/git_config.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/git_config.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/git_config.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/git_config.so"
Searching for "parser/git_rebase.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/git_rebase.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/git_rebase.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/git_rebase.so"
Searching for "parser/gitcommit.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/gitcommit.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/gitcommit.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/gitcommit.so"
Searching for "parser/gitignore.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/gitignore.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/gitignore.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/gitignore.so"
Searching for "parser/html.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/html.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/html.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/html.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/html.so"
Searching for "parser/javascript.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/javascript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/javascript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/javascript.so"
Searching for "parser/lua.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/lua.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/lua.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/lua.so"
Searching for "parser/make.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/make.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/make.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/make.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/make.so"
Searching for "parser/markdown.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/markdown.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/markdown.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/markdown.so"
Searching for "parser/markdown_inline.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/markdown_inline.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/markdown_inline.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/markdown_inline.so"
Searching for "parser/query.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/query.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/query.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/query.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/query.so"
Searching for "parser/rust.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/rust.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/rust.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/rust.so"
Searching for "parser/scss.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/scss.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/scss.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/scss.so"
Searching for "parser/tmux.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/tmux.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/tmux.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/tmux.so"
Searching for "parser/toml.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/toml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/toml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/toml.so"
Searching for "parser/tsx.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/tsx.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/tsx.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/tsx.so"
Searching for "parser/typescript.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/typescript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/typescript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/typescript.so"
Searching for "parser/vim.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/vim.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/vim.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/vim.so"
Searching for "parser/vimdoc.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/vimdoc.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/vimdoc.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/vimdoc.so"
Searching for "parser/xml.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/xml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/xml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/xml.so"
Searching for "parser/yaml.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/yaml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/yaml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/yaml.so"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: doautocmd <nomodeline> User CmpReady
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/bufdelete.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/bufdelete.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/bufdelete.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing BufNew Autocommands for "*"
autocommand <Lua 186: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Searching for "autoload/wilder/lua.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/lua.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/lua.vim"
line 1: let s:index = 0
line 2: let s:functions = {}
line 3: let s:token = 477094643697281 " random number
line 4: 
line 5: function! wilder#lua#call(f, ...) abort
line 8: 
line 9: function! wilder#lua#wrap(t) abort
line 31: 
line 32: function! s:wrap_function(f) abort
line 43: 
line 44: function! wilder#lua#call_wrapped_function(index, ...) abort
line 49: 
line 50: function! wilder#lua#unref_wrapped_function(index) abort
line 53: 
line 54: function! wilder#lua#_get_functions() abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/lua.vim
continuing in /Users/christopher.griffith/.config/nvim/init.lua
calling wilder#lua#call('wilder#setup', {'modes': [':']})

line 1:   return wilder#lua#wrap(call(a:f, a:000))
Searching for "autoload/wilder.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder.vim"
line 1: function! wilder#in_context()
line 4: 
line 5: function! wilder#enable_cmdline_enter()
line 8: 
line 9: function! wilder#enable()
line 12: 
line 13: function! wilder#disable()
line 16: 
line 17: function! wilder#toggle()
line 20: 
line 21: function! wilder#set_option(x, ...) abort
line 28: 
line 29: function! wilder#next()
line 32: 
line 33: function! wilder#previous()
line 36: 
line 37: function! wilder#resolve(ctx, x)
line 40: 
line 41: function! wilder#reject(ctx, x)
line 44: 
line 45: " DEPRECATED: use wilder#resolve()
line 46: function! wilder#on_finish(ctx, x)
line 49: 
line 50: " DEPRECATED: use wilder#reject()
line 51: function! wilder#on_error(ctx, x)
line 54: 
line 55: function! wilder#wait(f, ...)
line 64: 
line 65: function! wilder#can_reject_completion()
line 68: 
line 69: function! wilder#reject_completion()
line 72: 
line 73: function! wilder#can_accept_completion()
line 76: 
line 77: function! wilder#accept_completion(...)
line 81: 
line 82: function! wilder#start_from_normal_mode()
line 85: 
line 86: function! wilder#make_hl(name, args, ...) abort
line 89: 
line 90: function! wilder#make_temp_hl(name, args, ...) abort
line 93: 
line 94: function! wilder#hl_with_attr(name, hl_group, ...) abort
line 105: 
line 106: " DEPRECATED: use wilder#basic_highlighter()
line 107: function! wilder#query_highlighter(...)
line 110: 
line 111: " DEPRECATED: use wilder#basic_highlighter()
line 112: function! wilder#query_common_subsequence_spans(...)
line 115: 
line 116: function! wilder#basic_highlighter(...)
line 120: 
line 121: function! wilder#vim_basic_highlighter(...) abort
line 126: 
line 127: function! wilder#python_basic_highlighter(...) abort
line 132: 
line 133: function! wilder#pcre2_highlighter(...) abort
line 137: 
line 138: function! wilder#python_pcre2_highlighter(...) abort
line 143: 
line 144: function! wilder#lua_pcre2_highlighter(...) abort
line 149: 
line 150: " DEPRECATED: use wilder#pcre2_highlighter()
line 151: function! wilder#pcre2_capture_spans(...) abort
line 154: 
line 155: function! wilder#cpsm_highlighter(...) abort
line 158: 
line 159: function! wilder#python_cpsm_highlighter(...) abort
line 163: 
line 164: function! wilder#lua_fzy_highlighter(...) abort
line 167: 
line 168: function! wilder#highlighter_with_gradient(highlighter) abort
line 171: 
line 172: " pipes
line 173: 
line 174: function! wilder#_sleep(t) abort
line 180: 
line 181: function! wilder#branch(...) abort
line 184: 
line 185: function! wilder#map(...) abort
line 188: 
line 189: function! wilder#subpipeline(f) abort
line 192: 
line 193: function! wilder#check(...) abort
line 196: 
line 197: function! wilder#if(condition, p) abort
line 204: 
line 205: function! wilder#debounce(t) abort
line 208: 
line 209: function! wilder#result(...) abort
line 216: 
line 217: function! wilder#result_output_escape(chars) abort
line 220: 
line 221: " DEPRECATED: Use wilder#vim_substring_pattern()
line 222: function! wilder#vim_substring() abort
line 225: 
line 226: function! wilder#vim_substring_pattern() abort
line 229: 
line 230: function! wilder#vim_search(...) abort
line 234: 
line 235: function! wilder#escape_python(str, ...) abort
line 263: 
line 264: " DEPRECATED: Use wilder#python_substring_pattern()
line 265: function! wilder#python_substring() abort
line 268: 
line 269: function! wilder#python_substring_pattern() abort
line 272: 
line 273: " DEPRECATED: Use wilder#python_fuzzy_pattern()
line 274: function! wilder#python_fuzzy_match(...) abort
line 277: 
line 278: function! wilder#python_fuzzy_pattern(...) abort
line 282: 
line 283: " DEPRECATED: Use wilder#python_fuzzy_delimiter_pattern()
line 284: function! wilder#python_fuzzy_delimiter(...) abort
line 287: 
line 288: function! wilder#python_fuzzy_delimiter_pattern(...) abort
line 292: 
line 293: function! wilder#python_search(...) abort
line 297: 
line 298: function! wilder#_python_sleep(t) abort
line 301: 
line 302: function! wilder#history(...) abort
line 311: 
line 312: " sorters
line 313: 
line 314: " DEPRECATED: Use wilder#lexical_sorter()
line 315: function! wilder#vim_sort() abort
line 318: 
line 319: function! wilder#lexical_sorter() abort
line 322: 
line 323: function! wilder#lexical_sort(...) abort
line 326: 
line 327: " DEPRECATED: Use wilder#python_lexical_sorter()
line 328: function! wilder#python_sort() abort
line 331: 
line 332: function! wilder#python_lexical_sorter() abort
line 335: 
line 336: function! wilder#python_lexical_sort(...) abort
line 339: 
line 340: " DEPRECATED: Use wilder#python_difflib_sorter()
line 341: function! wilder#python_sorter_difflib(...) abort
line 344: 
line 345: function! wilder#python_difflib_sorter(...) abort
line 348: 
line 349: function! wilder#python_difflib_sort(...) abort
line 352: 
line 353: " DEPRECATED: Use wilder#python_fuzzywuzzy_sorter()
line 354: function! wilder#python_sorter_fuzzywuzzy(...) abort
line 357: 
line 358: function! wilder#python_fuzzywuzzy_sorter(...) abort
line 361: 
line 362: " DEPRECATED: use wilder#python_fuzzywuzzy_sort()
line 363: function! wilder#python_fuzzywuzzy(ctx, xs, query) abort
line 366: 
line 367: function! wilder#python_fuzzywuzzy_sort(...) abort
line 370: 
line 371: " filters
line 372: 
line 373: " DEPRECATED: use wilder#uniq_filter()
line 374: function! wilder#uniq() abort
line 377: 
line 378: function! wilder#uniq_filter() abort
line 381: 
line 382: function! wilder#uniq_filt(...) abort
line 385: 
line 386: " DEPRECATED: use wilder#python_uniq_filter()
line 387: function! wilder#python_uniq() abort
line 390: 
line 391: function! wilder#python_uniq_filter() abort
line 394: 
line 395: function! wilder#python_uniq_filt(...) abort
line 398: 
line 399: " DEPRECATED: use wilder#fuzzy_filter()
line 400: function! wilder#filter_fuzzy() abort
line 403: 
line 404: function! wilder#fuzzy_filter(...) abort
line 407: 
line 408: function! wilder#fuzzy_filt(...) abort
line 411: 
line 412: function! wilder#vim_fuzzy_filter() abort
line 415: 
line 416: function! wilder#vim_fuzzy_filt(...) abort
line 419: 
line 420: " DEPRECATED: use wilder#python_fuzzy_filter()
line 421: function! wilder#python_filter_fuzzy(...) abort
line 424: 
line 425: function! wilder#python_fuzzy_filter(...) abort
line 428: 
line 429: function! wilder#python_fuzzy_filt(...) abort
line 432: 
line 433: " DEPRECATED: use wilder#python_fruzzy_filter()
line 434: function! wilder#python_filter_fruzzy(...) abort
line 437: 
line 438: function! wilder#python_fruzzy_filter(...) abort
line 441: 
line 442: function! wilder#python_fruzzy_filt(...) abort
line 445: 
line 446: " DEPRECATED: use wilder#python_cpsm_filter()
line 447: function! wilder#python_filter_cpsm(...) abort
line 450: 
line 451: function! wilder#python_cpsm_filter(...) abort
line 454: 
line 455: function! wilder#python_cpsm_filt(...) abort
line 458: 
line 459: function! wilder#python_clap_filter(...) abort
line 462: 
line 463: function! wilder#python_clap_filt(...) abort
line 466: 
line 467: function! wilder#lua_fzy_filter() abort
line 470: 
line 471: function! wilder#lua_fzy_filt(...) abort
line 474: 
line 475: " pipelines
line 476: 
line 477: function! wilder#search_pipeline(...) abort
line 484: 
line 485: function! s:search_pipeline(...) abort
line 510: 
line 511: function! s:set_query(data, x)
line 519: 
line 520: function! wilder#vim_search_pipeline(...) abort
line 523: 
line 524: function! wilder#python_search_pipeline(...) abort
line 556: 
line 557: function! wilder#cmdline_pipeline(...) abort
line 560: 
line 561: function! wilder#substitute_pipeline(...) abort
line 564: 
line 565: function! wilder#python_file_finder_pipeline(...) abort
line 568: 
line 569: " renderer items
line 570: 
line 571: " DEPRECATED: use wilder#wildmenu_index()
line 572: function! wilder#index(...) abort
line 575: 
line 576: function! wilder#wildmenu_index(...) abort
line 580: 
line 581: " DEPRECATED: use wilder#wildmenu_string()
line 582: function! wilder#string(str, ...) abort
line 585: 
line 586: function! wilder#wildmenu_string(str, ...) abort
line 593: 
line 594: " DEPRECATED: use wilder#wildmenu_previous_arrow()
line 595: function! wilder#previous_arrow(...) abort
line 598: 
line 599: function! wilder#wildmenu_previous_arrow(...) abort
line 603: 
line 604: " DEPRECATED: use wilder#wildmenu_next_arrow()
line 605: function! wilder#next_arrow(...) abort
line 608: 
line 609: function! wilder#wildmenu_next_arrow(...) abort
line 613: 
line 614: " DEPRECATED: use wilder#wildmenu_powerline_separator()
line 615: function! wilder#separator(str, from, to, ...) abort
line 618: 
line 619: " DEPRECATED: use wilder#wildmenu_powerline_separator()
line 620: function! wilder#powerline_separator(str, from, to, ...) abort
line 623: 
line 624: function! wilder#wildmenu_powerline_separator(str, from, to, ...) abort
line 631: 
line 632: " DEPRECATED: use wilder#wildmenu_spinner()
line 633: function! wilder#spinner(...) abort
line 636: 
line 637: function! wilder#wildmenu_spinner(...) abort
line 641: 
line 642: " DEPRECATED: use wilder#wildmenu_condition()
line 643: function! wilder#condition(predicate, if_true, ...) abort
line 646: 
line 647: function! wilder#wildmenu_condition(predicate, if_true, ...) abort
line 651: 
line 652: function! wilder#popupmenu_scrollbar(...) abort
line 656: 
line 657: function! wilder#popupmenu_spinner(...) abort
line 661: 
line 662: function! wilder#popupmenu_devicons(...) abort
line 666: 
line 667: function! wilder#popupmenu_buffer_flags(...) abort
line 671: 
line 672: function! wilder#popupmenu_empty_message(...) abort
line 676: 
line 677: function! wilder#popupmenu_empty_message_with_spinner(...) abort
line 681: 
line 682: " renderers
line 683: 
line 684: function! wilder#renderer_mux(args)
line 687: 
line 688: " DEPRECATED: use wilder#wildmenu_renderer()
line 689: function! wilder#statusline_renderer(...)
line 694: 
line 695: " DEPRECATED: use wilder#wildmenu_renderer()
line 696: function! wilder#float_renderer(...)
line 701: 
line 702: function! wilder#wildmenu_renderer(...)
line 717: 
line 718: function! wilder#popupmenu_renderer(...)
line 727: 
line 728: " DEPRECATED: use wilder#wildmenu_airline_theme()
line 729: function! wilder#airline_theme(...)
line 732: 
line 733: function! wilder#wildmenu_airline_theme(...)
line 737: 
line 738: " DEPRECATED: use wilder#wildmenu_lightline_theme()
line 739: function! wilder#lightline_theme(...)
line 742: 
line 743: function! wilder#wildmenu_lightline_theme(...)
line 747: 
line 748: function! wilder#popupmenu_border_theme(...)
line 752: 
line 753: function! wilder#popupmenu_palette_theme(...)
line 758: 
line 759: function! s:find_function_script_file(f)
line 786: 
line 787: function! wilder#findfile(file) abort
line 795: 
line 796: function! s:get_module_path(file, use_cached)
line 810: 
line 811: function! wilder#fruzzy_path(...) abort
line 814: 
line 815: function! wilder#cpsm_path(...) abort
line 818: 
line 819: function! wilder#clap_path(...) abort
line 822: 
line 823: function! wilder#clear_module_path_cache()
line 830: 
line 831: function! wilder#project_root(...) abort
line 844: 
line 845: function! wilder#clear_project_root_cache() abort
line 852: 
line 853: function! s:project_root(root_markers, ...) abort
line 867: 
line 868: function! s:get_project_root(path, root_markers) abort
line 887: 
line 888: " DEPRECATED: This function is to be removed.
line 889: " Use wilder#popupmenu_devicons() instead.
line 890: function! wilder#result_draw_devicons()
line 895: 
line 896: function! wilder#draw_devicons(ctx, x, data) abort
line 917: 
line 918: function! wilder#devicons_get_icon_from_vim_devicons()
line 921: 
line 922: function! wilder#devicons_get_icon_from_nerdfont_vim()
line 925: 
line 926: function! wilder#devicons_get_icon_from_nvim_web_devicons(...)
line 930: 
line 931: function! wilder#devicons_get_hl_from_glyph_palette_vim(...)
line 935: 
line 936: function! wilder#devicons_get_hl_from_nvim_web_devicons(...)
line 940: 
line 941: function! s:extract_keys(obj, ...)
line 952: 
line 953: function! wilder#setup(...)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder.vim
continuing in wilder#lua#call
calling wilder#setup({'modes': [':']})

line 1:   return call('wilder#setup#', a:000)
Searching for "autoload/wilder/setup.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/setup.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/setup.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/setup.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/setup.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/setup.vim"
line 1: function! wilder#setup#(...)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/setup.vim
continuing in wilder#setup
calling wilder#setup#({'modes': [':']})

line 1:   let l:config = get(a:, 1, {})
line 2: 
line 3:   " Duplicate wilder#main#enable_cmdline_enter() and
line 4:   " wilder#main#disable_cmdline_enter() here so we don't have to autoload
line 5:   " autoload/wilder/main.vim.
line 6:   if get(l:config, 'enable_cmdline_enter', 1)
line 7:     if !exists('#WilderCmdlineEnter')
line 8:       augroup WilderCmdlineEnter
line 9:         autocmd!
line 10:         autocmd CmdlineEnter * call wilder#main#start()
line 11:       augroup END
line 12:     endif
line 13:   else
line 14:     if exists('#WilderCmdlineEnter')
line 15:       augroup WilderCmdlineEnter
line 16:         autocmd!
line 17:       augroup END
line 18:       augroup! WilderCmdlineEnter
line 19:     endif
line 20:   endif
line 21: 
line 22:   let l:wildcharm = get(l:config, 'wildcharm', &wildchar)
line 23:   if l:wildcharm isnot v:false
line 24:     execute 'set wildcharm='. &wildchar
line 24: set wildcharm=9
line 25:   endif
line 26: 
line 27:   let l:modes = get(l:config, 'modes', ['/', '?'])
line 28:   call wilder#options#set('modes', l:modes)
Searching for "autoload/wilder/options.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/options.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/options.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/options.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/options.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 28: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/options.vim"
line 1: let s:opts = {}
line 2: 
line 3: " main options
line 4: call extend(s:opts, { 'modes': ['/', '?'], 'use_cmdlinechanged': exists('##CmdlineChanged'), 'interval': 100, 'before_cursor': 0, 'num_workers': 2, 'noselect': 1, })
line 12: 
line 13: function! wilder#options#get(...) abort
line 32: 
line 33: function! wilder#options#set(x, ...) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/options.vim
continuing in wilder#setup#
calling wilder#options#set('modes', [':'])

line 1:   if len(a:000) == 0
line 2:     call extend(s:opts, a:x)
line 3:   else
line 4:     let s:opts[a:x] = a:1
line 5:   endif
wilder#options#set returning #0

continuing in wilder#setup#

line 29: 
line 30:   for [l:key, l:default_mapping, l:function, l:condition] in [ ['next_key', '<Tab>', 'wilder#next()', 'wilder#in_context()'], ['previous_key', '<S-Tab>', 'wilder#previous()', 'wilder#in_context()'], ['reject_key', '<Up>', 'wilder#reject_completion()', 'wilder#can_reject_completion()'], ['accept_key', '<Down>', 'wilder#accept_completion()', 'wilder#can_accept_completion()'], ]
line 36:     let l:mapping = get(l:config, l:key, l:default_mapping)
line 37:     if l:mapping is v:false
line 38:       continue
line 39:     endif
line 40: 
line 41:     if type(l:mapping) is v:t_list
line 42:       let l:fallback_mapping = l:mapping[1]
line 43:       let l:mapping = l:mapping[0]
line 44:     else
line 45:       let l:fallback_mapping = l:mapping
line 46:     endif
line 47: 
line 48:     if l:key ==# 'accept_key' && !get(l:config, 'accept_completion_auto_select', 1)
line 50:       let l:function = 'wilder#accept_completion(0)'
line 51:     endif
line 52: 
line 53:     if l:fallback_mapping isnot 0
line 54:       execute 'cnoremap <expr>' l:mapping l:condition ' ? ' l:function ' : ' string(l:fallback_mapping)
line 54: cnoremap <expr> <Tab> wilder#in_context()  ?  wilder#next()  :  '<Tab>'
line 55:     else
line 56:       execute 'cmap ' l:mapping '<Cmd>call' l:function '<CR>'
line 57:     endif
line 58:   endfor
line 30:   for [l:key, l:default_mapping, l:function, l:condition] in [ ['next_key', '<Tab>', 'wilder#next()', 'wilder#in_context()'], ['previous_key', '<S-Tab>', 'wilder#previous()', 'wilder#in_context()'], ['reject_key', '<Up>', 'wilder#reject_completion()', 'wilder#can_reject_completion()'], ['accept_key', '<Down>', 'wilder#accept_completion()', 'wilder#can_accept_completion()'], ]
line 36:     let l:mapping = get(l:config, l:key, l:default_mapping)
line 37:     if l:mapping is v:false
line 38:       continue
line 39:     endif
line 40: 
line 41:     if type(l:mapping) is v:t_list
line 42:       let l:fallback_mapping = l:mapping[1]
line 43:       let l:mapping = l:mapping[0]
line 44:     else
line 45:       let l:fallback_mapping = l:mapping
line 46:     endif
line 47: 
line 48:     if l:key ==# 'accept_key' && !get(l:config, 'accept_completion_auto_select', 1)
line 50:       let l:function = 'wilder#accept_completion(0)'
line 51:     endif
line 52: 
line 53:     if l:fallback_mapping isnot 0
line 54:       execute 'cnoremap <expr>' l:mapping l:condition ' ? ' l:function ' : ' string(l:fallback_mapping)
line 54: cnoremap <expr> <S-Tab> wilder#in_context()  ?  wilder#previous()  :  '<S-Tab>'
line 55:     else
line 56:       execute 'cmap ' l:mapping '<Cmd>call' l:function '<CR>'
line 57:     endif
line 58:   endfor
line 30:   for [l:key, l:default_mapping, l:function, l:condition] in [ ['next_key', '<Tab>', 'wilder#next()', 'wilder#in_context()'], ['previous_key', '<S-Tab>', 'wilder#previous()', 'wilder#in_context()'], ['reject_key', '<Up>', 'wilder#reject_completion()', 'wilder#can_reject_completion()'], ['accept_key', '<Down>', 'wilder#accept_completion()', 'wilder#can_accept_completion()'], ]
line 36:     let l:mapping = get(l:config, l:key, l:default_mapping)
line 37:     if l:mapping is v:false
line 38:       continue
line 39:     endif
line 40: 
line 41:     if type(l:mapping) is v:t_list
line 42:       let l:fallback_mapping = l:mapping[1]
line 43:       let l:mapping = l:mapping[0]
line 44:     else
line 45:       let l:fallback_mapping = l:mapping
line 46:     endif
line 47: 
line 48:     if l:key ==# 'accept_key' && !get(l:config, 'accept_completion_auto_select', 1)
line 50:       let l:function = 'wilder#accept_completion(0)'
line 51:     endif
line 52: 
line 53:     if l:fallback_mapping isnot 0
line 54:       execute 'cnoremap <expr>' l:mapping l:condition ' ? ' l:function ' : ' string(l:fallback_mapping)
line 54: cnoremap <expr> <Up> wilder#can_reject_completion()  ?  wilder#reject_completion()  :  '<Up>'
line 55:     else
line 56:       execute 'cmap ' l:mapping '<Cmd>call' l:function '<CR>'
line 57:     endif
line 58:   endfor
line 30:   for [l:key, l:default_mapping, l:function, l:condition] in [ ['next_key', '<Tab>', 'wilder#next()', 'wilder#in_context()'], ['previous_key', '<S-Tab>', 'wilder#previous()', 'wilder#in_context()'], ['reject_key', '<Up>', 'wilder#reject_completion()', 'wilder#can_reject_completion()'], ['accept_key', '<Down>', 'wilder#accept_completion()', 'wilder#can_accept_completion()'], ]
line 36:     let l:mapping = get(l:config, l:key, l:default_mapping)
line 37:     if l:mapping is v:false
line 38:       continue
line 39:     endif
line 40: 
line 41:     if type(l:mapping) is v:t_list
line 42:       let l:fallback_mapping = l:mapping[1]
line 43:       let l:mapping = l:mapping[0]
line 44:     else
line 45:       let l:fallback_mapping = l:mapping
line 46:     endif
line 47: 
line 48:     if l:key ==# 'accept_key' && !get(l:config, 'accept_completion_auto_select', 1)
line 50:       let l:function = 'wilder#accept_completion(0)'
line 51:     endif
line 52: 
line 53:     if l:fallback_mapping isnot 0
line 54:       execute 'cnoremap <expr>' l:mapping l:condition ' ? ' l:function ' : ' string(l:fallback_mapping)
line 54: cnoremap <expr> <Down> wilder#can_accept_completion()  ?  wilder#accept_completion()  :  '<Down>'
line 55:     else
line 56:       execute 'cmap ' l:mapping '<Cmd>call' l:function '<CR>'
line 57:     endif
line 58:   endfor
line 30:   for [l:key, l:default_mapping, l:function, l:condition] in [ ['next_key', '<Tab>', 'wilder#next()', 'wilder#in_context()'], ['previous_key', '<S-Tab>', 'wilder#previous()', 'wilder#in_context()'], ['reject_key', '<Up>', 'wilder#reject_completion()', 'wilder#can_reject_completion()'], ['accept_key', '<Down>', 'wilder#accept_completion()', 'wilder#can_accept_completion()'], ]
line 36:     let l:mapping = get(l:config, l:key, l:default_mapping)
line 37:     if l:mapping is v:false
line 38:       continue
line 39:     endif
line 40: 
line 41:     if type(l:mapping) is v:t_list
line 42:       let l:fallback_mapping = l:mapping[1]
line 43:       let l:mapping = l:mapping[0]
line 44:     else
line 45:       let l:fallback_mapping = l:mapping
line 46:     endif
line 47: 
line 48:     if l:key ==# 'accept_key' && !get(l:config, 'accept_completion_auto_select', 1)
line 50:       let l:function = 'wilder#accept_completion(0)'
line 51:     endif
line 52: 
line 53:     if l:fallback_mapping isnot 0
line 54:       execute 'cnoremap <expr>' l:mapping l:condition ' ? ' l:function ' : ' string(l:fallback_mapping)
line 55:     else
line 56:       execute 'cmap ' l:mapping '<Cmd>call' l:function '<CR>'
line 57:     endif
line 58:   endfor
line 59: 
wilder#setup# returning #0

continuing in wilder#setup

wilder#setup returning #0

continuing in wilder#lua#call

calling wilder#lua#wrap(0)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #0

continuing in wilder#lua#call

wilder#lua#call returning #0

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#cmdline_pipeline', {'language': 'python', 'fuzzy': 2})

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#cmdline_pipeline({'language': 'python', 'fuzzy': 2})

line 1:   return wilder#cmdline#pipeline(get(a:, 1, {}))
Searching for "autoload/wilder/cmdline.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/cmdline.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/cmdline.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/cmdline.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cmdline.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cmdline.vim"
line 1: let s:cmdline_cache = wilder#cache#mru_cache(30)
Searching for "autoload/wilder/cache.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/cache.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/cache.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/cache.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cache.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cache.vim"
line 1: function! wilder#cache#cache() abort
line 10: 
line 11: function! s:get(key) dict abort
line 14: 
line 15: function! s:set(key, value) dict abort
line 18: 
line 19: function! s:has_key(key) dict abort
line 22: 
line 23: function! s:clear() dict abort
line 26: 
line 27: function! wilder#cache#mru_cache(max_size) abort
line 40: 
line 41: function! s:mru_get(key) dict abort
line 44: 
line 45: function! s:mru_set(key, value) dict abort
line 50: 
line 51: function! s:mru_clear() dict abort
line 55: 
line 56: function! s:mru_update(key) dict abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cache.vim
continuing in /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cmdline.vim
calling wilder#cache#mru_cache(30)

line 1:   return { '_cache': {}, '_queue': [], '_counts': {}, '_max_size': a:max_size, 'get': funcref('s:mru_get'), 'set': funcref('s:mru_set'), 'has_key': funcref('s:has_key'), 'clear': funcref('s:mru_clear'), 'mru_update': funcref('s:mru_update'), }
wilder#cache#mru_cache returning {'set': function('<80><fd>R43_mru_set'..._key': function('<80><fd>R43_has_key')}

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cmdline.vim

line 2: 
line 3: function! wilder#cmdline#parse(cmdline) abort
line 15: 
line 16: " match_arg  : the argument for the fuzzy filter to match against
line 17: " expand_arg : the argument passed to getcompletion()
line 18: " expand     : the type passed to getcompletion()
line 19: " fuzzy_char : the character used to get fuzzy completion if fuzzy mode is 1
line 20: function! wilder#cmdline#prepare_getcompletion(ctx, res, fuzzy, use_python) abort
line 39: 
line 40: " Sets match_arg, expand_arg fuzzy_char based on expand and expand_arg. These
line 41: " will be used by wilder#cmdline#get_fuzzy_completion() to decide how to get
line 42: " the completions.
line 43: " Generally we want to use the first char in expand_arg as fuzzy_char,
line 44: " set match_arg to expand_arg, and adjust expand_arg to '' since we are only
line 45: " expanding the fuzzy char.
line 46: function! s:prepare_fuzzy_completion(ctx, res, use_python) abort
line 100: 
line 101: function! wilder#cmdline#prepare_file_completion(ctx, res, fuzzy)
line 260: 
line 261: function! wilder#cmdline#get_fuzzy_completion(ctx, res, getcompletion, fuzzy_mode, use_python) abort
line 314: 
line 315: let s:cached_tags = {}
line 316: let s:cached_tags_session_id = -1
line 317: 
line 318: function! wilder#cmdline#python_get_file_completion(ctx, res) abort
line 344: 
line 345: function! wilder#cmdline#getcompletion(ctx, res) abort
line 599: 
line 600: function! wilder#cmdline#is_file_expansion(expand) abort
line 607: 
line 608: function! wilder#cmdline#is_user_command(cmd) abort
line 611: 
line 612: let s:cached_commands_session_id = -1
line 613: let s:has_completion_error = {}
line 614: let s:cached_user_commands = {}
line 615: 
line 616: " returns [{handled}, {result}, {res}[, {need_filter}]]
line 617: function! wilder#cmdline#prepare_user_completion(ctx, res) abort
line 720: 
line 721: function! wilder#cmdline#replace(ctx, x, data) abort
line 743: 
line 744: function! wilder#cmdline#draw_path(ctx, x, data) abort
line 752: 
line 753: function! s:convert_result_to_data(res)
line 775: 
line 776: " Gets completions based on whether res, fuzzy and use_python
line 777: function! s:getcompletion(ctx, res, fuzzy, use_python) abort
line 807: 
line 808: function wilder#cmdline#should_use_file_finder(res) abort
line 841: 
line 842: let s:substitute_commands = { 'substitute': v:true, 'smagic': v:true, 'snomagic': v:true, 'global': v:true, 'vglobal': v:true, }
line 849: 
line 850: function! wilder#cmdline#is_substitute_command(cmd) abort
line 853: 
line 854: function! wilder#cmdline#substitute_pipeline(opts) abort
line 907: 
line 908: function! wilder#cmdline#python_file_finder_pipeline(opts) abort
line 1008: 
line 1009: function! s:expand_user_and_env_vars(arg)
line 1030: 
line 1031: function! s:file_finder(ctx, opts, res) abort
line 1073: 
line 1074: function! s:simplify(path)
line 1089: 
line 1090: function! s:get_opts(opts) abort
line 1118: 
line 1119: function! wilder#cmdline#getcompletion_pipeline(opts) abort
line 1204: 
line 1205: function! s:filter_file_in_path(ctx, xs, data) abort
line 1213: 
line 1214: function! s:get_lua_completion(ctx, res, fuzzy) abort
line 1271: 
line 1272: function! wilder#cmdline#replace_lua(ctx, x, data)
line 1283: 
line 1284: function! wilder#cmdline#pipeline(opts) abort
line 1384: 
line 1385: function! s:set_pcre2_pattern(data, fuzzy) abort
line 1397: 
line 1398: function! s:sort_buffers_lastused(ctx, xs, data) abort
line 1455: 
line 1456: function! s:sort_buffers_lastused_func(x1, x2, x_to_info, current_bufnr) abort
line 1472: 
line 1473: function! s:set_query(data) abort
line 1479: 
line 1480: function! s:is_prefix(str, q) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/cmdline.vim
continuing in wilder#cmdline_pipeline
calling wilder#cmdline#pipeline({'language': 'python', 'fuzzy': 2})

line 1:   if has_key(a:opts, 'hide_in_substitute')
line 2:     let l:hide_in_substitute = a:opts.hide_in_substitute
line 3:   elseif has_key(a:opts, 'hide')
line 4:     " DEPRECATED: use hide_in_substitute
line 5:     let l:hide_in_substitute = a:opts.hide
line 6:   else
line 7:     let l:hide_in_substitute = has('nvim') && !has('nvim-0.3.7')
line 8:   endif
line 9: 
line 10:   let l:Sorter = get(a:opts, 'sorter', get(a:opts, 'sort', 0))
line 11: 
line 12:   let l:set_pcre2_pattern = get(a:opts, 'set_pcre2_pattern', 0)
line 13: 
line 14:   let l:sort_buffers_lastused = get(a:opts, 'sort_buffers_lastused', 1)
line 15: 
line 16:   let l:should_debounce = get(a:opts, 'debounce', 0) > 0
line 17:   if l:should_debounce
line 18:     let l:debounce_interval = a:opts['debounce']
line 19:     let l:Debounce = wilder#debounce(l:debounce_interval)
line 20:   else
line 21:     let l:Debounce = 0
line 22:   endif
line 23: 
line 24:   let l:opts = s:get_opts(a:opts)
calling <SNR>42_get_opts({'language': 'python', 'fuzzy': 2})

line 1:   if has_key(a:opts, 'language')
line 2:     let l:use_python = a:opts['language'] ==# 'python'
line 3:   elseif has_key(a:opts, 'use_python')
line 4:     let l:use_python = a:opts['use_python']
line 5:   else
line 6:     let l:use_python = wilder#options#get('use_python_remote_plugin')
line 7:   endif
line 8: 
line 9:   let l:fuzzy = get(a:opts, 'fuzzy', 0)
line 10:   let l:with_data = 0
line 11:   if l:fuzzy
line 12:     if has_key(a:opts, 'fuzzy_filter_with_data')
line 13:       let l:with_data = 1
line 14:       let l:Filter = a:opts['fuzzy_filter_with_data']
line 15:     elseif has_key(a:opts, 'fuzzy_filter')
line 16:       let l:Filter = a:opts['fuzzy_filter']
line 17:     elseif l:use_python
line 18:       let l:Filter = wilder#python_fuzzy_filter()
calling wilder#python_fuzzy_filter()

line 1:   return call('wilder#transform#python_fuzzy_filter', a:000)
Searching for "autoload/wilder/transform.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/transform.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/transform.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/transform.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/transform.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/transform.vim"
line 1: function! wilder#transform#lexical_sorter() abort
line 4: 
line 5: " opts and query are ignored
line 6: function! wilder#transform#lexical_sort(ctx, opts, xs, ...) abort
line 9: 
line 10: function! wilder#transform#python_lexical_sorter() abort
line 13: 
line 14: " opts and query are ignored
line 15: function! wilder#transform#python_lexical_sort(ctx, opts, xs, ...) abort
line 18: 
line 19: function! wilder#transform#python_lexical_sorter() abort
line 22: 
line 23: " opts and query are ignored
line 24: function! wilder#transform#python_lexical_sort(ctx, opts, xs, ...) abort
line 27: 
line 28: function! wilder#transform#python_difflib_sorter(...) abort
line 35: 
line 36: function! wilder#transform#python_difflib_sort(ctx, opts, xs, query) abort
line 39: 
line 40: function! wilder#transform#python_fuzzywuzzy_sorter(...) abort
line 46: 
line 47: function! wilder#transform#python_fuzzywuzzy_sort(ctx, opts, xs, query) abort
line 50: 
line 51: " filters
line 52: 
line 53: function! wilder#transform#uniq_filter() abort
line 56: 
line 57: function! wilder#transform#uniq_filt(ctx, opts, xs, ...) abort
line 70: 
line 71: function! wilder#transform#python_uniq_filter() abort
line 74: 
line 75: function! wilder#transform#python_uniq_filt(ctx, opts, xs, ...) abort
line 78: 
line 79: function! wilder#transform#fuzzy_filter(...) abort
line 86: 
line 87: function! wilder#transform#fuzzy_filt(ctx, opts, candidates, query) abort
line 94: 
line 95: function! wilder#transform#vim_fuzzy_filter() abort
line 98: 
line 99: function! wilder#transform#vim_fuzzy_filt(ctx, opts, candidates, query) abort
line 110: 
line 111: function! s:vim_fuzzy_filt(ctx, candidates, query) abort
line 140: 
line 141: function! wilder#transform#python_fuzzy_filter(...) abort
line 147: 
line 148: function! wilder#transform#python_fuzzy_filt(ctx, opts, candidates, query) abort
line 157: 
line 158: function! wilder#transform#make_python_fuzzy_regex(query)
line 196: 
line 197: function! wilder#transform#python_fruzzy_filter(...) abort
line 204: 
line 205: function! wilder#transform#python_fruzzy_filt(ctx, opts, candidates, query) abort
line 212: 
line 213: function! wilder#transform#python_cpsm_filter(...) abort
line 219: 
line 220: function! wilder#transform#python_cpsm_filt(ctx, opts, candidates, query) abort
line 227: 
line 228: function! wilder#transform#python_clap_filter(...) abort
line 242: 
line 243: function! wilder#transform#python_clap_filt(ctx, opts, candidates, query) abort
line 250: 
line 251: function! wilder#transform#lua_fzy_filter() abort
line 254: 
line 255: function! wilder#transform#lua_fzy_filt(ctx, opts, candidates, query) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/transform.vim
continuing in wilder#python_fuzzy_filter
calling wilder#transform#python_fuzzy_filter()

line 1:   let l:opts = { 'engine': get(a:, 1, 're'), }
line 4:   return {ctx, xs, q -> wilder#transform#python_fuzzy_filt(ctx, l:opts, xs, q)}
wilder#transform#python_fuzzy_filter returning function('<lambda>1')

continuing in wilder#python_fuzzy_filter

wilder#python_fuzzy_filter returning function('<lambda>1')

continuing in <SNR>42_get_opts

line 19:     else
line 20:       let l:Filter = wilder#vim_fuzzy_filter()
line 21:     endif
line 22:   else
line 23:     let l:Filter = 0
line 24:   endif
line 25: 
line 26:   return [l:Filter, l:with_data, l:use_python, l:fuzzy]
<SNR>42_get_opts returning [function('<lambda>1'), 0, 1, 2]

continuing in wilder#cmdline#pipeline

line 25:   let l:F = l:opts[0]
line 26:   let l:with_data = l:opts[1]
line 27:   let l:fuzzy = l:opts[3]
line 28: 
line 29:   if l:fuzzy
line 30:     if l:with_data
line 31:       let l:Filter = {ctx, xs, q -> l:F(ctx, {}, xs, q)}
line 32:     else
line 33:       let l:Filter = l:F
line 34:     endif
line 35:   else
line 36:     let l:Filter = {ctx, xs, q -> filter(xs, {_, x -> match(x, q) == 0})}
line 37:   endif
line 38: 
line 39:   " [handled, user_completions, parsed, need_filter]
line 40:   " : handled?
line 41:   " └--> user_completions
line 42:   let l:user_completion_pipeline = [ {ctx, res -> res[0] ? res : v:false}, wilder#subpipeline({ctx, res -> [   {_, res -> res[1]},   wilder#result({     'value': {ctx, xs -> res[3] ? l:Filter(ctx, xs, res[2].arg) : xs},     'pos': res[2].pos,     'replace': ['wilder#cmdline#replace'],     'data': s:convert_result_to_data(res[2]),   }), ]}), ]
calling wilder#subpipeline(function('<lambda>3'))

line 1:   return wilder#pipe#subpipeline#(a:f)
Searching for "autoload/wilder/pipe/subpipeline.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/pipe/subpipeline.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/pipe/subpipeline.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/pipe/subpipeline.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/subpipeline.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/subpipeline.vim"
line 1: function! wilder#pipe#subpipeline#(f) abort
line 4: 
line 5: function! s:subpipeline(pipeline_func, ctx, x) abort
line 17: 
line 18: function! s:on_finish(handler_id, ctx, x) abort
line 24: 
line 25: function! s:on_error(handler_id, ctx, x) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/subpipeline.vim
continuing in wilder#subpipeline
calling wilder#pipe#subpipeline#(function('<lambda>3'))

line 1:   return {_, x -> {ctx -> s:subpipeline(a:f, ctx, x)}}
wilder#pipe#subpipeline# returning function('<lambda>4')

continuing in wilder#subpipeline

wilder#subpipeline returning function('<lambda>4')

continuing in wilder#cmdline#pipeline

line 54: 
line 55:   " [handled, user_completions, parsed]
line 56:   " : not handled, extract parsed
line 57:   " : getcompletion_pipeline 
line 58:   " : sort if needed
line 59:   " : add pcre2 pattern if needed
line 60:   " └--> result
line 61:   let l:getcompletion_pipeline = [{ctx, res -> res[2]}] + wilder#cmdline#getcompletion_pipeline(a:opts) + [ wilder#if(l:Sorter isnot 0, wilder#result({   'value': {ctx, xs, data ->     l:Sorter(ctx, xs, get(data, 'cmdline.match_arg', ''))} })), wilder#if(l:set_pcre2_pattern, wilder#result({   'data': {ctx, data -> s:set_pcre2_pattern(data, l:fuzzy)}, })), ]
calling wilder#cmdline#getcompletion_pipeline({'language': 'python', 'fuzzy': 2})

line 1:   let [l:Filter, l:with_data, l:use_python, l:fuzzy] = s:get_opts(a:opts)
calling <SNR>42_get_opts({'language': 'python', 'fuzzy': 2})

line 1:   if has_key(a:opts, 'language')
line 2:     let l:use_python = a:opts['language'] ==# 'python'
line 3:   elseif has_key(a:opts, 'use_python')
line 4:     let l:use_python = a:opts['use_python']
line 5:   else
line 6:     let l:use_python = wilder#options#get('use_python_remote_plugin')
line 7:   endif
line 8: 
line 9:   let l:fuzzy = get(a:opts, 'fuzzy', 0)
line 10:   let l:with_data = 0
line 11:   if l:fuzzy
line 12:     if has_key(a:opts, 'fuzzy_filter_with_data')
line 13:       let l:with_data = 1
line 14:       let l:Filter = a:opts['fuzzy_filter_with_data']
line 15:     elseif has_key(a:opts, 'fuzzy_filter')
line 16:       let l:Filter = a:opts['fuzzy_filter']
line 17:     elseif l:use_python
line 18:       let l:Filter = wilder#python_fuzzy_filter()
calling wilder#python_fuzzy_filter()

line 1:   return call('wilder#transform#python_fuzzy_filter', a:000)
calling wilder#transform#python_fuzzy_filter()

line 1:   let l:opts = { 'engine': get(a:, 1, 're'), }
line 4:   return {ctx, xs, q -> wilder#transform#python_fuzzy_filt(ctx, l:opts, xs, q)}
wilder#transform#python_fuzzy_filter returning function('<lambda>6')

continuing in wilder#python_fuzzy_filter

wilder#python_fuzzy_filter returning function('<lambda>6')

continuing in <SNR>42_get_opts

line 19:     else
line 20:       let l:Filter = wilder#vim_fuzzy_filter()
line 21:     endif
line 22:   else
line 23:     let l:Filter = 0
line 24:   endif
line 25: 
line 26:   return [l:Filter, l:with_data, l:use_python, l:fuzzy]
<SNR>42_get_opts returning [function('<lambda>6'), 0, 1, 2]

continuing in wilder#cmdline#getcompletion_pipeline

line 2: 
line 3:   " parsed cmdline
line 4:   " : prepare_file_completion
line 5:   " : s:getcompletion
line 6:   " : map if relative_to_home_dir
line 7:   " : fuzzy_filter if needed
line 8:   " └--> result
line 9:   let l:file_completion_subpipeline = [ wilder#check({_, res -> wilder#cmdline#is_file_expansion(res.expand)}), {ctx, res -> wilder#cmdline#prepare_file_completion(ctx, res, l:fuzzy)}, wilder#subpipeline({ctx, res -> [   {ctx, res -> s:getcompletion(ctx, res, l:fuzzy, l:use_python)},   wilder#result({     'value': {ctx, xs, data -> l:fuzzy == 0 ?       s:filter_file_in_path(ctx, xs, data) : xs},   }),   wilder#result({     'value': {ctx, xs -> get(res, 'relative_to_home_dir', 0) ?       map(xs, {i, x -> fnamemodify(x, ':~')}) : xs},   }), ]}), wilder#if(l:fuzzy && !l:with_data, wilder#result({   'value': {ctx, xs, data -> l:Filter(     ctx, xs, get(data, 'cmdline.path_prefix', '') . get(data, 'cmdline.match_arg', ''))}, })), wilder#if(l:fuzzy && l:with_data, wilder#result({   'value': {ctx, xs, data -> l:Filter(     ctx, data, xs, get(data, 'cmdline.path_prefix', '') . get(data, 'cmdline.match_arg', ''))}, })), wilder#result({   'draw': ['wilder#cmdline#draw_path'],   'replace': ['wilder#cmdline#repla
calling wilder#check(function('<lambda>7'))

line 1:   return wilder#pipe#check#(a:000)
Searching for "autoload/wilder/pipe/check.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/pipe/check.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/pipe/check.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/pipe/check.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/check.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/check.vim"
line 1: function! wilder#pipe#check#(args) abort
line 4: 
line 5: function! s:check(checks, ctx, x) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/check.vim
continuing in wilder#check
calling wilder#pipe#check#([function('<lambda>7')])

line 1:   return {ctx, x -> s:check(a:args, ctx, x)}
wilder#pipe#check# returning function('<lambda>8')

continuing in wilder#check

wilder#check returning function('<lambda>8')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#subpipeline(function('<lambda>10'))

line 1:   return wilder#pipe#subpipeline#(a:f)
calling wilder#pipe#subpipeline#(function('<lambda>10'))

line 1:   return {_, x -> {ctx -> s:subpipeline(a:f, ctx, x)}}
wilder#pipe#subpipeline# returning function('<lambda>11')

continuing in wilder#subpipeline

wilder#subpipeline returning function('<lambda>11')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result({'value': function('<lambda>12')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
Searching for "autoload/wilder/pipe/result.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/pipe/result.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/pipe/result.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/pipe/result.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/result.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 4: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/result.vim"
line 1: function! wilder#pipe#result#(...) abort
line 5: 
line 6: function! s:result_start(args, ctx, x) abort
line 22: 
line 23: function! s:result(kvs, ctx, result)
line 56: 
line 57: function! s:extend(ctx, key, value)
line 62: 
line 63: function! s:add_key(result, key, value)
line 68: 
line 69: function! wilder#pipe#result#escape_output_result(chars) abort
line 75: 
line 76: function! wilder#pipe#result#escape_output(ctx, x, data) abort
line 79: 
line 80: function! s:set_data(data, chars) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/result.vim
continuing in wilder#result
calling wilder#pipe#result#({'value': function('<lambda>12')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>13')

continuing in wilder#result

wilder#result returning function('<lambda>13')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#if(1, function('<lambda>13'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
line 3:   endif
line 4: 
line 5:   return {ctx, x -> a:p(ctx, x)}
wilder#if returning function('<lambda>14')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result({'value': function('<lambda>15')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'value': function('<lambda>15')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>16')

continuing in wilder#result

wilder#result returning function('<lambda>16')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#if(0, function('<lambda>16'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
wilder#if returning function('<lambda>17')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result({'draw': ['wilder#cmdline#draw_path'], 'replace': ['wilder#cmdline#replace']})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'draw': ['wilder#cmdline#draw_path'], 'replace': ['wilder#cmdline#replace']})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>18')

continuing in wilder#result

wilder#result returning function('<lambda>18')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result_output_escape(' ')

line 1:   return wilder#pipe#result#escape_output_result(a:chars)
calling wilder#pipe#result#escape_output_result(' ')

line 1:   return wilder#result({ 'output': ['wilder#pipe#result#escape_output'], 'data': {ctx, data -> s:set_data(data, a:chars)}, })
calling wilder#result({'output': ['wilder#pipe#result#escape_output'], 'data': function('<lambda>19')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'output': ['wilder#pipe#result#escape_output'], 'data': function('<lambda>19')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>20')

continuing in wilder#result

wilder#result returning function('<lambda>20')

continuing in wilder#pipe#result#escape_output_result

wilder#pipe#result#escape_output_result returning function('<lambda>20')

continuing in wilder#result_output_escape

wilder#result_output_escape returning function('<lambda>20')

continuing in wilder#cmdline#getcompletion_pipeline

line 37: 
line 38:   " parsed cmdline
line 39:   " : prepare_completion
line 40:   " : s:getcompletion
line 41:   " : fuzzy_filter if needed
line 42:   " └--> result
line 43:   let l:completion_subpipeline = [ {ctx, res -> wilder#cmdline#prepare_getcompletion(ctx, res, l:fuzzy, l:use_python)}, {ctx, res -> s:getcompletion(ctx, res, l:fuzzy, l:use_python)}, wilder#if(l:fuzzy && !l:with_data, wilder#result({   'value': {ctx, xs, data -> l:Filter(     ctx, xs, get(data, 'cmdline.match_arg', ''))}, })), wilder#if(l:fuzzy && l:with_data, wilder#result({   'value': {ctx, xs, data -> l:Filter(     ctx, data, xs, get(data, 'cmdline.match_arg', ''))}, })), wilder#result({   'replace': ['wilder#cmdline#replace'], }), ]
calling wilder#result({'value': function('<lambda>23')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'value': function('<lambda>23')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>24')

continuing in wilder#result

wilder#result returning function('<lambda>24')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#if(1, function('<lambda>24'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
line 3:   endif
line 4: 
line 5:   return {ctx, x -> a:p(ctx, x)}
wilder#if returning function('<lambda>25')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result({'value': function('<lambda>26')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'value': function('<lambda>26')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>27')

continuing in wilder#result

wilder#result returning function('<lambda>27')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#if(0, function('<lambda>27'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
wilder#if returning function('<lambda>28')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result({'replace': ['wilder#cmdline#replace']})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'replace': ['wilder#cmdline#replace']})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>29')

continuing in wilder#result

wilder#result returning function('<lambda>29')

continuing in wilder#cmdline#getcompletion_pipeline

line 58: 
line 59:   let l:lua_completion_subpipeline = [ wilder#check({_, res -> res.expand ==# 'lua'}), {ctx, res -> has('nvim-0.5') ? res : v:false}, {ctx, res -> s:get_lua_completion(ctx, res, l:fuzzy)}, wilder#if(l:fuzzy && !l:with_data, wilder#result({   'value': {ctx, xs, data -> l:Filter(     ctx, xs, get(data, 'cmdline.match_arg', ''))}, })), wilder#if(l:fuzzy && l:with_data, wilder#result({   'value': {ctx, xs, data -> l:Filter(     ctx, data, xs, get(data, 'cmdline.match_arg', ''))}, })), ]
calling wilder#check(function('<lambda>30'))

line 1:   return wilder#pipe#check#(a:000)
calling wilder#pipe#check#([function('<lambda>30')])

line 1:   return {ctx, x -> s:check(a:args, ctx, x)}
wilder#pipe#check# returning function('<lambda>31')

continuing in wilder#check

wilder#check returning function('<lambda>31')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result({'value': function('<lambda>34')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'value': function('<lambda>34')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>35')

continuing in wilder#result

wilder#result returning function('<lambda>35')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#if(1, function('<lambda>35'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
line 3:   endif
line 4: 
line 5:   return {ctx, x -> a:p(ctx, x)}
wilder#if returning function('<lambda>36')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#result({'value': function('<lambda>37')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'value': function('<lambda>37')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>38')

continuing in wilder#result

wilder#result returning function('<lambda>38')

continuing in wilder#cmdline#getcompletion_pipeline

calling wilder#if(0, function('<lambda>38'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
wilder#if returning function('<lambda>39')

continuing in wilder#cmdline#getcompletion_pipeline

line 72: 
line 73:   " parsed cmdline
line 74:   " : is file expansion?
line 75:   " |--> file_completion_pipeline
line 76:   " └--> completion_pipeline
line 77:   return [ wilder#branch(   l:lua_completion_subpipeline,   l:file_completion_subpipeline,   l:completion_subpipeline, ), ]
calling wilder#branch([function('<lambda>31'), function('<la...('<lambda>36'), function('<lambda>39')], [function('<lambda>8'), function('<lam...('<lambda>18'), function('<lambda>20')], [function('<lambda>21'), function('<la...('<lambda>28'), function('<lambda>29')])

line 1:   return wilder#pipe#branch#(a:000)
Searching for "autoload/wilder/pipe/branch.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/pipe/branch.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/pipe/branch.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/pipe/branch.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/branch.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/branch.vim"
line 1: function! wilder#pipe#branch#(args) abort
line 8: 
line 9: function! s:branch(pipelines, ctx, x) abort
line 25: 
line 26: function! s:on_finish(state, ctx, x) abort
line 47: 
line 48: function! s:resolve(state, ctx, x) abort
line 54: 
line 55: function! s:on_error(state, ctx, x) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/pipe/branch.vim
continuing in wilder#branch
calling wilder#pipe#branch#([[function('<lambda>31'), function('<l...'<lambda>28'), function('<lambda>29')]])

line 1:   if len(a:args) == 0
line 2:     return {_, x -> v:false}
line 3:   endif
line 4: 
line 5:   return {_, x -> {ctx -> s:branch(a:args, ctx, x)}}
wilder#pipe#branch# returning function('<lambda>40')

continuing in wilder#branch

wilder#branch returning function('<lambda>40')

continuing in wilder#cmdline#getcompletion_pipeline

wilder#cmdline#getcompletion_pipeline returning [function('<lambda>40')]

continuing in wilder#cmdline#pipeline

calling wilder#result({'value': function('<lambda>41')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'value': function('<lambda>41')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>42')

continuing in wilder#result

wilder#result returning function('<lambda>42')

continuing in wilder#cmdline#pipeline

calling wilder#if(0, function('<lambda>42'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
wilder#if returning function('<lambda>43')

continuing in wilder#cmdline#pipeline

calling wilder#result({'data': function('<lambda>44')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'data': function('<lambda>44')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>45')

continuing in wilder#result

wilder#result returning function('<lambda>45')

continuing in wilder#cmdline#pipeline

calling wilder#if(0, function('<lambda>45'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
wilder#if returning function('<lambda>46')

continuing in wilder#cmdline#pipeline

line 71: 
line 72:   " cmdline
line 73:   " : check getcmdtype()?
line 74:   " |--> return v:false
line 75:   " : parse_cmdline
line 76:   " : check is substitute command and should hide?
line 77:   " |--> return v:true
line 78:   " : prepare_user_completion
line 79:   " : is user completion?
line 80:   " |--> user_completion_pipeline
line 81:   " └--> getcompletion_pipeline
line 82:   "    : add data.query
line 83:   "    └--> result
line 84:   return [ wilder#check({-> getcmdtype() ==# ':'}), {_, x -> wilder#cmdline#parse(x)}, wilder#if(l:hide_in_substitute, {ctx, res -> len(get(res, 'substitute_args', [])) >= 2 ? v:true : res}), wilder#if(l:should_debounce, l:Debounce), {ctx, res -> wilder#cmdline#prepare_user_completion(ctx, res)}, wilder#branch(   l:user_completion_pipeline,   l:getcompletion_pipeline, ), wilder#result({   'value': {ctx, xs, data -> l:sort_buffers_lastused ? s:sort_buffers_lastused(ctx, xs, data) : xs},   'data': {ctx, data -> s:set_query(data)}, }), ]
calling wilder#check(function('<lambda>47'))

line 1:   return wilder#pipe#check#(a:000)
calling wilder#pipe#check#([function('<lambda>47')])

line 1:   return {ctx, x -> s:check(a:args, ctx, x)}
wilder#pipe#check# returning function('<lambda>48')

continuing in wilder#check

wilder#check returning function('<lambda>48')

continuing in wilder#cmdline#pipeline

calling wilder#if(0, function('<lambda>50'))

line 1:   if !a:condition
line 2:     return {_, x -> x}
wilder#if returning function('<lambda>51')

continuing in wilder#cmdline#pipeline

calling wilder#if(0, 0)

line 1:   if !a:condition
line 2:     return {_, x -> x}
wilder#if returning function('<lambda>52')

continuing in wilder#cmdline#pipeline

calling wilder#branch([function('<lambda>2'), function('<lambda>4')], [function('<lambda>5'), function('<lam...('<lambda>43'), function('<lambda>46')])

line 1:   return wilder#pipe#branch#(a:000)
calling wilder#pipe#branch#([[function('<lambda>2'), function('<la...'<lambda>43'), function('<lambda>46')]])

line 1:   if len(a:args) == 0
line 2:     return {_, x -> v:false}
line 3:   endif
line 4: 
line 5:   return {_, x -> {ctx -> s:branch(a:args, ctx, x)}}
wilder#pipe#branch# returning function('<lambda>54')

continuing in wilder#branch

wilder#branch returning function('<lambda>54')

continuing in wilder#cmdline#pipeline

calling wilder#result({'data': function('<lambda>56'), 'value': function('<lambda>55')})

line 1:   if !a:0
line 2:     return wilder#pipe#result#()
line 3:   else
line 4:     return wilder#pipe#result#(a:1)
calling wilder#pipe#result#({'data': function('<lambda>56'), 'value': function('<lambda>55')})

line 1:   let l:args = a:0 ? a:1 : {}
line 2:   return {ctx, x -> s:result_start(l:args, ctx, x)}
wilder#pipe#result# returning function('<lambda>57')

continuing in wilder#result

wilder#result returning function('<lambda>57')

continuing in wilder#cmdline#pipeline

wilder#cmdline#pipeline returning [function('<lambda>48'), function('<la...('<lambda>54'), function('<lambda>57')]

continuing in wilder#cmdline_pipeline

wilder#cmdline_pipeline returning [function('<lambda>48'), function('<la...('<lambda>54'), function('<lambda>57')]

continuing in wilder#lua#call

calling wilder#lua#wrap([function('<lambda>48'), function('<la...('<lambda>54'), function('<lambda>57')])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>58(0, function('<lambda>48'))

calling wilder#lua#wrap(function('<lambda>48'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>48'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 0, 'name': '<lambda>48', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 0, 'name': '<lambda>48', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>58

<lambda>58 returning {'index': 0, 'name': '<lambda>48', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>58(1, function('<lambda>49'))

calling wilder#lua#wrap(function('<lambda>49'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>49'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 1, 'name': '<lambda>49', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 1, 'name': '<lambda>49', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>58

<lambda>58 returning {'index': 1, 'name': '<lambda>49', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>58(2, function('<lambda>51'))

calling wilder#lua#wrap(function('<lambda>51'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>51'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 2, 'name': '<lambda>51', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 2, 'name': '<lambda>51', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>58

<lambda>58 returning {'index': 2, 'name': '<lambda>51', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>58(3, function('<lambda>52'))

calling wilder#lua#wrap(function('<lambda>52'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>52'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 3, 'name': '<lambda>52', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 3, 'name': '<lambda>52', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>58

<lambda>58 returning {'index': 3, 'name': '<lambda>52', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>58(4, function('<lambda>53'))

calling wilder#lua#wrap(function('<lambda>53'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>53'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 4, 'name': '<lambda>53', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 4, 'name': '<lambda>53', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>58

<lambda>58 returning {'index': 4, 'name': '<lambda>53', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>58(5, function('<lambda>54'))

calling wilder#lua#wrap(function('<lambda>54'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>54'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 5, 'name': '<lambda>54', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 5, 'name': '<lambda>54', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>58

<lambda>58 returning {'index': 5, 'name': '<lambda>54', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>58(6, function('<lambda>57'))

calling wilder#lua#wrap(function('<lambda>57'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>57'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 6, 'name': '<lambda>57', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 6, 'name': '<lambda>57', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>58

<lambda>58 returning {'index': 6, 'name': '<lambda>57', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning [{'index': 0, 'name': '<lambda>48', '_...'__wilder_wrapped__': 477094643697281}]

continuing in wilder#lua#call

wilder#lua#call returning [{'index': 0, 'name': '<lambda>48', '_...'__wilder_wrapped__': 477094643697281}]

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#branch', [function('<lambda>59'), function('<la...('<lambda>64'), function('<lambda>65')])

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#branch([function('<lambda>59'), function('<la...('<lambda>64'), function('<lambda>65')])

line 1:   return wilder#pipe#branch#(a:000)
calling wilder#pipe#branch#([[function('<lambda>59'), function('<l...'<lambda>64'), function('<lambda>65')]])

line 1:   if len(a:args) == 0
line 2:     return {_, x -> v:false}
line 3:   endif
line 4: 
line 5:   return {_, x -> {ctx -> s:branch(a:args, ctx, x)}}
wilder#pipe#branch# returning function('<lambda>66')

continuing in wilder#branch

wilder#branch returning function('<lambda>66')

continuing in wilder#lua#call

calling wilder#lua#wrap(function('<lambda>66'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>66'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 7, 'name': '<lambda>66', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 7, 'name': '<lambda>66', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#call

wilder#lua#call returning {'index': 7, 'name': '<lambda>66', '__wilder_wrapped__': 477094643697281}

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#set_option', 'pipeline', [function('<lambda>67')])

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#set_option('pipeline', [function('<lambda>67')])

line 1:   if !a:0
line 2:     call wilder#options#set(a:x)
line 3:   else
line 4:     call wilder#options#set(a:x, a:1)
calling wilder#options#set('pipeline', [function('<lambda>67')])

line 1:   if len(a:000) == 0
line 2:     call extend(s:opts, a:x)
line 3:   else
line 4:     let s:opts[a:x] = a:1
line 5:   endif
wilder#options#set returning #0

continuing in wilder#set_option

line 5:   endif
wilder#set_option returning #0

continuing in wilder#lua#call

calling wilder#lua#wrap(0)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #0

continuing in wilder#lua#call

wilder#lua#call returning #0

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#popupmenu_devicons')

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#popupmenu_devicons()

line 1:   let l:args = get(a:, 1, {})
line 2:   return wilder#renderer#component#popupmenu_devicons#(l:args)
Searching for "autoload/wilder/renderer/component/popupmenu_devicons.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/renderer/component/popupmenu_devicons.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/renderer/component/popupmenu_devicons.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/renderer/component/popupmenu_devicons.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_devicons.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 2: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_devicons.vim"
line 1: function! wilder#renderer#component#popupmenu_devicons#(opts) abort
line 23: 
line 24: function! s:devicons(state, ctx, result) abort
line 125: 
line 126: function! s:get_guifg(hl) abort
line 133: 
line 134: function! s:make_temp_hl(name, hl, guifg) abort
line 143: 
line 144: function! s:get_icon_func()
line 165: 
line 166: function! s:get_hl_func()
line 181: 
line 182: function! wilder#renderer#component#popupmenu_devicons#get_icon_from_vim_devicons()
line 185: 
line 186: function! wilder#renderer#component#popupmenu_devicons#get_icon_from_nerdfont_vim()
line 189: 
line 190: function! wilder#renderer#component#popupmenu_devicons#get_icon_from_nvim_web_devicons(opts)
line 193: 
line 194: function! s:get_icon_from_nvim_web_devicons(opts, name, is_dir)
line 203: 
line 204: function! wilder#renderer#component#popupmenu_devicons#get_hl_from_nvim_web_devicons(opts)
line 211: 
line 212: function! s:get_hl_from_nvim_web_devicons(opts, name, is_dir)
line 222: 
line 223: function! s:get_data_from_nvim_web_devicons(name)
line 228: 
line 229: function! wilder#renderer#component#popupmenu_devicons#get_hl_from_glyph_palette_vim(opts)
line 232: 
line 233: let s:glyph_hls = {}
line 234: let s:glyph_hls_session_id = -1
line 235: 
line 236: function! s:get_hl_from_glyph_palette_vim(opts, ctx, icon)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_devicons.vim
continuing in wilder#popupmenu_devicons
calling wilder#renderer#component#popupmenu_devicons#({})

line 1:   let l:padding = get(a:opts, 'padding', [0, 1])
line 2:   let l:state = { 'session_id': -1, 'cache': wilder#cache#cache(), 'created_hls': {}, 'left_padding': repeat(' ', l:padding[0]), 'right_padding': repeat(' ', l:padding[1]), 'combine_selected_hl': get(a:opts, 'combine_selected_hl', 0), 'min_width': get(a:opts, 'min_width', 1), }
calling wilder#cache#cache()

line 1:   return { '_cache': {}, 'get': funcref('s:get'), 'set': funcref('s:set'), 'has_key': funcref('s:has_key'), 'clear': funcref('s:clear'), }
wilder#cache#cache returning {'has_key': function('<80><fd>R43_has_...'clear': function('<80><fd>R43_clear')}

continuing in wilder#renderer#component#popupmenu_devicons#

line 11: 
line 12:   if has_key(a:opts, 'get_icon')
line 13:     let l:state.get_icon = a:opts.get_icon
line 14:   endif
line 15: 
line 16:   if has_key(a:opts, 'get_hl')
line 17:     let l:state.get_hl = a:opts.get_hl
line 18:   endif
line 19: 
line 20:   return {ctx, result -> s:devicons(l:state, ctx, result)}
wilder#renderer#component#popupmenu_devicons# returning function('<lambda>68')

continuing in wilder#popupmenu_devicons

wilder#popupmenu_devicons returning function('<lambda>68')

continuing in wilder#lua#call

calling wilder#lua#wrap(function('<lambda>68'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>68'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 8, 'name': '<lambda>68', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 8, 'name': '<lambda>68', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#call

wilder#lua#call returning {'index': 8, 'name': '<lambda>68', '__wilder_wrapped__': 477094643697281}

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#popupmenu_scrollbar')

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#popupmenu_scrollbar()

line 1:   let l:args = get(a:, 1, {})
line 2:   return wilder#renderer#component#popupmenu_scrollbar#(l:args)
Searching for "autoload/wilder/renderer/component/popupmenu_scrollbar.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/renderer/component/popupmenu_scrollbar.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/renderer/component/popupmenu_scrollbar.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/renderer/component/popupmenu_scrollbar.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_scrollbar.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 2: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_scrollbar.vim"
line 1: function! wilder#renderer#component#popupmenu_scrollbar#(opts) abort
line 16: 
line 17: function! s:scrollbar(state, ctx, result) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_scrollbar.vim
continuing in wilder#popupmenu_scrollbar
calling wilder#renderer#component#popupmenu_scrollbar#({})

line 1:   let l:state = {}
line 2: 
line 3:   let l:thumb_char = get(a:opts, 'thumb_char', '█')
line 4:   let l:thumb_hl = get(a:opts, 'thumb_hl', 'PmenuThumb')
line 5:   let l:scrollbar_char = get(a:opts, 'scrollbar_char', ' ')
line 6:   let l:scrollbar_hl = get(a:opts, 'scrollbar_hl', 'PmenuSbar')
line 7: 
line 8:   let l:state.thumb_chunk = [l:thumb_char, l:thumb_hl]
line 9:   let l:state.scrollbar_chunk = [l:scrollbar_char, l:scrollbar_hl]
line 10: 
line 11:   let l:state.collapse = get(a:opts, 'collapse', 1)
line 12: 
line 13:   return {ctx, result -> s:scrollbar(l:state, ctx, result)}
wilder#renderer#component#popupmenu_scrollbar# returning function('<lambda>69')

continuing in wilder#popupmenu_scrollbar

wilder#popupmenu_scrollbar returning function('<lambda>69')

continuing in wilder#lua#call

calling wilder#lua#wrap(function('<lambda>69'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>69'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 9, 'name': '<lambda>69', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 9, 'name': '<lambda>69', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#call

wilder#lua#call returning {'index': 9, 'name': '<lambda>69', '__wilder_wrapped__': 477094643697281}

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#popupmenu_border_theme', {'right': [' ', function('<lambda>70')...on('<lambda>71')], 'border': 'rounded'})

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#popupmenu_border_theme({'right': [' ', function('<lambda>70')...on('<lambda>71')], 'border': 'rounded'})

line 1:   let l:args = get(a:, 1, {})
line 2:   return wilder#renderer#popupmenu_border_theme#(l:args)
Searching for "autoload/wilder/renderer/popupmenu_border_theme.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/renderer/popupmenu_border_theme.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/renderer/popupmenu_border_theme.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/renderer/popupmenu_border_theme.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/popupmenu_border_theme.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 2: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/popupmenu_border_theme.vim"
line 1: function! wilder#renderer#popupmenu_border_theme#(opts) abort
line 87: 
line 88: function! wilder#renderer#popupmenu_border_theme#wrap_top_or_bottom(is_top, lines, border_chars) abort
line 105: 
line 106: function! s:wrap_with_border(line, left, right) abort
line 113: 
line 114: function! s:wrap_dict_with_border(line, left, right) abort
line 120: 
line 121: function! s:wrap_string_or_func_with_border(ctx, result, line, left, right) abort
line 154: 
line 155: function! s:make_top_or_bottom_border(ctx, is_top, border_chars) abort
line 195: 
line 196: function! s:wrap_message(ctx, result, message, border_chars, hl_key) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/popupmenu_border_theme.vim
continuing in wilder#popupmenu_border_theme
calling wilder#renderer#popupmenu_border_theme#({'right': [' ', function('<lambda>70')...on('<lambda>71')], 'border': 'rounded'})

line 1:   let l:border_chars = get(a:opts, 'border', 'single')
line 2:   if type(l:border_chars) is v:t_string
line 3:     if l:border_chars ==# 'solid'
line 4:       let l:border_chars = ['█', '█', '█',               '█',      '█',               '█', '█', '█']
line 7:     elseif l:border_chars ==# 'rounded'
line 8:       let l:border_chars = ['╭', '─', '╮',               '│',      '│',               '╰', '─', '╯']
line 11:     elseif l:border_chars ==# 'double'
line 12:       let l:border_chars = ['╔', '═', '╗',               '║',      '║',               '╚', '═', '╝']
line 15:     else
line 16:       " single
line 17:       let l:border_chars = ['┌', '─', '┐',               '│',      '│',               '└', '─', '┘']
line 20:     endif
line 21:   endif
line 22: 
line 23:   let l:with_border = copy(a:opts)
line 24: 
line 25:   if !has_key(a:opts, 'highlights')
line 26:     let l:with_border.highlights = {}
line 27:   else
line 28:     let l:with_border.highlights = copy(a:opts.highlights)
line 29:   endif
line 30: 
line 31:   let l:top = get(a:opts, 'top', [])
line 32:   let l:with_border.top = wilder#renderer#popupmenu_border_theme#wrap_top_or_bottom(1, l:top, l:border_chars)
calling wilder#renderer#popupmenu_border_theme#wrap_top_or_bottom(1, [], ['╭', '─', '╮', '│', '│', '╰', '─', '╯'])

line 1:   let l:new_lines = []
line 2:   for l:Line in a:lines
line 3:     let l:New_line = s:wrap_with_border(l:Line, a:border_chars[3], a:border_chars[4])
line 4:     call add(l:new_lines, l:New_line)
line 5:   endfor
line 6: 
line 7:   if a:is_top
line 8:     if !empty(a:border_chars[0]) || !empty(a:border_chars[1]) || !empty(a:border_chars[2])
line 9:       call insert(l:new_lines, {ctx -> s:make_top_or_bottom_border(ctx, 1, a:border_chars)})
line 10:     endif
line 11:   elseif !empty(a:border_chars[5]) || !empty(a:border_chars[6]) || !empty(a:border_chars[7])
line 12:     call add(l:new_lines, {ctx -> s:make_top_or_bottom_border(ctx, 0, a:border_chars)})
line 13:   endif
line 14: 
line 15:   return l:new_lines
wilder#renderer#popupmenu_border_theme#wrap_top_or_bottom returning [function('<lambda>72')]

continuing in wilder#renderer#popupmenu_border_theme#

line 33: 
line 34:   let l:bottom = get(a:opts, 'bottom', [])
line 35:   let l:with_border.bottom = wilder#renderer#popupmenu_border_theme#wrap_top_or_bottom(0, l:bottom, l:border_chars)
calling wilder#renderer#popupmenu_border_theme#wrap_top_or_bottom(0, [], ['╭', '─', '╮', '│', '│', '╰', '─', '╯'])

line 1:   let l:new_lines = []
line 2:   for l:Line in a:lines
line 3:     let l:New_line = s:wrap_with_border(l:Line, a:border_chars[3], a:border_chars[4])
line 4:     call add(l:new_lines, l:New_line)
line 5:   endfor
line 6: 
line 7:   if a:is_top
line 8:     if !empty(a:border_chars[0]) || !empty(a:border_chars[1]) || !empty(a:border_chars[2])
line 9:       call insert(l:new_lines, {ctx -> s:make_top_or_bottom_border(ctx, 1, a:border_chars)})
line 10:     endif
line 11:   elseif !empty(a:border_chars[5]) || !empty(a:border_chars[6]) || !empty(a:border_chars[7])
line 12:     call add(l:new_lines, {ctx -> s:make_top_or_bottom_border(ctx, 0, a:border_chars)})
line 13:   endif
line 14: 
line 15:   return l:new_lines
wilder#renderer#popupmenu_border_theme#wrap_top_or_bottom returning [function('<lambda>73')]

continuing in wilder#renderer#popupmenu_border_theme#

line 36: 
line 37:   if has_key(a:opts, 'empty_message') && a:opts.empty_message isnot 0 && (!empty(l:border_chars[3]) || !empty(l:border_chars[4]))
line 40:     if type(a:opts.empty_message) is v:t_dict
line 41:       let l:with_border.empty_message = copy(a:opts.empty_message)
line 42:       let l:Value = a:opts.empty_message.value
line 43:       let l:with_border.empty_message.value = {ctx, result -> s:wrap_message(ctx, result, l:Value, l:border_chars, 'empty_message')}
line 45:     else
line 46:       let l:with_border.empty_message = {ctx, result -> s:wrap_message(ctx, result, a:opts.empty_message, l:border_chars, 'empty_message')}
line 48:     endif
line 49:   endif
line 50: 
line 51:   if !has_key(a:opts, 'error_message')
line 52:     let l:Error_message = wilder#renderer#component#popupmenu_error_message#()
Searching for "autoload/wilder/renderer/component/popupmenu_error_message.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/renderer/component/popupmenu_error_message.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/renderer/component/popupmenu_error_message.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/renderer/component/popupmenu_error_message.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_error_message.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 52: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_error_message.vim"
line 1: function! wilder#renderer#component#popupmenu_error_message#() abort
line 4: 
line 5: function! s:error_message(ctx, message) abort
line 89: 
line 90: function! s:find_next_word(chars, i) abort
line 129: 
line 130: function! s:split_word_into_lines(chars, start, end, max_width) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/component/popupmenu_error_message.vim
continuing in wilder#renderer#popupmenu_border_theme#
calling wilder#renderer#component#popupmenu_error_message#()

line 1:   return {ctx, error -> s:error_message(ctx, error)}
wilder#renderer#component#popupmenu_error_message# returning function('<lambda>74')

continuing in wilder#renderer#popupmenu_border_theme#

line 53:   else
line 54:     let l:Error_message = a:opts.error_message
line 55:   endif
line 56: 
line 57:   let l:with_border.error_message = {ctx, error -> s:wrap_message(ctx, error, l:Error_message, l:border_chars, 'error')}
line 58: 
line 59:   if !has_key(a:opts, 'left') && !has_key(a:opts, 'right')
line 60:     let l:with_border.left = [' ']
line 61:     let l:with_border.right = [' ', wilder#popupmenu_scrollbar()]
line 62:   else
line 63:     let l:with_border.left = copy(get(a:opts, 'left', []))
line 64:     let l:with_border.right = copy(get(a:opts, 'right', []))
line 65:   endif
line 66: 
line 67:   if !has_key(l:with_border.highlights, 'border')
line 68:     let l:with_border.highlights.border = 'Normal'
line 69:   endif
line 70: 
line 71:   if !has_key(l:with_border.highlights, 'bottom_border')
line 72:     let l:with_border.highlights.bottom_border = l:with_border.highlights.border
line 73:   endif
line 74: 
line 75:   let l:border_hl = l:with_border.highlights.border
line 76: 
line 77:   if !empty(l:border_chars[3])
line 78:     call insert(l:with_border.left, [l:border_chars[3], l:border_hl])
line 79:   endif
line 80:   if !empty(l:border_chars[4])
line 81:     call add(l:with_border.right, [l:border_chars[4], l:border_hl])
line 82:   endif
line 83: 
line 84:   return l:with_border
wilder#renderer#popupmenu_border_theme# returning {'right': [' ', function('<lambda>70')...nded', 'top': [function('<lambda>72')]}

continuing in wilder#popupmenu_border_theme

wilder#popupmenu_border_theme returning {'right': [' ', function('<lambda>70')...nded', 'top': [function('<lambda>72')]}

continuing in wilder#lua#call

calling wilder#lua#wrap({'right': [' ', function('<lambda>70')...nded', 'top': [function('<lambda>72')]})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap([' ', function('<lambda>70'), ['│', 'Normal']])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>76(0, ' ')

calling wilder#lua#wrap(' ')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning ' '

continuing in <lambda>76

<lambda>76 returning ' '

continuing in wilder#lua#wrap

calling <lambda>76(1, function('<lambda>70'))

calling wilder#lua#wrap(function('<lambda>70'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>70'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 10, 'name': '<lambda>70', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 10, 'name': '<lambda>70', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>76

<lambda>76 returning {'index': 10, 'name': '<lambda>70', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>76(2, ['│', 'Normal'])

calling wilder#lua#wrap(['│', 'Normal'])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>77(0, '│')

calling wilder#lua#wrap('│')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '│'

continuing in <lambda>77

<lambda>77 returning '│'

continuing in wilder#lua#wrap

calling <lambda>77(1, 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>77

<lambda>77 returning 'Normal'

continuing in wilder#lua#wrap

wilder#lua#wrap returning ['│', 'Normal']

continuing in <lambda>76

<lambda>76 returning ['│', 'Normal']

continuing in wilder#lua#wrap

wilder#lua#wrap returning [' ', {'index': 10, 'name': '<lambda>7...__': 477094643697281}, ['│', 'Normal']]

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap({'border': 'Normal', 'bottom_border': 'Normal'})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>78('border', 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>78

<lambda>78 returning 'Normal'

continuing in wilder#lua#wrap

calling <lambda>78('bottom_border', 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>78

<lambda>78 returning 'Normal'

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'border': 'Normal', 'bottom_border': 'Normal'}

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap([function('<lambda>73')])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>79(0, function('<lambda>73'))

calling wilder#lua#wrap(function('<lambda>73'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>73'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>79

<lambda>79 returning {'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning [{'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}]

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(function('<lambda>75'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>75'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 12, 'name': '<lambda>75', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 12, 'name': '<lambda>75', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap([['│', 'Normal'], ' ', function('<lambda>71')])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>80(0, ['│', 'Normal'])

calling wilder#lua#wrap(['│', 'Normal'])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>81(0, '│')

calling wilder#lua#wrap('│')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '│'

continuing in <lambda>81

<lambda>81 returning '│'

continuing in wilder#lua#wrap

calling <lambda>81(1, 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>81

<lambda>81 returning 'Normal'

continuing in wilder#lua#wrap

wilder#lua#wrap returning ['│', 'Normal']

continuing in <lambda>80

<lambda>80 returning ['│', 'Normal']

continuing in wilder#lua#wrap

calling <lambda>80(1, ' ')

calling wilder#lua#wrap(' ')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning ' '

continuing in <lambda>80

<lambda>80 returning ' '

continuing in wilder#lua#wrap

calling <lambda>80(2, function('<lambda>71'))

calling wilder#lua#wrap(function('<lambda>71'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>71'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 13, 'name': '<lambda>71', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 13, 'name': '<lambda>71', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>80

<lambda>80 returning {'index': 13, 'name': '<lambda>71', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning [['│', 'Normal'], ' ', {'index': 13, '...'__wilder_wrapped__': 477094643697281}]

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('rounded')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'rounded'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap([function('<lambda>72')])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>82(0, function('<lambda>72'))

calling wilder#lua#wrap(function('<lambda>72'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>72'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>82

<lambda>82 returning {'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning [{'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}]

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>83('right', [' ', {'index': 10, 'name': '<lambda>7...__': 477094643697281}, ['│', 'Normal']])

calling wilder#lua#wrap([' ', {'index': 10, 'name': '<lambda>7...__': 477094643697281}, ['│', 'Normal']])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>84(0, ' ')

calling wilder#lua#wrap(' ')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning ' '

continuing in <lambda>84

<lambda>84 returning ' '

continuing in wilder#lua#wrap

calling <lambda>84(1, {'index': 10, 'name': '<lambda>70', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 10, 'name': '<lambda>70', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(10)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #10

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>70')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>70'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>85('index', 10)

calling wilder#lua#wrap(10)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #10

continuing in <lambda>85

<lambda>85 returning #10

continuing in wilder#lua#wrap

calling <lambda>85('name', '<lambda>70')

calling wilder#lua#wrap('<lambda>70')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>70'

continuing in <lambda>85

<lambda>85 returning '<lambda>70'

continuing in wilder#lua#wrap

calling <lambda>85('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>85

<lambda>85 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 10, 'name': '<lambda>70', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>84

<lambda>84 returning {'index': 10, 'name': '<lambda>70', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>84(2, ['│', 'Normal'])

calling wilder#lua#wrap(['│', 'Normal'])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>86(0, '│')

calling wilder#lua#wrap('│')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '│'

continuing in <lambda>86

<lambda>86 returning '│'

continuing in wilder#lua#wrap

calling <lambda>86(1, 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>86

<lambda>86 returning 'Normal'

continuing in wilder#lua#wrap

wilder#lua#wrap returning ['│', 'Normal']

continuing in <lambda>84

<lambda>84 returning ['│', 'Normal']

continuing in wilder#lua#wrap

wilder#lua#wrap returning [' ', {'index': 10, 'name': '<lambda>7...__': 477094643697281}, ['│', 'Normal']]

continuing in <lambda>83

<lambda>83 returning [' ', {'index': 10, 'name': '<lambda>7...__': 477094643697281}, ['│', 'Normal']]

continuing in wilder#lua#wrap

calling <lambda>83('highlights', {'border': 'Normal', 'bottom_border': 'Normal'})

calling wilder#lua#wrap({'border': 'Normal', 'bottom_border': 'Normal'})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>87('border', 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>87

<lambda>87 returning 'Normal'

continuing in wilder#lua#wrap

calling <lambda>87('bottom_border', 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>87

<lambda>87 returning 'Normal'

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'border': 'Normal', 'bottom_border': 'Normal'}

continuing in <lambda>83

<lambda>83 returning {'border': 'Normal', 'bottom_border': 'Normal'}

continuing in wilder#lua#wrap

calling <lambda>83('bottom', [{'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}])

calling wilder#lua#wrap([{'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>88(0, {'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(11)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #11

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>73')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>73'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>89('index', 11)

calling wilder#lua#wrap(11)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #11

continuing in <lambda>89

<lambda>89 returning #11

continuing in wilder#lua#wrap

calling <lambda>89('name', '<lambda>73')

calling wilder#lua#wrap('<lambda>73')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>73'

continuing in <lambda>89

<lambda>89 returning '<lambda>73'

continuing in wilder#lua#wrap

calling <lambda>89('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>89

<lambda>89 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>88

<lambda>88 returning {'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning [{'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}]

continuing in <lambda>83

<lambda>83 returning [{'index': 11, 'name': '<lambda>73', '__wilder_wrapped__': 477094643697281}]

continuing in wilder#lua#wrap

calling <lambda>83('error_message', {'index': 12, 'name': '<lambda>75', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 12, 'name': '<lambda>75', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(12)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #12

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>75')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>75'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>90('index', 12)

calling wilder#lua#wrap(12)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #12

continuing in <lambda>90

<lambda>90 returning #12

continuing in wilder#lua#wrap

calling <lambda>90('name', '<lambda>75')

calling wilder#lua#wrap('<lambda>75')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>75'

continuing in <lambda>90

<lambda>90 returning '<lambda>75'

continuing in wilder#lua#wrap

calling <lambda>90('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>90

<lambda>90 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 12, 'name': '<lambda>75', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>83

<lambda>83 returning {'index': 12, 'name': '<lambda>75', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>83('left', [['│', 'Normal'], ' ', {'index': 13, '...'__wilder_wrapped__': 477094643697281}])

calling wilder#lua#wrap([['│', 'Normal'], ' ', {'index': 13, '...'__wilder_wrapped__': 477094643697281}])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>91(0, ['│', 'Normal'])

calling wilder#lua#wrap(['│', 'Normal'])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>92(0, '│')

calling wilder#lua#wrap('│')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '│'

continuing in <lambda>92

<lambda>92 returning '│'

continuing in wilder#lua#wrap

calling <lambda>92(1, 'Normal')

calling wilder#lua#wrap('Normal')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'Normal'

continuing in <lambda>92

<lambda>92 returning 'Normal'

continuing in wilder#lua#wrap

wilder#lua#wrap returning ['│', 'Normal']

continuing in <lambda>91

<lambda>91 returning ['│', 'Normal']

continuing in wilder#lua#wrap

calling <lambda>91(1, ' ')

calling wilder#lua#wrap(' ')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning ' '

continuing in <lambda>91

<lambda>91 returning ' '

continuing in wilder#lua#wrap

calling <lambda>91(2, {'index': 13, 'name': '<lambda>71', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 13, 'name': '<lambda>71', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(13)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #13

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>71')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>71'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>93('index', 13)

calling wilder#lua#wrap(13)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #13

continuing in <lambda>93

<lambda>93 returning #13

continuing in wilder#lua#wrap

calling <lambda>93('name', '<lambda>71')

calling wilder#lua#wrap('<lambda>71')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>71'

continuing in <lambda>93

<lambda>93 returning '<lambda>71'

continuing in wilder#lua#wrap

calling <lambda>93('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>93

<lambda>93 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 13, 'name': '<lambda>71', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>91

<lambda>91 returning {'index': 13, 'name': '<lambda>71', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning [['│', 'Normal'], ' ', {'index': 13, '...'__wilder_wrapped__': 477094643697281}]

continuing in <lambda>83

<lambda>83 returning [['│', 'Normal'], ' ', {'index': 13, '...'__wilder_wrapped__': 477094643697281}]

continuing in wilder#lua#wrap

calling <lambda>83('border', 'rounded')

calling wilder#lua#wrap('rounded')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning 'rounded'

continuing in <lambda>83

<lambda>83 returning 'rounded'

continuing in wilder#lua#wrap

calling <lambda>83('top', [{'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}])

calling wilder#lua#wrap([{'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}])

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>94(0, {'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(14)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #14

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>72')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>72'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>95('index', 14)

calling wilder#lua#wrap(14)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #14

continuing in <lambda>95

<lambda>95 returning #14

continuing in wilder#lua#wrap

calling <lambda>95('name', '<lambda>72')

calling wilder#lua#wrap('<lambda>72')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>72'

continuing in <lambda>95

<lambda>95 returning '<lambda>72'

continuing in wilder#lua#wrap

calling <lambda>95('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>95

<lambda>95 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>94

<lambda>94 returning {'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning [{'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}]

continuing in <lambda>83

<lambda>83 returning [{'index': 14, 'name': '<lambda>72', '__wilder_wrapped__': 477094643697281}]

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'right': [' ', {'index': 10, 'name': ...__wilder_wrapped__': 477094643697281}]}

continuing in wilder#lua#call

wilder#lua#call returning {'right': [' ', {'index': 10, 'name': ...__wilder_wrapped__': 477094643697281}]}

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#popupmenu_renderer', {'right': [' ', function('<lambda>99')...nded', 'top': [function('<lambda>96')]})

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#popupmenu_renderer({'right': [' ', function('<lambda>99')...nded', 'top': [function('<lambda>96')]})

line 1:   let l:args = get(a:, 1, {})
line 2: 
line 3:   if !has_key(l:args, 'mode')
line 4:     let l:args.mode = has('nvim-0.4') ? 'float' : 'popup'
line 5:   endif
line 6: 
line 7:   return wilder#renderer#popupmenu#(l:args)
Searching for "autoload/wilder/renderer/popupmenu.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/renderer/popupmenu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/renderer/popupmenu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/renderer/popupmenu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/popupmenu.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 7: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/popupmenu.vim"
line 1: let s:empty_result = {'value': [], 'data': {}}
line 2: 
line 3: function! wilder#renderer#popupmenu#(opts) abort
line 120: 
line 121: function! s:render(state, ctx, result) abort
line 194: 
line 195: function! s:make_page(state, ctx, result) abort
line 274: 
line 275: function! s:render_lines_from_timer(render_id, state, ctx, result)
line 284: 
line 285: function! s:render_lines(state, ctx, result) abort
line 427: 
line 428: function! s:get_error_dimensions(state, ctx, error)
line 445: 
line 446: function! s:make_lines(state, ctx, result) abort
line 542: 
line 543: function! s:draw_columns(column_chunks, columns, ctx, result) abort
line 571: 
line 572: function! wilder#renderer#popupmenu#draw_column(ctx, result, column) abort
line 614: 
line 615: function! s:draw_candidates_chunks(state, ctx, result, i) abort
line 655: 
line 656: function! s:draw_candidate(state, ctx, result, i) abort
line 670: 
line 671: function! s:merge_spans(spans) abort
line 681: 
line 682: function! s:pre_hook(state, ctx) abort
line 697: 
line 698: function! s:post_hook(state, ctx) abort
line 710: 
line 711: function! s:make_error_message(state, ctx, error, error_message) abort
line 737: 
line 738: function! s:make_message(state, ctx, func, result, arg, hl_key) abort
line 778: 
line 779: function! s:make_message_from_string(message, min_width, max_width, min_height, hl) abort
line 794: 
line 795: function! s:draw_top_or_bottom_line(line, ctx, result) abort
line 817: 
line 818: function! s:clamp(value, is_height) abort
line 830: 
line 831: function! s:get_height_or_width_from_option(opt, default, is_height) abort
line 852: 
line 853: function! s:get_position(ctx, pos, dimensions) abort
line 870: 
line 871: function! wilder#renderer#popupmenu#iterate_candidates(ctx, result, f) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/popupmenu.vim
continuing in wilder#popupmenu_renderer
calling wilder#renderer#popupmenu#({'right': [' ', function('<lambda>99')...nded', 'top': [function('<lambda>96')]})

line 1:   let l:highlights = copy(get(a:opts, 'highlights', {}))
line 2:   let l:state = { 'highlights': extend(l:highlights, {   'default': get(a:opts, 'hl', 'Pmenu'),   'selected': get(a:opts, 'selected_hl', 'PmenuSel'),   'error': get(a:opts, 'error_hl', 'ErrorMsg'),   'empty_message': 'WarningMsg', }, 'keep'), 'ellipsis': wilder#render#to_printable(get(a:opts, 'ellipsis', '...')), 'apply_incsearch_fix': get(a:opts, 'apply_incsearch_fix', has('nvim') && !has('nvim-0.5.1')), 'reverse': get(a:opts, 'reverse', 0), 'highlight_mode': get(a:opts, 'highlight_mode', 'detailed'), 'left_offset': get(a:opts, 'left_offset', 1), 'zindex': get(a:opts, 'zindex', 250), 'top': get(a:opts, 'top', []), 'bottom': get(a:opts, 'bottom', []), 'empty_message': get(a:opts, 'empty_message', 0), 'empty_message_first_draw_delay': get(a:opts, 'empty_message_first_draw_delay', 100), 'error_message': get(a:opts, 'error_message', wilder#renderer#component#popupmenu_error_message#()), 'position': get(a:opts, 'position', funcref('s:get_position')), 'page': [-1, -1], 'buf': -1, 'win': -1, 'draw_cache': w
Searching for "autoload/wilder/render.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/render.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/render.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/render.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/render.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 2: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/render.vim"
line 1: scriptencoding utf-8
line 2: 
line 3: let s:has_strtrans_issue = strdisplaywidth('<9f>') != strdisplaywidth(strtrans('<9f>'))
line 4: 
line 5: " DEPRECATED: use wilder#render#draw_candidate()
line 6: function! wilder#render#draw_x(ctx, result, i) abort
line 9: 
line 10: function! wilder#render#draw_candidate(ctx, result, i) abort
line 30: 
line 31: function! wilder#render#spans_to_chunks(str, spans, is_selected, highlights) abort
line 73: 
line 74: function! s:add_span(res, str, span_hls, hl_index) abort
line 97: 
line 98: function! wilder#render#to_printable(x) abort
line 149: 
line 150: function! wilder#render#truncate(len, x, ...) abort
line 153: 
line 154: function! wilder#render#truncate_and_pad(len, x, ...) abort
line 157: 
line 158: " direction 0 = truncate left
line 159: "           1 = truncate right
line 160: function! s:truncate_and_maybe_pad(len, x, direction, should_pad) abort
line 198: 
line 199: function! wilder#render#truncate_chunks(len, xs, ...) abort
line 249: 
line 250: function! wilder#render#chunks_displaywidth(chunks) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/render.vim
continuing in wilder#renderer#popupmenu#
calling wilder#render#to_printable('...')

line 1:   if !s:has_strtrans_issue
line 2:     " check if first character is a combining character
line 3:     if strdisplaywidth(' ' . a:x) == strdisplaywidth(a:x)
line 4:       return strtrans(' ' . a:x)
line 5:     endif
line 6: 
line 7:     return strtrans(a:x)
wilder#render#to_printable returning '...'

continuing in wilder#renderer#popupmenu#

calling wilder#renderer#component#popupmenu_error_message#()

line 1:   return {ctx, error -> s:error_message(ctx, error)}
wilder#renderer#component#popupmenu_error_message# returning function('<lambda>101')

continuing in wilder#renderer#popupmenu#

calling wilder#cache#cache()

line 1:   return { '_cache': {}, 'get': funcref('s:get'), 'set': funcref('s:set'), 'has_key': funcref('s:has_key'), 'clear': funcref('s:clear'), }
wilder#cache#cache returning {'has_key': function('<80><fd>R43_has_...'clear': function('<80><fd>R43_clear')}

continuing in wilder#renderer#popupmenu#

calling wilder#cache#cache()

line 1:   return { '_cache': {}, 'get': funcref('s:get'), 'set': funcref('s:set'), 'has_key': funcref('s:has_key'), 'clear': funcref('s:clear'), }
wilder#cache#cache returning {'has_key': function('<80><fd>R43_has_...'clear': function('<80><fd>R43_clear')}

continuing in wilder#renderer#popupmenu#

line 34: 
line 35:   let l:Max_height = get(a:opts, 'max_height', '50%')
line 36:   if type(l:Max_height) is v:t_number && l:Max_height <= 0
line 37:     let l:Max_height = 10000
line 38:   endif
line 39:   let l:state.get_max_height = s:get_height_or_width_from_option(l:Max_height, 10000, 1)
calling <SNR>53_get_height_or_width_from_option('50%', 10000, 1)

line 1:   if type(a:opt) is v:t_number
line 2:     return {-> s:clamp(a:opt, a:is_height)}
line 3:   endif
line 4: 
line 5:   if type(a:opt) is v:t_func
line 6:     return {ctx, result -> s:clamp(a:opt(ctx, result), a:is_height)}
line 7:   endif
line 8: 
line 9:   let l:matches = matchlist(a:opt, '^\(\d\+%\)$')
line 10:   if len(l:matches) >= 2
line 11:     let l:percent = 0.01 * str2nr(l:matches[1])
line 12:     if a:is_height
line 13:       return {-> s:clamp(float2nr(l:percent * (&lines - 1)), a:is_height)}
<SNR>53_get_height_or_width_from_option returning function('<lambda>102')

continuing in wilder#renderer#popupmenu#

line 40: 
line 41:   let l:Min_height = get(a:opts, 'min_height', 0)
line 42:   let l:state.get_min_height = s:get_height_or_width_from_option(l:Min_height, 0, 1)
calling <SNR>53_get_height_or_width_from_option(0, 0, 1)

line 1:   if type(a:opt) is v:t_number
line 2:     return {-> s:clamp(a:opt, a:is_height)}
<SNR>53_get_height_or_width_from_option returning function('<lambda>103')

continuing in wilder#renderer#popupmenu#

line 43: 
line 44:   let l:Max_width = get(a:opts, 'max_width', '50%')
line 45:   if type(l:Max_width) is v:t_number && l:Max_width <= 0
line 46:     let l:Max_width = 10000
line 47:   endif
line 48:   let l:state.get_max_width = s:get_height_or_width_from_option(l:Max_width, 10000, 0)
calling <SNR>53_get_height_or_width_from_option('50%', 10000, 0)

line 1:   if type(a:opt) is v:t_number
line 2:     return {-> s:clamp(a:opt, a:is_height)}
line 3:   endif
line 4: 
line 5:   if type(a:opt) is v:t_func
line 6:     return {ctx, result -> s:clamp(a:opt(ctx, result), a:is_height)}
line 7:   endif
line 8: 
line 9:   let l:matches = matchlist(a:opt, '^\(\d\+%\)$')
line 10:   if len(l:matches) >= 2
line 11:     let l:percent = 0.01 * str2nr(l:matches[1])
line 12:     if a:is_height
line 13:       return {-> s:clamp(float2nr(l:percent * (&lines - 1)), a:is_height)}
line 14:     else
line 15:       return {-> s:clamp(float2nr(l:percent * &columns), a:is_height)}
<SNR>53_get_height_or_width_from_option returning function('<lambda>104')

continuing in wilder#renderer#popupmenu#

line 49: 
line 50:   let l:Min_width = get(a:opts, 'min_width', 16)
line 51:   let l:state.get_min_width = s:get_height_or_width_from_option(l:Min_width, 16, 0)
calling <SNR>53_get_height_or_width_from_option(16, 16, 0)

line 1:   if type(a:opt) is v:t_number
line 2:     return {-> s:clamp(a:opt, a:is_height)}
<SNR>53_get_height_or_width_from_option returning function('<lambda>105')

continuing in wilder#renderer#popupmenu#

line 52: 
line 53:   if exists('+pumblend')
line 54:     if has_key(a:opts, 'pumblend')
line 55:       let l:state.pumblend = a:opts.pumblend
line 56:     elseif has_key(a:opts, 'winblend')
line 57:       " DEPRECATED: Use 'pumblend'
line 58:       let l:state.pumblend = a:opts.winblend
line 59:     else
line 60:       " -1 to indicate unset
line 61:       let l:state.pumblend = -1
line 62:     endif
line 63:   else
line 64:     let l:state.pumblend = -1
line 65:   endif
line 66: 
line 67:   if !has_key(a:opts, 'left') && !has_key(a:opts, 'right')
line 68:     let l:state.left = [' ']
line 69:     let l:state.right = [' ', wilder#popupmenu_scrollbar()]
line 70:   else
line 71:     let l:state.left = get(a:opts, 'left', [])
line 72:     let l:state.right = get(a:opts, 'right', [])
line 73:   endif
line 74: 
line 75:   if !has_key(l:state.highlights, 'accent')
line 76:     let l:state.highlights.accent = wilder#hl_with_attr( 'WilderPoppupMenuAccent', l:state.highlights['default'], 'underline', 'bold')
calling wilder#hl_with_attr('WilderPoppupMenuAccent', 'Pmenu', 'underline', 'bold')

line 1:   let l:attrs = {}
line 2:   for l:attr in a:000
line 3:     if l:attr[:1] ==# 'no'
line 4:       let l:attrs[l:attr[2:]] = v:false
line 5:     else
line 6:       let l:attrs[l:attr] = v:true
line 7:     endif
line 8:   endfor
line 2:   for l:attr in a:000
line 3:     if l:attr[:1] ==# 'no'
line 4:       let l:attrs[l:attr[2:]] = v:false
line 5:     else
line 6:       let l:attrs[l:attr] = v:true
line 7:     endif
line 8:   endfor
line 2:   for l:attr in a:000
line 3:     if l:attr[:1] ==# 'no'
line 4:       let l:attrs[l:attr[2:]] = v:false
line 5:     else
line 6:       let l:attrs[l:attr] = v:true
line 7:     endif
line 8:   endfor
line 9:   return wilder#make_hl(a:name, a:hl_group, [{}, l:attrs, l:attrs])
calling wilder#make_hl('WilderPoppupMenuAccent', 'Pmenu', [{}, {'bold': v:true, 'underline': v:t... {'bold': v:true, 'underline': v:true}])

line 1:   return wilder#highlight#make_hl(a:name, a:args, a:000)
Searching for "autoload/wilder/highlight.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/highlight.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/highlight.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/highlight.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/highlight.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 1: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/highlight.vim"
line 1: let s:hl_list = []
line 2: 
line 3: let s:attr_list = ['bold', 'underline', 'undercurl', 'strikethrough', 'italic', 'standout', 'reverse', 'inverse']
line 5: 
line 6: let s:attr_map = { 'bold': 0, 'underline': 0, 'undercurl': 0, 'strikethrough': 0, 'italic': 0, 'standout': 0, 'reverse': 0, }
line 15: 
line 16: function! wilder#highlight#init_hl() abort
line 21: 
line 22: function! wilder#highlight#make_hl(name, x, xs) abort
line 28: 
line 29: function! wilder#highlight#make_temp_hl(name, x, xs) abort
line 33: 
line 34: function! s:make_hl(name, x, xs) abort
line 44: 
line 45: function! s:to_hl_list(x) abort
line 70: 
line 71: function! s:combine_hl_list(l, m) abort
line 136: 
line 137: function! s:normalise_attrs(hl) abort
line 157: 
line 158: function! s:make_hl_from_list(name, args) abort
line 208: 
line 209: function! s:get_attrs_as_list(attrs) abort
line 228: 
line 229: function! wilder#highlight#get_hl(group) abort
line 236: 
line 237: function! wilder#highlight#get_hl_nvim(group) abort
line 247: 
line 248: function! wilder#highlight#get_hl_vim(group) abort
line 284: 
line 285: function! s:get_hl_attrs(attrs, key, hl) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/highlight.vim
continuing in wilder#make_hl
calling wilder#highlight#make_hl('WilderPoppupMenuAccent', 'Pmenu', [[{}, {'bold': v:true, 'underline': v:...{'bold': v:true, 'underline': v:true}]])

line 1:   call s:make_hl(a:name, a:x, a:xs)
calling <SNR>55_make_hl('WilderPoppupMenuAccent', 'Pmenu', [[{}, {'bold': v:true, 'underline': v:...{'bold': v:true, 'underline': v:true}]])

line 1:   let l:x = s:to_hl_list(a:x)
calling <SNR>55_to_hl_list('Pmenu')

line 1:   if type(a:x) is v:t_string
line 2:     let l:x = wilder#highlight#get_hl(a:x)
calling wilder#highlight#get_hl('Pmenu')

line 1:   if has('nvim')
line 2:     return wilder#highlight#get_hl_nvim(a:group)
calling wilder#highlight#get_hl_nvim('Pmenu')

line 1:   try
line 2:     let l:cterm_hl = nvim_get_hl_by_name(a:group, 0)
line 3:     let l:gui_hl = nvim_get_hl_by_name(a:group, 1)
line 4: 
line 5:     return [{}, l:cterm_hl, l:gui_hl]
:return [{}, {'foreground': 0, 'background': 13}, {'background': 16711935}] made pending

line 6:   catch
line 7:     return [{}, {}, {}]
line 8:   endtry
:return [{}, {'foreground': 0, 'background': 13}, {'background': 16711935}] resumed

wilder#highlight#get_hl_nvim returning [{}, {'foreground': 0, 'background': 13}, {'background': 16711935}]

continuing in wilder#highlight#get_hl

wilder#highlight#get_hl returning [{}, {'foreground': 0, 'background': 13}, {'background': 16711935}]

continuing in <SNR>55_to_hl_list

line 3:   else
line 4:     let l:x = a:x
line 5:   endif
line 6: 
line 7:   if type(l:x) is v:t_list && type(l:x[0]) is v:t_list
line 8:     return l:x
line 9:   endif
line 10: 
line 11:   let l:term_hl = s:get_attrs_as_list(l:x[0])
calling <SNR>55_get_attrs_as_list({})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 12: 
line 13:   let l:cterm_hl = [ get(l:x[1], 'foreground', 'NONE'), get(l:x[1], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[1])
calling <SNR>55_get_attrs_as_list({'foreground': 0, 'background': 13})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 17: 
line 18:   let l:gui_hl = [ get(l:x[2], 'foreground', 'NONE'), get(l:x[2], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[2])
calling <SNR>55_get_attrs_as_list({'background': 16711935})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 22: 
line 23:   return [l:term_hl, l:cterm_hl, l:gui_hl]
<SNR>55_to_hl_list returning [[], [0, 13], ['NONE', 16711935]]

continuing in <SNR>55_make_hl

line 2: 
line 3:   for l:elem in a:xs
line 4:     let l:y = s:to_hl_list(l:elem)
calling <SNR>55_to_hl_list([{}, {'bold': v:true, 'underline': v:t... {'bold': v:true, 'underline': v:true}])

line 1:   if type(a:x) is v:t_string
line 2:     let l:x = wilder#highlight#get_hl(a:x)
line 3:   else
line 4:     let l:x = a:x
line 5:   endif
line 6: 
line 7:   if type(l:x) is v:t_list && type(l:x[0]) is v:t_list
line 8:     return l:x
line 9:   endif
line 10: 
line 11:   let l:term_hl = s:get_attrs_as_list(l:x[0])
calling <SNR>55_get_attrs_as_list({})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 12: 
line 13:   let l:cterm_hl = [ get(l:x[1], 'foreground', 'NONE'), get(l:x[1], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[1])
calling <SNR>55_get_attrs_as_list({'bold': v:true, 'underline': v:true})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning ['bold', 'underline']

continuing in <SNR>55_to_hl_list

line 17: 
line 18:   let l:gui_hl = [ get(l:x[2], 'foreground', 'NONE'), get(l:x[2], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[2])
calling <SNR>55_get_attrs_as_list({'bold': v:true, 'underline': v:true})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning ['bold', 'underline']

continuing in <SNR>55_to_hl_list

line 22: 
line 23:   return [l:term_hl, l:cterm_hl, l:gui_hl]
<SNR>55_to_hl_list returning [[], ['NONE', 'NONE', 'bold', 'underli... ['NONE', 'NONE', 'bold', 'underline']]

continuing in <SNR>55_make_hl

line 5:     let l:x = s:combine_hl_list(l:x, l:y)
calling <SNR>55_combine_hl_list([[], [0, 13], ['NONE', 16711935]], [[], ['NONE', 'NONE', 'bold', 'underli... ['NONE', 'NONE', 'bold', 'underline']])

line 1:   let l:term_hl = copy(a:l[0])
line 2:   let l:cterm_hl = copy(a:l[1])
line 3:   let l:gui_hl = copy(a:l[2])
line 4: 
line 5:   if len(l:term_hl) <= 2
line 6:     let l:term_hl = copy(a:m[0])
line 7:   else
line 8:     let l:term_hl += a:m[0][2:]
line 9:   endif
line 10: 
line 11:   let l:cterm_fg = get(a:m[1], 0, -1)
line 12:   if l:cterm_fg isnot 'NONE' && l:cterm_fg isnot -1
line 13:     if empty(l:cterm_hl)
line 14:       let l:cterm_hl = [l:cterm_fg]
line 15:     else
line 16:       let l:cterm_hl[0] = l:cterm_fg
line 17:     endif
line 18:   endif
line 19: 
line 20:   let l:cterm_bg = get(a:m[1], 1, -1)
line 21:   if l:cterm_bg isnot 'NONE' && l:cterm_bg isnot -1
line 22:     if empty(l:cterm_hl)
line 23:       let l:cterm_hl = ['NONE', l:cterm_bg]
line 24:     else
line 25:       let l:cterm_hl[1] = l:cterm_bg
line 26:     endif
line 27:   endif
line 28: 
line 29:   if len(a:m[1]) > 2
line 30:     if empty(l:cterm_hl)
line 31:       let l:cterm_hl = ['NONE', 'NONE'] + a:m[1][2:]
line 32:     else
line 33:       let l:cterm_hl += a:m[1][2:]
line 34:     endif
line 35:   endif
line 36: 
line 37:   let l:gui_fg = get(a:m[2], 0, -1)
line 38:   if l:gui_fg isnot 'NONE' && l:gui_fg isnot -1
line 39:     if empty(l:gui_hl)
line 40:       let l:gui_hl = [l:gui_fg]
line 41:     else
line 42:       let l:gui_hl[0] = l:gui_fg
line 43:     endif
line 44:   endif
line 45: 
line 46:   let l:gui_bg = get(a:m[2], 1, -1)
line 47:   if l:gui_bg isnot 'NONE' && l:gui_bg isnot -1
line 48:     if empty(l:gui_hl)
line 49:       let l:gui_hl = ['NONE', l:gui_bg]
line 50:     else
line 51:       let l:gui_hl[1] = l:gui_bg
line 52:     endif
line 53:   endif
line 54: 
line 55:   if len(a:m[2]) > 2
line 56:     if empty(l:gui_hl)
line 57:       let l:gui_hl = ['NONE', 'NONE'] + a:m[2][2:]
line 58:     else
line 59:       let l:gui_hl += a:m[2][2:]
line 60:     endif
line 61:   endif
line 62: 
line 63:   return [l:term_hl, l:cterm_hl, l:gui_hl]
<SNR>55_combine_hl_list returning [[], [0, 13, 'bold', 'underline'], ['NONE', 16711935, 'bold', 'underline']]

continuing in <SNR>55_make_hl

line 6:   endfor
line 3:   for l:elem in a:xs
line 4:     let l:y = s:to_hl_list(l:elem)
line 5:     let l:x = s:combine_hl_list(l:x, l:y)
line 6:   endfor
line 7: 
line 8:   call s:make_hl_from_list(a:name, l:x)
calling <SNR>55_make_hl_from_list('WilderPoppupMenuAccent', [[], [0, 13, 'bold', 'underline'], ['NONE', 16711935, 'bold', 'underline']])

line 1:   let l:term_hl = s:normalise_attrs(a:args[0])
calling <SNR>55_normalise_attrs([])

line 1:   let l:attr_map = copy(s:attr_map)
line 2: 
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 10: 
line 11:   let l:result = []
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 17: 
line 18:   return a:hl[:1] + l:result
<SNR>55_normalise_attrs returning []

continuing in <SNR>55_make_hl_from_list

line 2:   let l:cterm_hl = s:normalise_attrs(a:args[1])
calling <SNR>55_normalise_attrs([0, 13, 'bold', 'underline'])

line 1:   let l:attr_map = copy(s:attr_map)
line 2: 
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 10: 
line 11:   let l:result = []
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 17: 
line 18:   return a:hl[:1] + l:result
<SNR>55_normalise_attrs returning [0, 13, 'bold', 'underline']

continuing in <SNR>55_make_hl_from_list

line 3:   let l:gui_hl = s:normalise_attrs(a:args[2])
calling <SNR>55_normalise_attrs(['NONE', 16711935, 'bold', 'underline'])

line 1:   let l:attr_map = copy(s:attr_map)
line 2: 
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 10: 
line 11:   let l:result = []
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 17: 
line 18:   return a:hl[:1] + l:result
<SNR>55_normalise_attrs returning ['NONE', 16711935, 'bold', 'underline']

continuing in <SNR>55_make_hl_from_list

line 4: 
line 5:   let l:cmd = 'hi! ' . a:name . ' '
line 6: 
line 7:   let l:term_attr = l:term_hl[2:]
line 8:   if len(l:term_hl) >= 2
line 9:     let l:cmd .= 'term=' . join(l:term_attr, ',') . ' '
line 10:   endif
line 11: 
line 12:   let l:cterm_attr = l:cterm_hl[2:]
line 13:   if !empty(l:cterm_attr)
line 14:     let l:cmd .= 'cterm=' . join(l:cterm_attr, ',') . ' '
line 15:   endif
line 16: 
line 17:   if len(l:cterm_hl) >= 1
line 18:     if l:cterm_hl[0] >= 0
line 19:       let l:cmd .= 'ctermfg=' . l:cterm_hl[0] . ' '
line 20:     endif
line 21: 
line 22:     if len(l:cterm_hl) >= 2 && l:cterm_hl[1] >= 0
line 23:       let l:cmd .= 'ctermbg=' . l:cterm_hl[1] . ' '
line 24:     endif
line 25:   endif
line 26: 
line 27:   let l:gui_attr = l:gui_hl[2:]
line 28:   if !empty(l:gui_attr)
line 29:     let l:cmd .= 'gui=' . join(l:gui_attr, ',') . ' '
line 30:   endif
line 31: 
line 32:   if len(l:gui_hl) >= 1
line 33:     if type(l:gui_hl[0]) == v:t_number
line 34:       let l:cmd .= 'guifg=' . printf('#%06x', l:gui_hl[0]) . ' '
line 35:     else
line 36:       let l:cmd .= 'guifg=' . l:gui_hl[0] . ' '
line 37:     endif
line 38: 
line 39:     if len(l:gui_hl) >= 2
line 40:       if type(l:gui_hl[1]) == v:t_number
line 41:         let l:cmd .= 'guibg=' . printf('#%06x', l:gui_hl[1]) . ' '
line 42:       else
line 43:         let l:cmd .= 'guibg=' . l:gui_hl[1] . ' '
line 44:       endif
line 45:     endif
line 46:   endif
line 47: 
line 48:   exe l:cmd
line 48: hi! WilderPoppupMenuAccent cterm=bold,underline ctermfg=0 ctermbg=13 gui=bold,underline guifg=NONE guibg=#ff00ff 
<SNR>55_make_hl_from_list returning #0

continuing in <SNR>55_make_hl

<SNR>55_make_hl returning #0

continuing in wilder#highlight#make_hl

line 2:   call filter(s:hl_list, {i, elem -> elem[0] !=# a:name})
line 3:   call add(s:hl_list, [a:name, deepcopy(a:x), deepcopy(a:xs)])
line 4:   return a:name
wilder#highlight#make_hl returning 'WilderPoppupMenuAccent'

continuing in wilder#make_hl

wilder#make_hl returning 'WilderPoppupMenuAccent'

continuing in wilder#hl_with_attr

wilder#hl_with_attr returning 'WilderPoppupMenuAccent'

continuing in wilder#renderer#popupmenu#

line 81:   endif
line 82: 
line 83:   if !has_key(l:state.highlights, 'selected_accent')
line 84:     let l:state.highlights.selected_accent = wilder#hl_with_attr( 'WilderPopupMenuSelectedAccent', l:state.highlights['selected'], 'underline', 'bold')
calling wilder#hl_with_attr('WilderPopupMenuSelectedAccent', 'PmenuSel', 'underline', 'bold')

line 1:   let l:attrs = {}
line 2:   for l:attr in a:000
line 3:     if l:attr[:1] ==# 'no'
line 4:       let l:attrs[l:attr[2:]] = v:false
line 5:     else
line 6:       let l:attrs[l:attr] = v:true
line 7:     endif
line 8:   endfor
line 2:   for l:attr in a:000
line 3:     if l:attr[:1] ==# 'no'
line 4:       let l:attrs[l:attr[2:]] = v:false
line 5:     else
line 6:       let l:attrs[l:attr] = v:true
line 7:     endif
line 8:   endfor
line 2:   for l:attr in a:000
line 3:     if l:attr[:1] ==# 'no'
line 4:       let l:attrs[l:attr[2:]] = v:false
line 5:     else
line 6:       let l:attrs[l:attr] = v:true
line 7:     endif
line 8:   endfor
line 9:   return wilder#make_hl(a:name, a:hl_group, [{}, l:attrs, l:attrs])
calling wilder#make_hl('WilderPopupMenuSelectedAccent', 'PmenuSel', [{}, {'bold': v:true, 'underline': v:t... {'bold': v:true, 'underline': v:true}])

line 1:   return wilder#highlight#make_hl(a:name, a:args, a:000)
calling wilder#highlight#make_hl('WilderPopupMenuSelectedAccent', 'PmenuSel', [[{}, {'bold': v:true, 'underline': v:...{'bold': v:true, 'underline': v:true}]])

line 1:   call s:make_hl(a:name, a:x, a:xs)
calling <SNR>55_make_hl('WilderPopupMenuSelectedAccent', 'PmenuSel', [[{}, {'bold': v:true, 'underline': v:...{'bold': v:true, 'underline': v:true}]])

line 1:   let l:x = s:to_hl_list(a:x)
calling <SNR>55_to_hl_list('PmenuSel')

line 1:   if type(a:x) is v:t_string
line 2:     let l:x = wilder#highlight#get_hl(a:x)
calling wilder#highlight#get_hl('PmenuSel')

line 1:   if has('nvim')
line 2:     return wilder#highlight#get_hl_nvim(a:group)
calling wilder#highlight#get_hl_nvim('PmenuSel')

line 1:   try
line 2:     let l:cterm_hl = nvim_get_hl_by_name(a:group, 0)
line 3:     let l:gui_hl = nvim_get_hl_by_name(a:group, 1)
line 4: 
line 5:     return [{}, l:cterm_hl, l:gui_hl]
:return [{}, {'foreground': 242, 'background': 0}, {'background': 11119017}] made pending

line 6:   catch
line 7:     return [{}, {}, {}]
line 8:   endtry
:return [{}, {'foreground': 242, 'background': 0}, {'background': 11119017}] resumed

wilder#highlight#get_hl_nvim returning [{}, {'foreground': 242, 'background': 0}, {'background': 11119017}]

continuing in wilder#highlight#get_hl

wilder#highlight#get_hl returning [{}, {'foreground': 242, 'background': 0}, {'background': 11119017}]

continuing in <SNR>55_to_hl_list

line 3:   else
line 4:     let l:x = a:x
line 5:   endif
line 6: 
line 7:   if type(l:x) is v:t_list && type(l:x[0]) is v:t_list
line 8:     return l:x
line 9:   endif
line 10: 
line 11:   let l:term_hl = s:get_attrs_as_list(l:x[0])
calling <SNR>55_get_attrs_as_list({})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 12: 
line 13:   let l:cterm_hl = [ get(l:x[1], 'foreground', 'NONE'), get(l:x[1], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[1])
calling <SNR>55_get_attrs_as_list({'foreground': 242, 'background': 0})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 17: 
line 18:   let l:gui_hl = [ get(l:x[2], 'foreground', 'NONE'), get(l:x[2], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[2])
calling <SNR>55_get_attrs_as_list({'background': 11119017})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 22: 
line 23:   return [l:term_hl, l:cterm_hl, l:gui_hl]
<SNR>55_to_hl_list returning [[], [242, 0], ['NONE', 11119017]]

continuing in <SNR>55_make_hl

line 2: 
line 3:   for l:elem in a:xs
line 4:     let l:y = s:to_hl_list(l:elem)
calling <SNR>55_to_hl_list([{}, {'bold': v:true, 'underline': v:t... {'bold': v:true, 'underline': v:true}])

line 1:   if type(a:x) is v:t_string
line 2:     let l:x = wilder#highlight#get_hl(a:x)
line 3:   else
line 4:     let l:x = a:x
line 5:   endif
line 6: 
line 7:   if type(l:x) is v:t_list && type(l:x[0]) is v:t_list
line 8:     return l:x
line 9:   endif
line 10: 
line 11:   let l:term_hl = s:get_attrs_as_list(l:x[0])
calling <SNR>55_get_attrs_as_list({})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning []

continuing in <SNR>55_to_hl_list

line 12: 
line 13:   let l:cterm_hl = [ get(l:x[1], 'foreground', 'NONE'), get(l:x[1], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[1])
calling <SNR>55_get_attrs_as_list({'bold': v:true, 'underline': v:true})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning ['bold', 'underline']

continuing in <SNR>55_to_hl_list

line 17: 
line 18:   let l:gui_hl = [ get(l:x[2], 'foreground', 'NONE'), get(l:x[2], 'background', 'NONE') ] + s:get_attrs_as_list(l:x[2])
calling <SNR>55_get_attrs_as_list({'bold': v:true, 'underline': v:true})

line 1:   let l:res = []
line 2: 
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 3:   for l:attr in s:attr_list
line 4:     if has_key(a:attrs, l:attr)
line 5:       if l:attr ==# 'inverse'
line 6:         let l:attr = 'reverse'
line 7:       endif
line 8: 
line 9:       if a:attrs[l:attr]
line 10:         call add(l:res, l:attr)
line 11:       else
line 12:         call add(l:res, 'no' . l:attr)
line 13:       endif
line 14:     endif
line 15:   endfor
line 16: 
line 17:   return l:res
<SNR>55_get_attrs_as_list returning ['bold', 'underline']

continuing in <SNR>55_to_hl_list

line 22: 
line 23:   return [l:term_hl, l:cterm_hl, l:gui_hl]
<SNR>55_to_hl_list returning [[], ['NONE', 'NONE', 'bold', 'underli... ['NONE', 'NONE', 'bold', 'underline']]

continuing in <SNR>55_make_hl

line 5:     let l:x = s:combine_hl_list(l:x, l:y)
calling <SNR>55_combine_hl_list([[], [242, 0], ['NONE', 11119017]], [[], ['NONE', 'NONE', 'bold', 'underli... ['NONE', 'NONE', 'bold', 'underline']])

line 1:   let l:term_hl = copy(a:l[0])
line 2:   let l:cterm_hl = copy(a:l[1])
line 3:   let l:gui_hl = copy(a:l[2])
line 4: 
line 5:   if len(l:term_hl) <= 2
line 6:     let l:term_hl = copy(a:m[0])
line 7:   else
line 8:     let l:term_hl += a:m[0][2:]
line 9:   endif
line 10: 
line 11:   let l:cterm_fg = get(a:m[1], 0, -1)
line 12:   if l:cterm_fg isnot 'NONE' && l:cterm_fg isnot -1
line 13:     if empty(l:cterm_hl)
line 14:       let l:cterm_hl = [l:cterm_fg]
line 15:     else
line 16:       let l:cterm_hl[0] = l:cterm_fg
line 17:     endif
line 18:   endif
line 19: 
line 20:   let l:cterm_bg = get(a:m[1], 1, -1)
line 21:   if l:cterm_bg isnot 'NONE' && l:cterm_bg isnot -1
line 22:     if empty(l:cterm_hl)
line 23:       let l:cterm_hl = ['NONE', l:cterm_bg]
line 24:     else
line 25:       let l:cterm_hl[1] = l:cterm_bg
line 26:     endif
line 27:   endif
line 28: 
line 29:   if len(a:m[1]) > 2
line 30:     if empty(l:cterm_hl)
line 31:       let l:cterm_hl = ['NONE', 'NONE'] + a:m[1][2:]
line 32:     else
line 33:       let l:cterm_hl += a:m[1][2:]
line 34:     endif
line 35:   endif
line 36: 
line 37:   let l:gui_fg = get(a:m[2], 0, -1)
line 38:   if l:gui_fg isnot 'NONE' && l:gui_fg isnot -1
line 39:     if empty(l:gui_hl)
line 40:       let l:gui_hl = [l:gui_fg]
line 41:     else
line 42:       let l:gui_hl[0] = l:gui_fg
line 43:     endif
line 44:   endif
line 45: 
line 46:   let l:gui_bg = get(a:m[2], 1, -1)
line 47:   if l:gui_bg isnot 'NONE' && l:gui_bg isnot -1
line 48:     if empty(l:gui_hl)
line 49:       let l:gui_hl = ['NONE', l:gui_bg]
line 50:     else
line 51:       let l:gui_hl[1] = l:gui_bg
line 52:     endif
line 53:   endif
line 54: 
line 55:   if len(a:m[2]) > 2
line 56:     if empty(l:gui_hl)
line 57:       let l:gui_hl = ['NONE', 'NONE'] + a:m[2][2:]
line 58:     else
line 59:       let l:gui_hl += a:m[2][2:]
line 60:     endif
line 61:   endif
line 62: 
line 63:   return [l:term_hl, l:cterm_hl, l:gui_hl]
<SNR>55_combine_hl_list returning [[], [242, 0, 'bold', 'underline'], ['NONE', 11119017, 'bold', 'underline']]

continuing in <SNR>55_make_hl

line 6:   endfor
line 3:   for l:elem in a:xs
line 4:     let l:y = s:to_hl_list(l:elem)
line 5:     let l:x = s:combine_hl_list(l:x, l:y)
line 6:   endfor
line 7: 
line 8:   call s:make_hl_from_list(a:name, l:x)
calling <SNR>55_make_hl_from_list('WilderPopupMenuSelectedAccent', [[], [242, 0, 'bold', 'underline'], ['NONE', 11119017, 'bold', 'underline']])

line 1:   let l:term_hl = s:normalise_attrs(a:args[0])
calling <SNR>55_normalise_attrs([])

line 1:   let l:attr_map = copy(s:attr_map)
line 2: 
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 10: 
line 11:   let l:result = []
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 17: 
line 18:   return a:hl[:1] + l:result
<SNR>55_normalise_attrs returning []

continuing in <SNR>55_make_hl_from_list

line 2:   let l:cterm_hl = s:normalise_attrs(a:args[1])
calling <SNR>55_normalise_attrs([242, 0, 'bold', 'underline'])

line 1:   let l:attr_map = copy(s:attr_map)
line 2: 
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 10: 
line 11:   let l:result = []
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 17: 
line 18:   return a:hl[:1] + l:result
<SNR>55_normalise_attrs returning [242, 0, 'bold', 'underline']

continuing in <SNR>55_make_hl_from_list

line 3:   let l:gui_hl = s:normalise_attrs(a:args[2])
calling <SNR>55_normalise_attrs(['NONE', 11119017, 'bold', 'underline'])

line 1:   let l:attr_map = copy(s:attr_map)
line 2: 
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 3:   for l:attr in a:hl[2:]
line 4:     if has_key(l:attr_map, l:attr)
line 5:       let l:attr_map[l:attr] = 1
line 6:     elseif l:attr[:1] ==# 'no' && has_key(l:attr_map, l:attr[2:])
line 7:       let l:attr_map[l:attr[2:]] = 0
line 8:     endif
line 9:   endfor
line 10: 
line 11:   let l:result = []
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 12:   for l:attr in keys(l:attr_map)
line 13:     if l:attr_map[l:attr]
line 14:       call add(l:result, l:attr)
line 15:     endif
line 16:   endfor
line 17: 
line 18:   return a:hl[:1] + l:result
<SNR>55_normalise_attrs returning ['NONE', 11119017, 'bold', 'underline']

continuing in <SNR>55_make_hl_from_list

line 4: 
line 5:   let l:cmd = 'hi! ' . a:name . ' '
line 6: 
line 7:   let l:term_attr = l:term_hl[2:]
line 8:   if len(l:term_hl) >= 2
line 9:     let l:cmd .= 'term=' . join(l:term_attr, ',') . ' '
line 10:   endif
line 11: 
line 12:   let l:cterm_attr = l:cterm_hl[2:]
line 13:   if !empty(l:cterm_attr)
line 14:     let l:cmd .= 'cterm=' . join(l:cterm_attr, ',') . ' '
line 15:   endif
line 16: 
line 17:   if len(l:cterm_hl) >= 1
line 18:     if l:cterm_hl[0] >= 0
line 19:       let l:cmd .= 'ctermfg=' . l:cterm_hl[0] . ' '
line 20:     endif
line 21: 
line 22:     if len(l:cterm_hl) >= 2 && l:cterm_hl[1] >= 0
line 23:       let l:cmd .= 'ctermbg=' . l:cterm_hl[1] . ' '
line 24:     endif
line 25:   endif
line 26: 
line 27:   let l:gui_attr = l:gui_hl[2:]
line 28:   if !empty(l:gui_attr)
line 29:     let l:cmd .= 'gui=' . join(l:gui_attr, ',') . ' '
line 30:   endif
line 31: 
line 32:   if len(l:gui_hl) >= 1
line 33:     if type(l:gui_hl[0]) == v:t_number
line 34:       let l:cmd .= 'guifg=' . printf('#%06x', l:gui_hl[0]) . ' '
line 35:     else
line 36:       let l:cmd .= 'guifg=' . l:gui_hl[0] . ' '
line 37:     endif
line 38: 
line 39:     if len(l:gui_hl) >= 2
line 40:       if type(l:gui_hl[1]) == v:t_number
line 41:         let l:cmd .= 'guibg=' . printf('#%06x', l:gui_hl[1]) . ' '
line 42:       else
line 43:         let l:cmd .= 'guibg=' . l:gui_hl[1] . ' '
line 44:       endif
line 45:     endif
line 46:   endif
line 47: 
line 48:   exe l:cmd
line 48: hi! WilderPopupMenuSelectedAccent cterm=bold,underline ctermfg=242 ctermbg=0 gui=bold,underline guifg=NONE guibg=#a9a9a9 
<SNR>55_make_hl_from_list returning #0

continuing in <SNR>55_make_hl

<SNR>55_make_hl returning #0

continuing in wilder#highlight#make_hl

line 2:   call filter(s:hl_list, {i, elem -> elem[0] !=# a:name})
calling <lambda>107(0, ['WilderPoppupMenuAccent', 'Pmenu', [[...'bold': v:true, 'underline': v:true}]]])

<lambda>107 returning #1

continuing in wilder#highlight#make_hl

line 3:   call add(s:hl_list, [a:name, deepcopy(a:x), deepcopy(a:xs)])
line 4:   return a:name
wilder#highlight#make_hl returning 'WilderPopupMenuSelectedAccent'

continuing in wilder#make_hl

wilder#make_hl returning 'WilderPopupMenuSelectedAccent'

continuing in wilder#hl_with_attr

wilder#hl_with_attr returning 'WilderPopupMenuSelectedAccent'

continuing in wilder#renderer#popupmenu#

line 89:   endif
line 90: 
line 91:   if has_key(a:opts, 'highlighter')
line 92:     let l:Highlighter = a:opts['highlighter']
line 93:   elseif has_key(a:opts, 'apply_highlights')
line 94:     let l:Highlighter = a:opts['apply_highlights']
line 95:   else
line 96:     let l:Highlighter = 0
line 97:   endif
line 98: 
line 99:   if type(l:Highlighter) is v:t_list
line 100:     let l:Highlighter = wilder#highlighter#apply_first(l:Highlighter)
line 101:   endif
line 102: 
line 103:   let l:state.highlighter = l:Highlighter
line 104: 
line 105:   if a:opts.mode ==# 'float'
line 106:     let l:state.api = wilder#renderer#nvim_api#()
Searching for "autoload/wilder/renderer/nvim_api.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/wilder/renderer/nvim_api.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/wilder/renderer/nvim_api.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/wilder/renderer/nvim_api.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/nvim_api.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 106: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/nvim_api.vim"
line 1: let s:index = 0
line 2: 
line 3: function! wilder#renderer#nvim_api#() abort
line 42: 
line 43: function! s:new(opts) dict abort
line 58: 
line 59: function! s:new_buf() abort
line 66: 
line 67: function! s:show() dict abort
line 81: 
line 82: function! s:_open_win() dict abort
line 152: 
line 153: function! s:_set_buf() dict abort
line 163: 
line 164: " Floating windows can't be hidden so we close the window.
line 165: function! s:hide() dict abort
line 197: 
line 198: function! s:move(row, col, height, width) dict abort
line 216: 
line 217: function! s:set_firstline(line) dict abort
line 229: 
line 230: function! s:set_option(option, value) dict abort
line 242: 
line 243: function! s:delete_all_lines() dict abort
line 246: 
line 247: function! s:set_line(line, str) dict abort
line 250: 
line 251: function! s:add_highlight(hl, line, col_start, col_end) dict abort
line 254: 
line 255: function! s:clear_all_highlights() dict abort
line 262: 
line 263: function! s:need_timer() dict abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/wilder/renderer/nvim_api.vim
continuing in wilder#renderer#popupmenu#
calling wilder#renderer#nvim_api#()

line 1:   let l:state = { 'buf': -1, 'dummy_buf': -1, 'win': -1, 'ns_id': nvim_create_namespace(''), 'normal_highlight': 'Normal', 'pumblend': -1, 'zindex': 0, 'window_state': 'hidden', 'dimensions': -1, 'firstline': -1, 'options': {}, }
line 14: 
line 15:   let l:api = { 'state': l:state, }
line 18: 
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.new = funcref("s:new")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.show = funcref("s:show")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.hide = funcref("s:hide")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.move = funcref("s:move")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.set_option = funcref("s:set_option")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.set_firstline = funcref("s:set_firstline")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.delete_all_lines = funcref("s:delete_all_lines")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.set_line = funcref("s:set_line")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.add_highlight = funcref("s:add_highlight")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.clear_all_highlights = funcref("s:clear_all_highlights")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api.need_timer = funcref("s:need_timer")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api._open_win = funcref("s:_open_win")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 34: let l:api._set_buf = funcref("s:_set_buf")
line 35:   endfor
line 19:   for l:f in [ 'new', 'show', 'hide', 'move', 'set_option', 'set_firstline', 'delete_all_lines', 'set_line', 'add_highlight', 'clear_all_highlights', 'need_timer', '_open_win', '_set_buf', ]
line 34:     execute 'let l:api.' . l:f . ' = funcref("s:' . l:f . '")'
line 35:   endfor
line 36: 
line 37:   return l:api
wilder#renderer#nvim_api# returning {'show': function('<80><fd>R56_show'),...ine': function('<80><fd>R56_set_line')}

continuing in wilder#renderer#popupmenu#

line 107:   else
line 108:     let l:state.api = wilder#renderer#vim_api#()
line 109:   endif
line 110: 
line 111:   return { 'render': {ctx, result -> s:render(l:state, ctx, result)}, 'pre_hook': {ctx -> s:pre_hook(l:state, ctx)}, 'post_hook': {ctx -> s:post_hook(l:state, ctx)}, }
wilder#renderer#popupmenu# returning {'render': function('<lambda>108'), 'p...), 'pre_hook': function('<lambda>109')}

continuing in wilder#popupmenu_renderer

wilder#popupmenu_renderer returning {'render': function('<lambda>108'), 'p...), 'pre_hook': function('<lambda>109')}

continuing in wilder#lua#call

calling wilder#lua#wrap({'render': function('<lambda>108'), 'p...), 'pre_hook': function('<lambda>109')})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(function('<lambda>108'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>108'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 15, 'name': '<lambda>108', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 15, 'name': '<lambda>108', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(function('<lambda>110'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>110'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 16, 'name': '<lambda>110', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 16, 'name': '<lambda>110', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(function('<lambda>109'))

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
calling <SNR>38_wrap_function(function('<lambda>109'))

line 1:   let l:index = s:index
line 2:   let s:index += 1
line 3: 
line 4:   let s:functions[l:index] = a:f
line 5:   return { 'index': l:index, 'name': get(a:f, 'name'), '__wilder_wrapped__': s:token, }
<SNR>38_wrap_function returning {'index': 17, 'name': '<lambda>109', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 17, 'name': '<lambda>109', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>111('render', {'index': 15, 'name': '<lambda>108', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 15, 'name': '<lambda>108', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(15)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #15

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>108')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>108'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>112('index', 15)

calling wilder#lua#wrap(15)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #15

continuing in <lambda>112

<lambda>112 returning #15

continuing in wilder#lua#wrap

calling <lambda>112('name', '<lambda>108')

calling wilder#lua#wrap('<lambda>108')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>108'

continuing in <lambda>112

<lambda>112 returning '<lambda>108'

continuing in wilder#lua#wrap

calling <lambda>112('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>112

<lambda>112 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 15, 'name': '<lambda>108', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>111

<lambda>111 returning {'index': 15, 'name': '<lambda>108', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>111('post_hook', {'index': 16, 'name': '<lambda>110', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 16, 'name': '<lambda>110', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(16)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #16

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>110')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>110'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>113('index', 16)

calling wilder#lua#wrap(16)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #16

continuing in <lambda>113

<lambda>113 returning #16

continuing in wilder#lua#wrap

calling <lambda>113('name', '<lambda>110')

calling wilder#lua#wrap('<lambda>110')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>110'

continuing in <lambda>113

<lambda>113 returning '<lambda>110'

continuing in wilder#lua#wrap

calling <lambda>113('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>113

<lambda>113 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 16, 'name': '<lambda>110', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>111

<lambda>111 returning {'index': 16, 'name': '<lambda>110', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

calling <lambda>111('pre_hook', {'index': 17, 'name': '<lambda>109', '__wilder_wrapped__': 477094643697281})

calling wilder#lua#wrap({'index': 17, 'name': '<lambda>109', '__wilder_wrapped__': 477094643697281})

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
line 6:   endif
line 7: 
line 8:   if type(a:t) is v:t_func
line 9:     return s:wrap_function(a:t)
line 10:   endif
line 11: 
line 12:   if type(a:t) is v:t_dict
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(17)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #17

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap('<lambda>109')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>109'

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in wilder#lua#wrap

line 16:     endfor
line 13:     for l:key in keys(a:t)
line 14:       let l:Value = a:t[l:key]
line 15:       let a:t[l:key] = wilder#lua#wrap(l:Value)
line 16:     endfor
line 17:   endif
line 18: 
line 19:   " v:t_list
line 20:   return map(a:t, {_, x -> wilder#lua#wrap(x)})
calling <lambda>114('index', 17)

calling wilder#lua#wrap(17)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #17

continuing in <lambda>114

<lambda>114 returning #17

continuing in wilder#lua#wrap

calling <lambda>114('name', '<lambda>109')

calling wilder#lua#wrap('<lambda>109')

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning '<lambda>109'

continuing in <lambda>114

<lambda>114 returning '<lambda>109'

continuing in wilder#lua#wrap

calling <lambda>114('__wilder_wrapped__', 477094643697281)

calling wilder#lua#wrap(477094643697281)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #477094643697281

continuing in <lambda>114

<lambda>114 returning #477094643697281

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'index': 17, 'name': '<lambda>109', '__wilder_wrapped__': 477094643697281}

continuing in <lambda>111

<lambda>111 returning {'index': 17, 'name': '<lambda>109', '__wilder_wrapped__': 477094643697281}

continuing in wilder#lua#wrap

wilder#lua#wrap returning {'render': {'index': 15, 'name': '<lam...'__wilder_wrapped__': 477094643697281}}

continuing in wilder#lua#call

wilder#lua#call returning {'render': {'index': 15, 'name': '<lam...'__wilder_wrapped__': 477094643697281}}

continuing in /Users/christopher.griffith/.config/nvim/init.lua

calling wilder#lua#call('wilder#set_option', 'renderer', {'render': function('<lambda>115'), 'p...), 'pre_hook': function('<lambda>117')})

line 1:   return wilder#lua#wrap(call(a:f, a:000))
calling wilder#set_option('renderer', {'render': function('<lambda>115'), 'p...), 'pre_hook': function('<lambda>117')})

line 1:   if !a:0
line 2:     call wilder#options#set(a:x)
line 3:   else
line 4:     call wilder#options#set(a:x, a:1)
calling wilder#options#set('renderer', {'render': function('<lambda>115'), 'p...), 'pre_hook': function('<lambda>117')})

line 1:   if len(a:000) == 0
line 2:     call extend(s:opts, a:x)
line 3:   else
line 4:     let s:opts[a:x] = a:1
line 5:   endif
wilder#options#set returning #0

continuing in wilder#set_option

line 5:   endif
wilder#set_option returning #0

continuing in wilder#lua#call

calling wilder#lua#wrap(0)

line 1:   if type(a:t) is v:t_string || type(a:t) is v:t_number || type(a:t) is v:t_bool || a:t is v:null
line 5:     return a:t
wilder#lua#wrap returning #0

continuing in wilder#lua#call

wilder#lua#call returning #0

continuing in /Users/christopher.griffith/.config/nvim/init.lua

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/lspsaga.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/lspsaga.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/lspsaga.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/mini/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/plugin/glance.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/plugin/glance.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/plugin/glance.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/lua/glance/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/nightfox.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/nightfox.vim"
line 1: " Load only once
line 2: if exists('g:loaded_nightfox') | finish | endif
line 2:  finish | endif
line 2:  endif
line 3: 
line 4: command! NightfoxCompile lua require('nightfox').compile()
line 5: command! NightfoxInteractive lua require('nightfox.interactive').attach()
line 6: 
line 7: let g:loaded_nightfox = 1
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/nightfox.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup lualine | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Searching for "lua/lualine/themes/auto.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/lua/lualine/themes/auto.lua"
Executing: highlight! lualine_a_inactive guifg=#000000 guibg=#a9a9a9 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_inactive guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_inactive guifg=#a9a9a9 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_normal guifg=#000000 guibg=#a9a9a9 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_normal guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_normal guifg=#a9a9a9 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_visual guifg=#000000 guibg=#ffa500 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_visual guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_visual guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_insert guifg=#000000 guibg=#ffa0a0 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_insert guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_insert guifg=#ffa0a0 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_replace guifg=#000000 guibg=#ffa0a0 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_replace guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_replace guifg=#ffa0a0 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_command guifg=#000000 guibg=#40ffff gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_command guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_command guifg=#40ffff guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_terminal guifg=#000000 guibg=#40ffff gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_terminal guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_terminal guifg=#40ffff guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd lualine ColorScheme * lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     autocmd lualine OptionSet background lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_normal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_insert guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_visual guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_replace guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_command guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_terminal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_inactive guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_stl_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: au lualine WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged *
--- Autocommands ---
Executing: autocmd lualine_stl_refresh WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged * call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_tal_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing: augroup lualine_wb_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/transparent.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/transparent.vim"
line 1: if !has('nvim')  | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: 
line 3: if exists('g:loaded_transparent') | finish | endif
line 3:  finish | endif
line 3:  endif
line 4: 
line 5: let g:loaded_transparent = 1
line 6: 
line 7: function! OnTransparentGroupsChanged(d, k, z)
line 10: 
line 11: call dictwatcheradd(g:, 'transparent_groups', 'OnTransparentGroupsChanged')
line 12: 
line 13: augroup transparent
line 14:     autocmd!
line 15:     autocmd VimEnter,ColorScheme,FileType * lua require('transparent').clear()
line 16:     command -bar -nargs=0 TransparentEnable  lua require('transparent').toggle(true)
line 17:     command -bar -nargs=0 TransparentDisable lua require('transparent').toggle(false)
line 18:     command -bar -nargs=0 TransparentToggle  lua require('transparent').toggle()
line 19: augroup END
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/transparent.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/obsession.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/obsession.vim"
line 1: " obsession.vim - Continuously updated session files
line 2: " Maintainer:   Tim Pope <http://tpo.pe/>
line 3: " Version:      1.0
line 4: " GetLatestVimScripts: 4472 1 :AutoInstall: obsession.vim
line 5: 
line 6: if exists("g:loaded_obsession") || v:version < 704 || &cp
line 7:   finish
line 8: endif
line 9: let g:loaded_obsession = 1
line 10: 
line 11: command! -bar -bang -complete=file -nargs=? Obsession execute s:dispatch(<bang>0, <q-args>)
line 13: 
line 14: function! s:dispatch(bang, file) abort
line 56: 
line 57: function! s:doautocmd_user(arg) abort
line 64: 
line 65: function! s:persist() abort
line 102: 
line 103: function! ObsessionStatus(...) abort
line 121: 
line 122: augroup obsession
line 123:   autocmd!
line 124:   autocmd VimLeavePre * exe s:persist()
line 125:   autocmd BufEnter * if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
line 129:   autocmd User Flags call Hoist('global', 'ObsessionStatus')
line 130: augroup END
line 131: 
line 132: " vim:set et sw=2:
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/obsession.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/gzip.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2016 Oct 30
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
line 11: endif
line 12: let loaded_gzip = 1
line 13: 
line 14: augroup gzip
line 15:   " Remove all gzip autocommands
line 16:   au!
line 17: 
line 18:   " Enable editing of gzipped files.
line 19:   " The functions are defined in autoload/gzip.vim.
line 20:   "
line 21:   " Set binary mode before reading the file.
line 22:   " Use "gzip -d", gunzip isn't always available.
line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo setlocal bin
line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")
line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")
line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")
line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")
line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")
line 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")
line 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")
line 31:   autocmd BufReadPost,FileReadPost^I*.br call gzip#read("brotli -d --rm")
line 32:   autocmd BufReadPost,FileReadPost^I*.lzo call gzip#read("lzop -d -U")
line 33:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")
line 34:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")
line 35:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")
line 36:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")
line 37:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")
line 38:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")
line 39:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")
line 40:   autocmd BufWritePost,FileWritePost^I*.br  call gzip#write("brotli --rm")
line 41:   autocmd BufWritePost,FileWritePost^I*.lzo  call gzip#write("lzop -U")
line 42:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")
line 43:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")
line 44:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")
line 45:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")
line 46:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")
line 47:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")
line 48:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")
line 49:   autocmd FileAppendPre^I^I^I*.br call gzip#appre("brotli -d --rm")
line 50:   autocmd FileAppendPre^I^I^I*.lzo call gzip#appre("lzop -d -U")
line 51:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")
line 52:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")
line 53:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")
line 54:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")
line 55:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")
line 56:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")
line 57:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")
line 58:   autocmd FileAppendPost^I^I*.br call gzip#write("brotli --rm")
line 59:   autocmd FileAppendPost^I^I*.lzo call gzip#write("lzop -U")
line 60: augroup END
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/gzip.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/health.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/health.vim"
line 1: autocmd CmdUndefined CheckHealth checkhealth
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/health.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/man.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/man.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/man.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim"
line 1: " Nvim: load the matchit plugin by default.
line 2: if !exists("g:loaded_matchit") && stridx(&packpath, $VIMRUNTIME) >= 0
line 3:   packadd matchit
Searching for "pack/*/start/matchit" in "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/*/start/matchit"
not found in 'packpath': "pack/*/start/matchit"
Searching for "pack/*/opt/matchit" in "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/*/opt/matchit"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/site/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching
line 2: "  Maintainer:  Christian Brabandt
line 3: "  Version:     1.18
line 4: "  Last Change: 2020 Dec 23
line 5: "  Repository:  https://github.com/chrisbra/matchit
line 6: "  Previous URL:http://www.vim.org/script.php?script_id=39
line 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>
line 8: 
line 9: " Documentation:
line 10: "  The documentation is in a separate file: ../doc/matchit.txt
line 11: 
line 12: " Credits:
line 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)
line 14: "  Original script and design by Raul Segura Acevedo
line 15: "  Support for comments by Douglas Potts
line 16: "  Support for back references and other improvements by Benji Fisher
line 17: "  Support for many languages by Johannes Zellner
line 18: "  Suggestions for improvement, bug reports, and support for additional
line 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark
line 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.
line 21: 
line 22: " Debugging:
line 23: "  If you'd like to try the built-in debugging commands...
line 24: "   :MatchDebug      to activate debugging for the current buffer
line 25: "  This saves the values of several key script variables as buffer-local
line 26: "  variables.  See the MatchDebug() function, below, for details.
line 27: 
line 28: " TODO:  I should think about multi-line patterns for b:match_words.
line 29: "   This would require an option:  how many lines to scan (default 1).
line 30: "   This would be useful for Python, maybe also for *ML.
line 31: " TODO:  Maybe I should add a menu so that people will actually use some of
line 32: "   the features that I have implemented.
line 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to
line 34: "   Match_wrapper() instead.
line 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'
line 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).
line 37: " TODO:  Add a level of indirection, so that custom % scripts can use my
line 38: "   work but extend it.
line 39: 
line 40: " Allow user to prevent loading and prevent duplicate loading.
line 41: if exists("g:loaded_matchit") || &cp
line 42:   finish
line 43: endif
line 44: let g:loaded_matchit = 1
line 45: 
line 46: let s:save_cpo = &cpo
line 47: set cpo&vim
line 48: 
line 49: nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
line 50: nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
line 51: xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") \| exe ":normal! m'" \| endif<cr>gv``
line 53: xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
line 54: onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
line 55: onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
line 56: 
line 57: " Analogues of [{ and ]} using matching patterns:
line 58: nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>
line 59: nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>
line 60: xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
line 61: xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
line 62: onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>
line 63: onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>
line 64: 
line 65: " text object:
line 66: xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
line 67: 
line 68: if !exists("g:no_plugin_maps")
line 69:   nmap <silent> %  <Plug>(MatchitNormalForward)
line 70:   nmap <silent> g% <Plug>(MatchitNormalBackward)
line 71:   xmap <silent> %  <Plug>(MatchitVisualForward)
line 72:   xmap <silent> g% <Plug>(MatchitVisualBackward)
line 73:   omap <silent> %  <Plug>(MatchitOperationForward)
line 74:   omap <silent> g% <Plug>(MatchitOperationBackward)
line 75: 
line 76:   " Analogues of [{ and ]} using matching patterns:
line 77:   nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
line 78:   nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
line 79:   xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
line 80:   xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
line 81:   omap <silent> [% <Plug>(MatchitOperationMultiBackward)
line 82:   omap <silent> ]% <Plug>(MatchitOperationMultiForward)
line 83: 
line 84:   " Text object
line 85:   xmap a% <Plug>(MatchitVisualTextObject)
line 86: endif
line 87: 
line 88: " Call this function to turn on debugging information.  Every time the main
line 89: " script is run, buffer variables will be saved.  These can be used directly
line 90: " or viewed using the menu items below.
line 91: if !exists(":MatchDebug")
line 92:   command! -nargs=0 MatchDebug call matchit#Match_debug()
line 93: endif
line 94: 
line 95: let &cpo = s:save_cpo
line 96: unlet s:save_cpo
line 97: 
line 98: " vim:sts=2:sw=2:et:
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim
line 3: augroup filetypedetect
line 3: augroup END
line 4: endif
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2022 Dec 01
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: if exists("g:loaded_matchparen") || &cp
line 9:   finish
line 10: endif
line 11: let g:loaded_matchparen = 1
line 12: 
line 13: if !exists("g:matchparen_timeout")
line 14:   let g:matchparen_timeout = 300
line 15: endif
line 16: if !exists("g:matchparen_insert_timeout")
line 17:   let g:matchparen_insert_timeout = 60
line 18: endif
line 19: 
line 20: augroup matchparen
line 21:   " Replace all matchparen autocommands
line 22:   autocmd! CursorMoved,CursorMovedI,WinEnter,BufWinEnter,WinScrolled * call s:Highlight_Matching_Pair()
line 23:   autocmd! WinLeave,BufLeave * call s:Remove_Matches()
line 24:   if exists('##TextChanged')
line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 26:   endif
line 27: augroup END
line 28: 
line 29: " Skip the rest if it was already done.
line 30: if exists("*s:Highlight_Matching_Pair")
line 31:   finish
line 32: endif
line 33: 
line 34: let s:cpo_save = &cpo
line 35: set cpo-=C
line 36: 
line 37: " The function that is invoked (very often) to define a ":match" highlighting
line 38: " for any matching paren.
line 39: func s:Highlight_Matching_Pair()
line 196: 
line 197: func s:Remove_Matches()
line 203: 
line 204: 
line 205: " Define commands that will disable and enable the plugin.
line 206: command DoMatchParen call s:DoMatchParen()
line 207: command NoMatchParen call s:NoMatchParen()
line 208: 
line 209: func s:NoMatchParen()
line 216: 
line 217: func s:DoMatchParen()
line 223: 
line 224: let &cpo = s:cpo_save
line 225: unlet s:cpo_save
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/netrwPlugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IFeb 09, 2021
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2021 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/netrwPlugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/nvim.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/nvim.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/nvim.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim"
line 1: if exists('g:loaded_remote_plugins')
line 2:   finish
line 3: endif
line 4: let g:loaded_remote_plugins = '/path/to/manifest'
line 5: 
line 6: " Get the path to the rplugin manifest file.
line 7: function! s:GetManifestPath() abort
line 26: 
line 27: " Old manifest file based on known script locations.
line 28: function! s:GetOldManifestPaths() abort
line 43: 
line 44: function! s:GetManifest() abort
line 57: 
line 58: function! s:LoadRemotePlugins() abort
line 64: 
line 65: command! -bar UpdateRemotePlugins call remote#host#UpdateRemotePlugins()
line 66: 
line 67: if index(v:argv, "--clean") < 0
line 68:   call s:LoadRemotePlugins()
calling <SNR>81_LoadRemotePlugins()

line 1:   let g:loaded_remote_plugins = s:GetManifest()
calling <SNR>81_GetManifest()

line 1:   let manifest = s:GetManifestPath()
calling <SNR>81_GetManifestPath()

line 1:   let manifest_base = ''
line 2: 
line 3:   if exists('$NVIM_RPLUGIN_MANIFEST')
line 4:     return fnamemodify($NVIM_RPLUGIN_MANIFEST, ':p')
line 5:   endif
line 6: 
line 7:   let dest = stdpath('data')
line 8:   if !empty(dest)
line 9:     if !isdirectory(dest)
line 10:       if getftype(dest) != "link"
line 11:         call mkdir(dest, 'p', 0700)
line 12:       endif
line 13:     endif
line 14:     let manifest_base = dest
line 15:   endif
line 16: 
line 17:   return manifest_base.'/rplugin.vim'
<SNR>81_GetManifestPath returning '/Users/christopher.griffith/.local/share/nvim/rplugin.vim'

continuing in <SNR>81_GetManifest

line 2:   if !filereadable(manifest)
line 3:     " Check if an old manifest file exists and move it to the new location.
line 4:     for old_manifest in s:GetOldManifestPaths()
line 5:       if filereadable(old_manifest)
line 6:         call rename(old_manifest, manifest)
line 7:         break
line 8:       endif
line 9:     endfor
line 10:   endif
line 11:   return manifest
<SNR>81_GetManifest returning '/Users/christopher.griffith/.local/share/nvim/rplugin.vim'

continuing in <SNR>81_LoadRemotePlugins

line 2:   if filereadable(g:loaded_remote_plugins)
line 3:     execute 'source' fnameescape(g:loaded_remote_plugins)
line 3: source /Users/christopher.griffith/.local/share/nvim/rplugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3: sourcing "/Users/christopher.griffith/.local/share/nvim/rplugin.vim"
line 1: " perl plugins
line 2: 
line 3: 
line 4: " node plugins
line 5: 
line 6: 
line 7: " python3 plugins
line 8: call remote#host#RegisterPlugin('python3', '/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder', [ {'sync': v:true, 'name': '_wilder_python_basic_highlight', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_clap_filt', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_cpsm_filt', 'type': 'function', 'opts': {}}, {'sync': v:true, 'name': '_wilder_python_cpsm_highlight', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_difflib_sort', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_file_finder', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_fruzzy_filt', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_fuzzy_filt', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_fuzzywuzzy_sort', 'type': 'function', 'opts': {}}, {'sync': v:true, 'name': '_wilder_python_get_file_completion', 'type'
Searching for "autoload/remote/host.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/remote/host.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 8: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim"
line 1: let s:hosts = {}
line 2: let s:plugin_patterns = {}
line 3: let s:plugins_for_host = {}
line 4: 
line 5: " Register a host by associating it with a factory(funcref)
line 6: function! remote#host#Register(name, pattern, factory) abort
line 14: 
line 15: " Register a clone to an existing host. The new host will use the same factory
line 16: " as `source`, but it will run as a different process. This can be used by
line 17: " plugins that should run isolated from other plugins created for the same host
line 18: " type
line 19: function! remote#host#RegisterClone(name, orig_name) abort
line 31: 
line 32: " Get a host channel, bootstrapping it if necessary
line 33: function! remote#host#Require(name) abort
line 48: 
line 49: function! remote#host#IsRunning(name) abort
line 55: 
line 56: " Example of registering a Python plugin with two commands (one async), one
line 57: " autocmd (async) and one function (sync):
line 58: "
line 59: " let s:plugin_path = expand('<sfile>:p:h').'/nvim_plugin.py'
line 60: " call remote#host#RegisterPlugin('python', s:plugin_path, [
line 61: "   \ {'type': 'command', 'name': 'PyCmd', 'sync': 1, 'opts': {}},
line 62: "   \ {'type': 'command', 'name': 'PyAsyncCmd', 'sync': 0, 'opts': {'eval': 'cursor()'}},
line 63: "   \ {'type': 'autocmd', 'name': 'BufEnter', 'sync': 0, 'opts': {'eval': 'expand("<afile>")'}},
line 64: "   \ {'type': 'function', 'name': 'PyFunc', 'sync': 1, 'opts': {}}
line 65: "   \ ])
line 66: "
line 67: " The third item in a declaration is a boolean: non zero means the command,
line 68: " autocommand or function will be executed synchronously with rpcrequest.
line 69: function! remote#host#RegisterPlugin(host, path, specs) abort
line 111: 
line 112: function! s:RegistrationCommands(host) abort
line 155: 
line 156: function! remote#host#UpdateRemotePlugins() abort
line 176: 
line 177: function! remote#host#PluginsForHost(host) abort
line 183: 
line 184: function! remote#host#LoadErrorForHost(host, log) abort
line 190: 
line 191: " Registration of standard hosts
line 192: 
line 193: " Python/Python3
line 194: call remote#host#Register('python', '*', function('provider#pythonx#Require'))
calling remote#host#Register('python', '*', function('provider#pythonx#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 196: call remote#host#Register('python3', '*', function('provider#pythonx#Require'))
calling remote#host#Register('python3', '*', function('provider#pythonx#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 198: 
line 199: " Ruby
line 200: call remote#host#Register('ruby', '*.rb', function('provider#ruby#Require'))
calling remote#host#Register('ruby', '*.rb', function('provider#ruby#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 202: 
line 203: " nodejs
line 204: call remote#host#Register('node', '*', function('provider#node#Require'))
calling remote#host#Register('node', '*', function('provider#node#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 206: 
line 207: " perl
line 208: call remote#host#Register('perl', '*', function('provider#perl#Require'))
calling remote#host#Register('perl', '*', function('provider#perl#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim
continuing in /Users/christopher.griffith/.local/share/nvim/rplugin.vim
calling remote#host#RegisterPlugin('python3', '/Users/christopher.griffith/.local/sh...azy/wilder.nvim/rplugin/python3/wilder', [{'sync': v:true, 'name': '_wilder_pyt...filt', 'type': 'function', 'opts': {}}])

line 1:   let plugins = remote#host#PluginsForHost(a:host)
calling remote#host#PluginsForHost('python3')

line 1:   if !has_key(s:plugins_for_host, a:host)
line 2:     let s:plugins_for_host[a:host] = []
line 3:   end
line 4:   return s:plugins_for_host[a:host]
remote#host#PluginsForHost returning []

continuing in remote#host#RegisterPlugin

line 2: 
line 3:   for plugin in plugins
line 4:     if plugin.path == a:path
line 5:       throw 'Plugin "'.a:path.'" is already registered'
line 6:     endif
line 7:   endfor
line 8: 
line 9:   if has_key(s:hosts, a:host) && remote#host#IsRunning(a:host)
calling remote#host#IsRunning('python3')

line 1:   if !has_key(s:hosts, a:name)
line 2:     throw 'No host named "'.a:name.'" is registered'
line 3:   endif
line 4:   return s:hosts[a:name].channel != 0
remote#host#IsRunning returning #0

continuing in remote#host#RegisterPlugin

line 10:     " For now we won't allow registration of plugins when the host is already
line 11:     " running.
line 12:     throw 'Host "'.a:host.'" is already running'
line 13:   endif
line 14: 
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
Searching for "autoload/remote/define.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/remote/define.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/define.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 34: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/define.vim"
line 1: function! remote#define#CommandOnHost(host, method, sync, name, opts)
line 39: 
line 40: 
line 41: function! remote#define#CommandBootstrap(host, method, sync, name, opts, forward)
line 52: 
line 53: 
line 54: function! remote#define#CommandOnChannel(channel, method, sync, name, opts)
line 88: 
line 89: 
line 90: function! remote#define#AutocmdOnHost(host, method, sync, name, opts)
line 105: 
line 106: 
line 107: function! remote#define#AutocmdBootstrap(host, method, sync, name, opts, forward)
line 120: 
line 121: 
line 122: function! remote#define#AutocmdOnChannel(channel, method, sync, name, opts)
line 130: 
line 131: 
line 132: function! remote#define#FunctionOnHost(host, method, sync, name, opts)
line 143: 
line 144: 
line 145: function! remote#define#FunctionBootstrap(host, method, sync, name, opts, group)
line 157: 
line 158: 
line 159: function! remote#define#FunctionOnChannel(channel, method, sync, name, opts)
line 171: 
line 172: let s:busy = {}
line 173: let s:pending_notifications = {}
line 174: 
line 175: function! s:GetRpcFunction(sync)
line 183: 
line 184: function! remote#define#notify(chan, ...)
line 193: 
line 194: function! remote#define#request(chan, ...)
line 206: 
line 207: function! s:GetCommandPrefix(name, opts)
line 211: 
line 212: 
line 213: " Each msgpack-rpc autocommand has it's own unique group, which is derived
line 214: " from an autoincrementing gid(group id). This is required for replacing the
line 215: " autocmd implementation with the lazy-load mechanism
line 216: let s:next_gid = 1
line 217: function! s:GetNextAutocmdGroup()
line 226: 
line 227: 
line 228: function! s:GetAutocmdPrefix(name, opts)
line 252: 
line 253: 
line 254: function! s:GetFunctionPrefix(name, opts)
line 261: 
line 262: 
line 263: function! s:StringifyOpts(opts, keys)
line 276: 
line 277: 
line 278: function! s:AddEval(rpcargs, opts)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/define.vim
continuing in remote#host#RegisterPlugin
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...unction:_wilder_python_basic_highlight', v:true, '_wilder_python_basic_highlight', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_1 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_1'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_1 FuncUndefined _wilder_python_basic_highlight call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_basic_highlight", v:true, "_wilder_python_basic_highlight", {}, "RPC_DEFINE_AUTOCMD_GROUP_1")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_clap_filt', 'urgent', '_wilder_python_clap_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_2 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_2'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_2 FuncUndefined _wilder_python_clap_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_clap_filt", 'urgent', "_wilder_python_clap_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_2")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_cpsm_filt', 'urgent', '_wilder_python_cpsm_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_3 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_3'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_3 FuncUndefined _wilder_python_cpsm_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_cpsm_filt", 'urgent', "_wilder_python_cpsm_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_3")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...function:_wilder_python_cpsm_highlight', v:true, '_wilder_python_cpsm_highlight', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_4 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_4'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_4 FuncUndefined _wilder_python_cpsm_highlight call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_cpsm_highlight", v:true, "_wilder_python_cpsm_highlight", {}, "RPC_DEFINE_AUTOCMD_GROUP_4")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...r:function:_wilder_python_difflib_sort', 'urgent', '_wilder_python_difflib_sort', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_5 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_5'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_5 FuncUndefined _wilder_python_difflib_sort call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_difflib_sort", 'urgent', "_wilder_python_difflib_sort", {}, "RPC_DEFINE_AUTOCMD_GROUP_5")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...er:function:_wilder_python_file_finder', 'urgent', '_wilder_python_file_finder', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_6 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_6'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_6 FuncUndefined _wilder_python_file_finder call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_file_finder", 'urgent', "_wilder_python_file_finder", {}, "RPC_DEFINE_AUTOCMD_GROUP_6")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...er:function:_wilder_python_fruzzy_filt', 'urgent', '_wilder_python_fruzzy_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_7 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_7'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_7 FuncUndefined _wilder_python_fruzzy_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_fruzzy_filt", 'urgent', "_wilder_python_fruzzy_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_7")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...der:function:_wilder_python_fuzzy_filt', 'urgent', '_wilder_python_fuzzy_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_8 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_8'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_8 FuncUndefined _wilder_python_fuzzy_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_fuzzy_filt", 'urgent', "_wilder_python_fuzzy_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_8")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...unction:_wilder_python_fuzzywuzzy_sort', 'urgent', '_wilder_python_fuzzywuzzy_sort', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_9 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_9'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_9 FuncUndefined _wilder_python_fuzzywuzzy_sort call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_fuzzywuzzy_sort", 'urgent', "_wilder_python_fuzzywuzzy_sort", {}, "RPC_DEFINE_AUTOCMD_GROUP_9")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...ion:_wilder_python_get_file_completion', v:true, '_wilder_python_get_file_completion', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_10 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_10'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_10 FuncUndefined _wilder_python_get_file_completion call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_get_file_completion", v:true, "_wilder_python_get_file_completion", {}, "RPC_DEFINE_AUTOCMD_GROUP_10")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...:function:_wilder_python_get_help_tags', 'urgent', '_wilder_python_get_help_tags', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_11 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_11'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_11 FuncUndefined _wilder_python_get_help_tags call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_get_help_tags", 'urgent', "_wilder_python_get_help_tags", {}, "RPC_DEFINE_AUTOCMD_GROUP_11")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_get_users', 'urgent', '_wilder_python_get_users', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_12 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_12'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_12 FuncUndefined _wilder_python_get_users call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_get_users", 'urgent', "_wilder_python_get_users", {}, "RPC_DEFINE_AUTOCMD_GROUP_12")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...n/python3/wilder:function:_wilder_init', v:true, '_wilder_init', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_13 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_13'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_13 FuncUndefined _wilder_init call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_init", v:true, "_wilder_init", {}, "RPC_DEFINE_AUTOCMD_GROUP_13")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...unction:_wilder_python_pcre2_highlight', v:true, '_wilder_python_pcre2_highlight', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_14 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_14'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_14 FuncUndefined _wilder_python_pcre2_highlight call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_pcre2_highlight", v:true, "_wilder_python_pcre2_highlight", {}, "RPC_DEFINE_AUTOCMD_GROUP_14")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh.../wilder:function:_wilder_python_search', 'urgent', '_wilder_python_search', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_15 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_15'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_15 FuncUndefined _wilder_python_search call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_search", 'urgent', "_wilder_python_search", {}, "RPC_DEFINE_AUTOCMD_GROUP_15")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...3/wilder:function:_wilder_python_sleep', 'urgent', '_wilder_python_sleep', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_16 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_16'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_16 FuncUndefined _wilder_python_sleep call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_sleep", 'urgent', "_wilder_python_sleep", {}, "RPC_DEFINE_AUTOCMD_GROUP_16")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...r:function:_wilder_python_lexical_sort', 'urgent', '_wilder_python_lexical_sort', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_17 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_17'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_17 FuncUndefined _wilder_python_lexical_sort call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_lexical_sort", 'urgent', "_wilder_python_lexical_sort", {}, "RPC_DEFINE_AUTOCMD_GROUP_17")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_uniq_filt', 'urgent', '_wilder_python_uniq_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>84_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_18 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>84_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_18'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_18 FuncUndefined _wilder_python_uniq_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_uniq_filt", 'urgent', "_wilder_python_uniq_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_18")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 39: 
line 40:   call add(plugins, {'path': a:path, 'specs': a:specs})
remote#host#RegisterPlugin returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/rplugin.vim

line 28: 
line 29: 
line 30: " ruby plugins
line 31: 
line 32: 
line 33: " python plugins
line 34: 
line 35: 
finished sourcing /Users/christopher.griffith/.local/share/nvim/rplugin.vim
continuing in <SNR>81_LoadRemotePlugins
line 4:   endif
<SNR>81_LoadRemotePlugins returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim

line 69: endif
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/shada.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/shada.vim"
line 1: if exists('g:loaded_shada_plugin')
line 2:   finish
line 3: endif
line 4: let g:loaded_shada_plugin = 1
line 5: 
line 6: augroup ShaDaCommands
line 7:   autocmd!
line 8:   autocmd BufReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call setline('.', shada#get_strings(readfile(expand('<afile>'),'b'))) |setlocal filetype=shada
line 12:   autocmd FileReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call append("'[", shada#get_strings(readfile(expand('<afile>'), 'b')))
line 15:   autocmd BufWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |if writefile(shada#get_binstrings(getline(1, '$')),expand('<afile>'), 'b') == 0 |  let &l:modified = (expand('<afile>') is# bufname(+expand('<abuf>'))? 0: stridx(&cpoptions, '+') != -1) |endif
line 23:   autocmd FileWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'b')
line 30:   autocmd FileAppendCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'ab')
line 37:   autocmd SourceCmd *.shada,*.shada.tmp.[a-z] :execute 'rshada' fnameescape(expand('<afile>'))
line 39: augroup END
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/shada.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/spellfile.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: 
line 3: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 4:   finish
line 5: endif
line 6: let loaded_spellfile_plugin = 1
line 7: 
line 8: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/spellfile.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tarPlugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v32"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 47:   au BufReadCmd   *.tar.zst^I^Icall tar#Browse(expand("<amatch>"))
line 48:   au BufReadCmd   *.tzs^I^I^Icall tar#Browse(expand("<amatch>"))
line 49: augroup END
line 50: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: " Restoration And Modelines: {{{1
line 54: " vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tarPlugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tohtml.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2023 Jan 01
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: if exists('g:loaded_2html_plugin')
line 9:   finish
line 10: endif
line 11: let g:loaded_2html_plugin = 'vim9.0_v1'
line 12: 
line 13: "
line 14: " Changelog: {{{
line 15: "   9.0_v1  (this version): - Implement g:html_no_doc and g:html_no_modeline
line 16: "                             for diff mode. Add tests.
line 17: "           (Vim 9.0.1122): NOTE: no version string update for this version!
line 18: "                           - Bugfix for variable name in g:html_no_doc
line 19: "           (Vim 9.0.0819): NOTE: no version string update for this version!
line 20: "                           - Add options g:html_no_doc, g:html_no_lines,
line 21: "                             and g:html_no_modeline (partially included in Vim
line 22: "                             runtime prior to version string update).
line 23: "                           - Updates for new Vim9 string append style (i.e. use
line 24: "                             ".." instead of ".")
line 25: "
line 26: "   8.1 updates: {{{
line 27: "   8.1_v2  (Vim 8.1.2312): - Fix SourceForge issue #19: fix calculation of tab
line 28: "                             stop position to use in expanding a tab, when that
line 29: "                             tab occurs after a syntax match which in turn
line 30: "                             comes after previously expanded tabs.
line 31: "                           - Set eventignore while splitting a window for the
line 32: "                             destination file to ignore FileType events;
line 33: "                             speeds up processing when the destination file
line 34: "                             already exists and HTML highlight takes too long.
line 35: "                           - Fix SourceForge issue #20: progress bar could not be
line 36: "                             seen when DiffDelete background color matched
line 37: "                             StatusLine background color. Added TOhtmlProgress
line 38: "                             highlight group for manual user override, but
line 39: "                             calculate it to be visible compared to StatusLine
line 40: "                             by default.
line 41: "                           - Fix SourceForge issue #1: Remove workaround for old
line 42: "                             browsers which don't support 'ch' CSS unit, since
line 43: "                             all modern browsers, including IE>=9, support it.
line 44: "                           - Fix SourceForge issue #10: support termguicolors
line 45: "                           - Fix SourceForge issue #21: default to using
line 46: "                             generated content instead of <input> tags for
line 47: "                             uncopyable text, so that text is correctly
line 48: "                             prevented from being copied in chrome. Use
line 49: "                             g:html_use_input_for_pc option to control the
line 50: "                             method used.
line 51: "                           - Switch to HTML5 to allow using vnu as a validator
line 52: "                             in unit test.
line 53: "                           - Fix fallback sizing of <input> tags for browsers
line 54: "                             without "ch" support.
line 55: "                           - Fix cursor on unselectable diff filler text.
line 56: "   8.1_v1  (Vim 8.1.0528): - Fix SourceForge issue #6: Don't generate empty
line 57: "                             script tag.
line 58: "                           - Fix SourceForge issue #5: javascript should
line 59: "                             declare variables with "var".
line 60: "                           - Fix SourceForge issue #13: errors thrown sourcing
line 61: "                             2html.vim directly when plugins not loaded.
line 62: "                           - Fix SourceForge issue #16: support 'vartabstop'.
line 63: "}}}
line 64: "
line 65: "   7.4 updates: {{{
line 66: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing
line 67: "                           an empty buffer. Jan Stocker: allow g:html_font to
line 68: "                           take a list so it is easier to specfiy fallback
line 69: "                           fonts in the generated CSS.
line 70: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and
line 71: "^I^I^I    also for version-specific modelines like "vim>703:".
line 72: "}}}
line 73: "
line 74: "   7.3 updates: {{{
line 75: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using
line 76: "^I^I^I    g:html_line_ids=0. Allow customizing
line 77: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 78: "^I^I^I    g:html_id_expr evaluated when the buffer conversion
line 79: "^I^I^I    is started.
line 80: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and
line 81: "^I^I^I    insert modeline to set it to manual.
line 82: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 83: "^I^I^I    duplicate of one buffer instead of including both.
line 84: "^I^I^I    Add anchors to each line so you can put '#L123'
line 85: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 86: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 87: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 88: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 89: "^I^I^I    Allow TOhtml to chain together with other commands
line 90: "^I^I^I    using |.
line 91: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple
line 92: "^I^I^I    highlight groups make up the start-of-modeline text.
line 93: "^I^I^I    Improve render time of page with uncopyable regions
line 94: "^I^I^I    by not using one-input-per-char. Change name of
line 95: "^I^I^I    uncopyable option from html_unselectable to
line 96: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 97: "^I^I^I    default to inserting invalid markup for uncopyable
line 98: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 99: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 100: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 101: "^I^I^I    eliminate post-processing substitute commands in
line 102: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 103: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 104: "^I^I^I    speed improvements. Fix modeline mangling in
line 105: "^I^I^I    generated output so it works for text in the first
line 106: "^I^I^I    column. Fix missing line number and fold column in
line 107: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 108: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 109: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 110: "^I^I^I    the new default foldtext added in v11, as the patch
line 111: "^I^I^I    adding it has not yet been included in Vim.
line 112: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 113: "^I^I^I    Brabandt in
line 114: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 115: "^I^I^I    This patch has not yet been included in Vim, thus
line 116: "^I^I^I    these changes are removed in the next version.
line 117: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside
line 118: "^I^I^I    multiple nested folds with dynamic folding on.
line 119: "^I^I^I    Also fix problem with foldtext in this situation.
line 120: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css
line 121: "^I^I^I    and without html_no_pre, default value same as
line 122: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 123: "^I^I^I    'fileencoding' for converted document encoding if
line 124: "^I^I^I    'buftype' indicates a special buffer which isn't
line 125: "^I^I^I    written.
line 126: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab
line 127: "^I^I^I    characters in generated output (Andy Spencer).
line 128: "^I^I^I    Escape text that looks like a modeline so Vim
line 129: "^I^I^I    doesn't use anything in the converted HTML as a
line 130: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 131: "^I^I^I    before the conversion range. Remove fold column when
line 132: "^I^I^I    there are no folds.
line 133: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:
line 134: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 135: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 136: "^I^I^I    supported by all major browsers according to
line 137: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 138: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 139: "^I^I^I    HTML encoding to Vim encoding detection be
line 140: "^I^I^I    case-insensitive for built-in pairs.
line 141: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 142: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 143: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 144: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 145: "^I^I^I    file matches its indicated charset. Add charsets for
line 146: "^I^I^I    all of Vim's natively supported encodings.
line 147: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other
line 148: "^I^I^I    user settings interfering with diff mode generation,
line 149: "^I^I^I    trailing whitespace (e.g. line number column) when
line 150: "^I^I^I    using html_no_pre, and bugs when using
line 151: "^I^I^I    html_hover_unfold.
line 152: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 153: "^I^I^I    folds in diff mode when first line was folded.
line 154: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode
line 155: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css
line 156: "^I^I^I    default to true when not set to anything. Use strict
line 157: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 158: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 159: "^I^I^I    when using this option. Add meta tag for settings.
line 160: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the
line 161: "^I^I^I    diff colors and the normal syntax colors
line 162: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output
line 163: "}}}
line 164: "}}}
line 165: 
line 166: " TODO: {{{
line 167: "   * Check the issue tracker:
line 168: "     https://sourceforge.net/p/vim-tohtml/issues/search/?q=%21status%3Aclosed
line 169: "   * Options for generating the CSS in external style sheets. New :TOcss
line 170: "     command to convert the current color scheme into a (mostly) generic CSS
line 171: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 172: "     by Erik Falor
line 173: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 174: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 175: "     term) to use for the styling. Suggestion by "nacitar".
line 176: "   * Add way to override or specify which RGB colors map to the color numbers
line 177: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 178: "   * Disable filetype detection until after all processing is done.
line 179: "   * Add option for not generating the hyperlink on stuff that looks like a
line 180: "     URL? Or just color the link to fit with the colorscheme (and only special
line 181: "     when hovering)?
line 182: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 183: "     regions is turned on. Possible solution: Add normal text line numbers with
line 184: "     display:none, set to display:inline for print style sheets, and hide
line 185: "     <input> elements for print, to allow Opera printing multiple pages (and
line 186: "     other uncopyable areas?). May need to make the new text invisible to IE
line 187: "     with conditional comments to prevent copying it, IE for some reason likes
line 188: "     to copy hidden text. Other browsers too?
line 189: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 190: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 191: "     on Windows). Perhaps it is font related?
line 192: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 193: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 194: "     on diff lines though.
line 195: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 196: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 197: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 198: "     accepted to modify it.
line 199: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 200: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 201: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 202: "     does not show the whole diff filler as it is supposed to?
line 203: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 204: "     invalid content. Can/should anything be done about this? Maybe a separate
line 205: "     plugin to correct 'isprint' based on encoding?
line 206: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 207: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 208: "   * Font auto-detection similar to
line 209: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 210: "     platforms.
line 211: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 212: "^I- listchars support
line 213: "^I- full-line background highlight
line 214: "^I- other?
line 215: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 216: "     free with full-line background highlight above).
line 217: "   * Restore open/closed folds and cursor position after processing each file
line 218: "     with option not to restore for speed increase.
line 219: "   * Add extra meta info (generation time, etc.)?
line 220: "   * Tidy up so we can use strict doctype in even more situations
line 221: "   * Implementation detail: add threshold for writing the lines to the html
line 222: "     buffer before we're done (5000 or so lines should do it)
line 223: "   * TODO comments for code cleanup scattered throughout
line 224: "}}}
line 225: 
line 226: " Define the :TOhtml command when:
line 227: " - 'compatible' is not set
line 228: " - this plugin or user override was not already loaded
line 229: " - user commands are available. {{{
line 230: if !&cp && !exists(":TOhtml") && has("user_commands")
line 231:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 232: endif "}}}
line 233: 
line 234: " Make sure any patches will probably use consistent indent
line 235: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tohtml.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tutor.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tutor.vim"
line 1: if exists('g:loaded_tutor_mode_plugin') || &compatible
line 2:     finish
line 3: endif
line 4: let g:loaded_tutor_mode_plugin = 1
line 5: 
line 6: command! -nargs=? -complete=custom,tutor#TutorCmdComplete Tutor call tutor#TutorCmd(<q-args>)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tutor.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/zipPlugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^IJan 07, 2020
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v32"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/zipPlugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/cmp_nvim_lsp_document_symbol.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/cmp_nvim_lsp_document_symbol.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/cmp_nvim_lsp_document_symbol.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/cmp_nvim_lua.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/cmp_nvim_lua.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/cmp_nvim_lua.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/barbar.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/barbar.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/barbar.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/nightfox.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/nightfox.lua"
Executing: colorscheme nightfox
Executing ColorSchemePre Autocommands for "*"
autocommand <Lua 9: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/loader.lua:31>

Executing: 
Searching for "colors/nightfox.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/nightfox.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/nightfox.vim"
line 1: lua << EOF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/nightfox/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/nightfox/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/nightfox.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/projects/dotfiles/nvim/after/plugin/nightfox.lua:0
Executing ColorScheme Autocommands for "*"
autocommand <Lua 183: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:186>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/nvim-web-devicons/lua/nvim-web-devicons.lua:281>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand lua require('notify.config.highlights').setup()

Executing: lua require('notify.config.highlights').setup()
Executing:     hi default link NotifyBackground Normal
Executing:     hi default NotifyERRORBorder guifg=#8A1F1F
Executing:     hi default NotifyWARNBorder guifg=#79491D
Executing:     hi default NotifyINFOBorder guifg=#4F6752
Executing:     hi default NotifyDEBUGBorder guifg=#8B8B8B
Executing:     hi default NotifyTRACEBorder guifg=#4F3552
Executing:     hi default NotifyERRORIcon guifg=#F70067
Executing:     hi default NotifyWARNIcon guifg=#F79000
Executing:     hi default NotifyINFOIcon guifg=#A9FF68
Executing:     hi default NotifyDEBUGIcon guifg=#8B8B8B
Executing:     hi default NotifyTRACEIcon guifg=#D484FF
Executing:     hi default NotifyERRORTitle  guifg=#F70067
Executing:     hi default NotifyWARNTitle guifg=#F79000
Executing:     hi default NotifyINFOTitle guifg=#A9FF68
Executing:     hi default NotifyDEBUGTitle  guifg=#8B8B8B
Executing:     hi default NotifyTRACETitle  guifg=#D484FF
Executing:     hi default link NotifyERRORBody Normal
Executing:     hi default link NotifyWARNBody Normal
Executing:     hi default link NotifyINFOBody Normal
Executing:     hi default link NotifyDEBUGBody Normal
Executing:     hi default link NotifyTRACEBody Normal
Executing: 
Executing:     hi default link NotifyLogTime Comment
Executing:     hi default link NotifyLogTitle Special
Executing:   
Executing ColorScheme Autocommands for "*"
autocommand <Lua 267: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand <Lua 373: ~/.local/share/nvim/lazy/glance.nvim/lua/glance/highlights.lua:155>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand lua require'lualine'.setup()

Executing: lua require'lualine'.setup()
Executing: augroup lualine | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Searching for "lua/lualine/themes/auto.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/lua/lualine/themes/auto.lua"
Searching for "lua/lualine/themes/nightfox.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/lualine/themes/nightfox.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/lua/lualine/themes/nightfox.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/lua/lualine/themes/nightfox.lua"
Executing: highlight clear lualine_b_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_inactive guifg=#719cd6 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_inactive guifg=#738091 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_inactive guifg=#71839b guibg=None gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_normal guifg=#131a24 guibg=#719cd6 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_normal guifg=#aeafb0 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_normal guifg=#cdcecf guibg=#2f4159 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_visual guifg=#131a24 guibg=#9d79d6 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_visual guifg=#cdcecf guibg=#3c3759 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_insert guifg=#131a24 guibg=#81b29a gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_insert guifg=#cdcecf guibg=#344847 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_replace guifg=#131a24 guibg=#c94f6d gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_replace guifg=#cdcecf guibg=#4a2a3a gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_command guifg=#131a24 guibg=#dbc074 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_command guifg=#cdcecf guibg=#4f4c3c gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_terminal guifg=#131a24 guibg=#f4a261 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_terminal guifg=#cdcecf guibg=#574336 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd lualine ColorScheme * lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     autocmd lualine OptionSet background lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_normal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_insert guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_visual guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_replace guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_command guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_terminal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_inactive guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_stl_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing: au lualine WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged *
--- Autocommands ---
Executing: autocmd lualine_stl_refresh WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged * call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_tal_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing: augroup lualine_wb_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing ColorScheme Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/nightfox.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/noice.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/noice.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/noice.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/nvim-lspconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/nvim-lspconfig.lua"
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/nvim-lspconfig.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/telescope.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/telescope.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/telescope.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/trouble.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/trouble.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/trouble.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/vim-fugitive.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/vim-fugitive.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/vim-fugitive.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/vim-obsession.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/vim-obsession.lua"
Executing: augroup ObsessionGroup
Executing:   au!
Executing:   au VimEnter * nested if !&modified && empty(v:this_session) | Obsession | echo '' | endif
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup END
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/vim-obsession.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/vim-sort-motion.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/vim-sort-motion.lua"
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/vim-sort-motion.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing User Autocommands for "LazyDone"
autocommand <Lua 8: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:159>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: function! StripTrailingWhitespace()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing: function! IsExcludedFileType()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing: function! TurnOnRelativeNumber()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing: function! TurnOffRelativeNumber()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/init.lua
Searching for "filetype.lua filetype.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.config/nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/filetype.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/)
chdir(/Users/christopher.griffith/projects/dotfiles)
sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua"
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/filetype.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/filetype.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/filetype.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/filetype.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/filetype.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/filetype.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/filetype.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/)
chdir(/Users/christopher.griffith/projects/dotfiles)
sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2022 Apr 12
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/syntax/synload.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/synload.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 19: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2022 Apr 12
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Line continuation is used here, remove 'C' from 'cpoptions'
line 18: let s:cpo_save = &cpo
line 19: set cpo&vim
line 20: 
line 21: " First remove all old syntax autocommands.
line 22: au! Syntax
line 23: 
line 24: au Syntax *^I^Icall s:SynSet()
line 25: 
line 26: fun! s:SynSet()
line 57: 
line 58: 
line 59: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 60: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 65: 
line 66: 
line 67: " Source the user-specified syntax highlighting file
line 68: if exists("mysyntaxfile")
line 69:   let s:fname = expand(mysyntaxfile)
line 70:   if filereadable(s:fname)
line 71:     execute "source " . fnameescape(s:fname)
line 72:   endif
line 73: endif
line 74: 
line 75: " Restore 'cpoptions'
line 76: let &cpo = s:cpo_save
line 77: unlet s:cpo_save
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/synload.vim
continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected
line 31: " unless treesitter highlighting is enabled.
line 32: " Avoid an error when 'verbose' is set and <amatch> expansion fails.
line 33: augroup syntaxset
line 34:   au! FileType *^Iif !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
line 35: augroup END
line 36: 
line 37: " Execute the syntax autocommands for the each buffer.
line 38: " If the filetype wasn't detected yet, do that now.
line 39: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 40: " already was set manually (e.g., help buffers).
line 41: doautoall syntaxset FileType
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
line 42: if !s:did_ft
line 43:   doautoall filetypedetect BufRead
line 44: endif
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/syntax.vim
Reading ShaDa file "/Users/christopher.griffith/.local/state/nvim/shada/main.shada" info marks oldfiles
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 188: vim/_editor.lua:0>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>78_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in <SNR>78_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>78_Highlight_Matching_Pair returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 185: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
autocommand <Lua 187: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 228: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:89>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufEnter Autocommands for "*"
autocommand <Lua 354: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif

Executing: if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
Executing:    exe s:persist() | endif
calling <SNR>71_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
line 10:       execute 'mksession!' fnameescape(tmp)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>71_persist returning ''

continuing in BufEnter Autocommands for "*"

Executing: 
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 429: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in BufEnter Autocommands for "*"

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 32: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/init.lua:18>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/util/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/util/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 177: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/state.lua:369>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 229: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:82>

Executing: 
autocommand <Lua 231: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:82>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing VimEnter Autocommands for "*"
autocommand if !&modified && empty(v:this_session) | Obsession | echo '' | endif

Executing: if !&modified && empty(v:this_session) | Obsession | echo '' | endif
Executing:  Obsession | echo '' | endif
Executing: execute s:dispatch(0, '')
calling <SNR>71_dispatch(0, '')

line 1:   let session = get(g:, 'this_obsession', v:this_session)
line 2:   try
line 3:     if a:bang && empty(a:file) && filereadable(session)
line 4:       echo 'Deleting session in '.fnamemodify(session, ':~:.')
line 5:       call delete(session)
line 6:       unlet! g:this_obsession
line 7:       return ''
line 8:     elseif empty(a:file) && exists('g:this_obsession')
line 9:       echo 'Pausing session in '.fnamemodify(session, ':~:.')
line 10:       unlet g:this_obsession
line 11:       return ''
line 12:     elseif empty(a:file) && !empty(session)
line 13:       let file = session
line 14:     elseif empty(a:file)
line 15:       let file = getcwd() . '/Session.vim'
line 16:     elseif isdirectory(a:file)
line 17:       let file = substitute(fnamemodify(expand(a:file), ':p'), '[\/]$', '', '') . '/Session.vim'
line 19:     else
line 20:       let file = fnamemodify(expand(a:file), ':p')
line 21:     endif
line 22:     if !a:bang && file !~# 'Session\.vim$' && filereadable(file) && getfsize(file) > 0 && readfile(file, '', 1)[0] !=# 'let SessionLoad = 1'
line 27:       return 'mksession '.fnameescape(file)
line 28:     endif
line 29:     let g:this_obsession = file
line 30:     let error = s:persist()
calling <SNR>71_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>71_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.77219.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>71_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>71_persist returning ''

continuing in <SNR>71_dispatch

line 31:     if empty(error)
line 32:       echo 'Tracking session in '.fnamemodify(file, ':~:.')
Tracking session in Session.vim
line 33:       let v:this_session = file
line 34:       return ''
:return  made pending

line 35:     else
line 36:       return error
line 37:     endif
line 38:   finally
line 39:     let &l:readonly = &l:readonly
line 40:   endtry
:return  resumed

<SNR>71_dispatch returning ''

continuing in VimEnter Autocommands for "*"

Executing: 
Executing:  echo '' | endif

Executing:  endif
Executing UIEnter Autocommands for "*"
autocommand <Lua 6: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:259>

Executing: 
autocommand <Lua 430: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:165>

Executing: 
Searching for "autoload/provider/clipboard.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/provider/clipboard.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/)
chdir(/Users/christopher.griffith/projects/dotfiles)
sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim"
line 1: " The clipboard provider uses shell commands to communicate with the clipboard.
line 2: " The provider function will only be registered if a supported command is
line 3: " available.
line 4: 
line 5: if exists('g:loaded_clipboard_provider')
line 6:   finish
line 7: endif
line 8: " Default to 1.  provider#clipboard#Executable() may set 2.
line 9: " To force a reload:
line 10: "   :unlet g:loaded_clipboard_provider
line 11: "   :runtime autoload/provider/clipboard.vim
line 12: let g:loaded_clipboard_provider = 1
line 13: 
line 14: let s:copy = {}
line 15: let s:paste = {}
line 16: let s:clipboard = {}
line 17: 
line 18: " When caching is enabled, store the jobid of the xclip/xsel process keeping
line 19: " ownership of the selection, so we know how long the cache is valid.
line 20: let s:selection = { 'owner': 0, 'data': [], 'stderr_buffered': v:true }
line 21: 
line 22: function! s:selection.on_exit(jobid, data, event) abort
line 35: 
line 36: let s:selections = { '*': s:selection, '+': copy(s:selection) }
line 37: 
line 38: function! s:try_cmd(cmd, ...) abort
line 51: 
line 52: " Returns TRUE if `cmd` exits with success, else FALSE.
line 53: function! s:cmd_ok(cmd) abort
line 57: 
line 58: function! s:split_cmd(cmd) abort
line 61: 
line 62: let s:cache_enabled = 1
line 63: let s:err = ''
line 64: 
line 65: function! provider#clipboard#Error() abort
line 68: 
line 69: function! provider#clipboard#Executable() abort
line 164: 
line 165: function! s:clipboard.get(reg) abort
line 182: 
line 183: function! s:clipboard.set(lines, regtype, reg) abort
line 241: 
line 242: function! provider#clipboard#Call(method, args) abort
line 253: 
line 254: " eval_has_provider() decides based on this variable.
line 255: let g:loaded_clipboard_provider = empty(provider#clipboard#Executable()) ? 1 : 2
calling provider#clipboard#Executable()

line 1:   if exists('g:clipboard')
line 2:     if type({}) isnot# type(g:clipboard) || type({}) isnot# type(get(g:clipboard, 'copy', v:null)) || type({}) isnot# type(get(g:clipboard, 'paste', v:null))
line 5:       let s:err = 'clipboard: invalid g:clipboard'
line 6:       return ''
line 7:     endif
line 8: 
line 9:     let s:copy = {}
line 10:     let s:copy['+'] = s:split_cmd(get(g:clipboard.copy, '+', v:null))
line 11:     let s:copy['*'] = s:split_cmd(get(g:clipboard.copy, '*', v:null))
line 12: 
line 13:     let s:paste = {}
line 14:     let s:paste['+'] = s:split_cmd(get(g:clipboard.paste, '+', v:null))
line 15:     let s:paste['*'] = s:split_cmd(get(g:clipboard.paste, '*', v:null))
line 16: 
line 17:     let s:cache_enabled = get(g:clipboard, 'cache_enabled', 0)
line 18:     return get(g:clipboard, 'name', 'g:clipboard')
line 19:   elseif has('mac')
line 20:     let s:copy['+'] = ['pbcopy']
line 21:     let s:paste['+'] = ['pbpaste']
line 22:     let s:copy['*'] = s:copy['+']
line 23:     let s:paste['*'] = s:paste['+']
line 24:     let s:cache_enabled = 0
line 25:     return 'pbcopy'
provider#clipboard#Executable returning 'pbcopy'

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim

finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim
Executing:       silent! call dictwatcherdel(g:, 'bufferline', 'barbar#events#dict_changed')
Error detected while processing nvim_exec2():
Couldn't find a watcher matching key and callback
Executing:       silent! call dictwatcherdel(g:bufferline, '*', 'barbar#events#on_option_changed')
Error detected while processing nvim_exec2():
E121: Undefined variable: g:bufferline
Error detected while processing nvim_exec2():
E116: Invalid arguments for function dictwatcherdel
Executing:     
Executing:       call dictwatcheradd(g:, 'bufferline', 'barbar#events#dict_changed')
Executing:       call dictwatcheradd(g:bufferline, '*', 'barbar#events#on_option_changed')
Executing:     
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_filename guifg=#719cd6 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_normal guifg=#719cd6 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing User Autocommands for "VeryLazy"
autocommand <Lua 7: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:267>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/view/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing User Autocommands for "VeryLazy"
autocommand <Lua 11: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/zoomwin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/zoomwin.vim"
line 1: scriptencoding utf-8
line 2: 
line 3: " Zoom / Restore window.
line 4: function! s:ZoomToggle() abort
line 15: 
line 16: command! ZoomToggle call s:ZoomToggle()
line 17: 
line 18: noremap <silent> <Leader>z :ZoomToggle<CR>
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/zoomwin.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/cmp_zsh.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/cmp_zsh.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/cmp_zsh.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki plugin file
line 3: " Home: https://github.com/vimwiki/vimwiki/
line 4: " GetLatestVimScripts: 2226 1 :AutoInstall: vimwiki
line 5: 
line 6: 
line 7: " Clause: load only once
line 8: if exists('g:loaded_vimwiki') || &compatible
line 9:   finish
line 10: endif
line 11: let g:loaded_vimwiki = 1
line 12: 
line 13: " Set to version number for release:
line 14: let g:vimwiki_version = '2024.01.24'
line 15: 
line 16: " Get the directory the script is installed in
line 17: let s:plugin_dir = expand('<sfile>:p:h:h')
line 18: 
line 19: " Save peace in the galaxy
line 20: let s:old_cpo = &cpoptions
line 21: set cpoptions&vim
line 22: 
line 23: " Save autowriteall variable state
line 24: if exists('g:vimwiki_autowriteall')
line 25:   let s:vimwiki_autowriteall_saved = g:vimwiki_autowriteall
line 26: else
line 27:   let s:vimwiki_autowriteall_saved = 1
line 28: endif
line 29: 
line 30: 
line 31: " Autocommand called when the cursor leaves the buffer
line 32: function! s:setup_buffer_leave() abort
line 45: 
line 46: 
line 47: " Create a new temporary wiki for the current buffer
line 48: function! s:create_temporary_wiki() abort
line 70: 
line 71: 
line 72: " Autocommand called when Vim opens a new buffer with a known wiki
line 73: " extension. Both when the buffer has never been opened in this session and
line 74: " when it has.
line 75: function! s:setup_new_wiki_buffer() abort
line 96: 
line 97: 
line 98: " Autocommand called when the cursor enters the buffer
line 99: function! s:setup_buffer_enter() abort
line 108: 
line 109: 
line 110: " Autocommand called when the buffer enters a window or when running a  diff
line 111: function! s:setup_buffer_win_enter() abort
line 124: 
line 125: 
line 126: " Help syntax reloading
line 127: function! s:setup_cleared_syntax() abort
line 143: 
line 144: 
line 145: " Return: list of extension known vy vimwiki
line 146: function! s:vimwiki_get_known_extensions() abort
line 159: 
line 160: 
line 161: " Set settings which are global for Vim, but should only be executed for
line 162: " Vimwiki buffers. So they must be set when the cursor enters a Vimwiki buffer
line 163: " and reset when the cursor leaves the buffer.
line 164: function! s:set_global_options() abort
line 172: 
line 173: 
line 174: " Set settings which are local to a window. In a new tab they would be reset to
line 175: " Vim defaults. So we enforce our settings here when the cursor enters a
line 176: " Vimwiki buffer.
line 177: function! s:set_windowlocal_options() abort
line 207: 
line 208: 
line 209: " Echo vimwiki version
line 210: " Called by :VimwikiShowVersion
line 211: function! s:get_version() abort
line 226: 
line 227: 
line 228: """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
line 229: " Initialization of Vimwiki starts here.
line 230: " Make sure everything below does not cause autoload/vimwiki/base.vim
line 231: " to be loaded
line 232: call vimwiki#vars#init()
Searching for "autoload/vimwiki/vars.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/vars.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/vars.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/vars.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/vars.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 232: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/vars.vim"
line 1: " Title: Vimwiki variable definition and manipulation functions
line 2: "
line 3: " Home: https://github.com/vimwiki/vimwiki/
line 4: 
line 5: " ------------------------------------------------------------------------------------------------
line 6: " This file provides functions to manage the various state variables which are needed during a
line 7: " Vimwiki session.
line 8: " They consist of:
line 9: "
line 10: " - global variables. These are stored in the dict g:vimwiki_global_vars. They consist mainly of
line 11: "   global user variables and syntax stuff which is the same for every syntax.
line 12: "
line 13: " - wiki-local variables. They are stored in g:vimwiki_wikilocal_vars which is a list of
line 14: "   dictionaries, one dict for every registered wiki. The last dictionary contains default values
line 15: "   (used for temporary wikis).
line 16: "
line 17: " - syntax variables. Stored in the dict g:vimwiki_syntaxlocal_vars which holds all the regexes and
line 18: "   other stuff which is needed for highlighting.
line 19: "
line 20: " - buffer-local variables. They are stored as buffer variables directly (b:foo)
line 21: 
line 22: " As a developer, you should, if possible, only use the get_ and set_ functions for these types of
line 23: " variables, not the underlying dicts!
line 24: " ------------------------------------------------------------------------------------------------
line 25: 
line 26: " Script variable
line 27: let s:margin_set_by_user = 0
line 28: 
line 29: 
line 30: function! vimwiki#vars#init() abort
line 40: 
line 41: 
line 42: function! s:check_users_value(key, users_value, value_infos, comes_from_global_variable) abort
line 104: 
line 105: 
line 106: function! s:update_key(output_dic, key, old, new) abort
line 124: 
line 125: " ----------------------------------------------------------
line 126: " 1. Global {{{1
line 127: " ----------------------------------------------------------
line 128: 
line 129: function! s:get_default_global() abort
line 197: 
line 198: 
line 199: function! s:populate_global_variables() abort
line 206: 
line 207: 
line 208: function! s:internal_global_settings() abort
line 316: 
line 317: 
line 318: function! s:extend_global(output_dic, default_dic) abort
line 339: 
line 340: 
line 341: function! s:read_global_settings_from_user() abort
line 371: 
line 372: 
line 373: function! s:normalize_global_settings() abort
line 454: 
line 455: 
line 456: " ----------------------------------------------------------
line 457: " 3. Wiki local {{{1
line 458: " ----------------------------------------------------------
line 459: 
line 460: function! s:get_default_wikilocal() abort
line 549: 
line 550: function! s:extend_local(output_dic, default_dic, global_dic, user_dic) abort
line 565: 
line 566: 
line 567: function! s:populate_wikilocal_options() abort
line 598: 
line 599: 
line 600: function! s:normalize_wikilocal_settings() abort
line 655: 
line 656: 
line 657: function! s:normalize_path(path) abort
line 668: 
line 669: 
line 670: " ----------------------------------------------------------
line 671: " 2. Syntax specific {{{1
line 672: " ----------------------------------------------------------
line 673: 
line 674: function! s:get_default_syntaxlocal() abort
line 720: 
line 721: function! s:get_markdown_syntaxlocal() abort
line 783: 
line 784: function! s:get_media_syntaxlocal() abort
line 826: 
line 827: function! s:get_common_syntaxlocal() abort
line 856: 
line 857: 
line 858: function! vimwiki#vars#populate_syntax_vars(syntax) abort
line 1078: 
line 1079: 
line 1080: function! s:populate_list_vars(wiki) abort
line 1139: 
line 1140: 
line 1141: function! s:populate_blockquote_vars(wiki) abort
line 1155: 
line 1156: 
line 1157: function! s:populate_extra_markdown_vars() abort
line 1327: 
line 1328: 
line 1329: function! s:normalize_syntax_settings(syntax) abort
line 1346: 
line 1347: 
line 1348: " ----------------------------------------------------------
line 1349: " 4. Command (exported) {{{1
line 1350: " ----------------------------------------------------------
line 1351: 
line 1352: function! s:get_anywhere(key, ...) abort
line 1451: 
line 1452: 
line 1453: function! vimwiki#vars#cmd(arg) abort
line 1547: 
line 1548: 
line 1549: function! vimwiki#vars#complete(arglead, cmdline, pos) abort
line 1583: 
line 1584: 
line 1585: " ----------------------------------------------------------
line 1586: " 4. Getter, Setter (exported) {{{1
line 1587: " ----------------------------------------------------------
line 1588: 
line 1589: function! vimwiki#vars#get_syntaxlocal(key, ...) abort
line 1608: 
line 1609: 
line 1610: function! vimwiki#vars#set_syntaxlocal(key, value, ...) abort
line 1630: 
line 1631: 
line 1632: function! vimwiki#vars#get_bufferlocal(key, ...) abort
line 1665: 
line 1666: 
line 1667: function! vimwiki#vars#set_bufferlocal(key, value, ...) abort
line 1672: 
line 1673: 
line 1674: function! vimwiki#vars#get_global(key) abort
line 1678: 
line 1679: 
line 1680: function! vimwiki#vars#set_global(key, value) abort
line 1685: 
line 1686: 
line 1687: function! vimwiki#vars#get_wikilocal(key, ...) abort
line 1698: 
line 1699: 
line 1700: function! vimwiki#vars#get_wikilocal_default(key) abort
line 1704: 
line 1705: 
line 1706: function! vimwiki#vars#set_wikilocal(key, value, ...) abort
line 1720: 
line 1721: 
line 1722: function! vimwiki#vars#add_temporary_wiki(settings) abort
line 1733: 
line 1734: 
line 1735: function! vimwiki#vars#number_of_wikis() abort
line 1739: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/vars.vim
continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim
calling vimwiki#vars#init()

line 1:   " Init global and local variables
line 2:   " Init && Populate: global variable container
line 3:   let g:vimwiki_global_vars = {}
line 4:   call s:populate_global_variables()
calling <SNR>124_populate_global_variables()

line 1:   " Populate: global variable <- user & default
line 2:   " Called: s:vimwiki#vars#init
line 3:   call s:read_global_settings_from_user()
calling <SNR>124_read_global_settings_from_user()

line 1:   " Read user global settings
line 2:   " Called: s:populate_global_variables
line 3:   let default_dic = s:get_default_global()
calling <SNR>124_get_default_global()

line 1:   " Get default wikilocal values
line 2:   " Please: keep alphabetical sort
line 3:   return { 'CJK_length': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_chdir': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_header': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'autowriteall': {'type': type(0), 'default': 1, 'min': 0, 'max': 1}, 'conceallevel': {'type': type(0), 'default': 2, 'min': 0, 'max': 3}, 'conceal_onechar_markers': {'type': type(0), 'default': 1, 'min': 0, 'max': 1}, 'conceal_pre': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'create_link': {'type': type(0), 'default': 1, 'min':0, 'max': 1}, 'diary_months': {'type': type({}), 'default':   {     1: 'January', 2: 'February', 3: 'March',     4: 'April', 5: 'May', 6: 'June',     7: 'July', 8: 'August', 9: 'September',     10: 'October', 11: 'November', 12: 'December'   }}, 'dir_link': {'type': type(''), 'default': ''}, 'emoji_enable': {'type': type(0), 'default': 3, 'min':0, 'max': 3}, 'ext2syntax': {'type': type({}), 'default': {'.md': 'markdown', '.mkdn': 'markdown',     '.mdwn': 'mark
<SNR>124_get_default_global returning {'links_header_level': {'min': 1, 'max...tom:quick'], 'type': 1, 'default': ''}}

continuing in <SNR>124_read_global_settings_from_user

line 4: 
line 5:   " Update batch
line 6:   call s:extend_global(g:vimwiki_global_vars, default_dic)
calling <SNR>124_extend_global({}, {'links_header_level': {'min': 1, 'max...tom:quick'], 'type': 1, 'default': ''}})

line 1:   " Extend global dictionary <- default <- user
line 2:   " Note: user_dic is unused here because it comes from g:vimwiki_* vars
line 3:   " Copy the user's settings from variables of the form g:vimwiki_<option> into the dict
line 4:   " g:vimwiki_global_vars (or set a default value)
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
calling <SNR>124_check_users_value('listsyms', ' ✓', {'min_length': 2, 'type': 1, 'default': ' .oOX'}, 1)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>124_check_users_value returning #0

continuing in <SNR>124_extend_global

line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
calling <SNR>124_update_key({'links_header_level': 1, 'tags_header...refix': '<Leader>w', 'menu': 'Vimwiki'}, 'listsyms', ' .oOX', ' ✓')

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>124_update_key returning #0

continuing in <SNR>124_extend_global

line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
calling <SNR>124_check_users_value('url_maxsave', 0, {'min': 0, 'type': 0, 'default': 15}, 1)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>124_check_users_value returning #0

continuing in <SNR>124_extend_global

line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
calling <SNR>124_update_key({'links_header_level': 1, 'tags_header...', 'auto_header': 0, 'menu': 'Vimwiki'}, 'url_maxsave', 15, 0)

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>124_update_key returning #0

continuing in <SNR>124_extend_global

line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 19:   return a:output_dic
<SNR>124_extend_global returning {'links_header_level': 1, 'tags_header...er'}, 'menu': 'Vimwiki', 'folding': ''}

continuing in <SNR>124_read_global_settings_from_user

line 7: 
line 8:   " Validate some settings individually
line 9:   let key = 'diary_months'
line 10:   let users_value = g:vimwiki_global_vars[key]
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 19: 
line 20:   let key = 'ext2syntax'
line 21:   let users_value = g:vimwiki_global_vars[key]
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
<SNR>124_read_global_settings_from_user returning #0

continuing in <SNR>124_populate_global_variables

line 4:   call s:normalize_global_settings()
calling <SNR>124_normalize_global_settings()

line 1:   " Normalize user global settings
line 2:   " Called: s:populate_global_variables
line 3:   let keys = keys(g:vimwiki_global_vars.ext2syntax)
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 19: 
line 20:   " ensure key_mappings dictionary has all required keys
line 21:   if !has_key(g:vimwiki_global_vars.key_mappings, 'all_maps')
line 22:     let g:vimwiki_global_vars.key_mappings.all_maps = 1
line 23:   endif
line 24:   if !has_key(g:vimwiki_global_vars.key_mappings, 'global')
line 25:     let g:vimwiki_global_vars.key_mappings.global = 1
line 26:   endif
line 27:   if !has_key(g:vimwiki_global_vars.key_mappings, 'headers')
line 28:     let g:vimwiki_global_vars.key_mappings.headers = 1
line 29:   endif
line 30:   if !has_key(g:vimwiki_global_vars.key_mappings, 'text_objs')
line 31:     let g:vimwiki_global_vars.key_mappings.text_objs = 1
line 32:   endif
line 33:   if !has_key(g:vimwiki_global_vars.key_mappings, 'table_format')
line 34:     let g:vimwiki_global_vars.key_mappings.table_format = 1
line 35:   endif
line 36:   if !has_key(g:vimwiki_global_vars.key_mappings, 'table_mappings')
line 37:     let g:vimwiki_global_vars.key_mappings.table_mappings = 1
line 38:   endif
line 39:   if !has_key(g:vimwiki_global_vars.key_mappings, 'lists')
line 40:     let g:vimwiki_global_vars.key_mappings.lists = 1
line 41:   endif
line 42:   if !has_key(g:vimwiki_global_vars.key_mappings, 'lists_return')
line 43:     let g:vimwiki_global_vars.key_mappings.lists_return = 1
line 44:   endif
line 45:   if !has_key(g:vimwiki_global_vars.key_mappings, 'links')
line 46:     let g:vimwiki_global_vars.key_mappings.links = 1
line 47:   endif
line 48:   if !has_key(g:vimwiki_global_vars.key_mappings, 'html')
line 49:     let g:vimwiki_global_vars.key_mappings.html = 1
line 50:   endif
line 51:   if !has_key(g:vimwiki_global_vars.key_mappings, 'mouse')
line 52:     let g:vimwiki_global_vars.key_mappings.mouse = 0
line 53:   endif
line 54: 
line 55:   " disable all key mappings if all_maps == 0
line 56:   if !g:vimwiki_global_vars.key_mappings.all_maps
line 57:     let g:vimwiki_global_vars.key_mappings.global = 0
line 58:     let g:vimwiki_global_vars.key_mappings.headers = 0
line 59:     let g:vimwiki_global_vars.key_mappings.text_objs = 0
line 60:     let g:vimwiki_global_vars.key_mappings.table_format = 0
line 61:     let g:vimwiki_global_vars.key_mappings.table_mappings = 0
line 62:     let g:vimwiki_global_vars.table_mappings = 0 " kept for backwards compatibility
line 63:     let g:vimwiki_global_vars.key_mappings.lists = 0
line 64:     let g:vimwiki_global_vars.key_mappings.lists_return = 0
line 65:     let g:vimwiki_global_vars.key_mappings.links = 0
line 66:     let g:vimwiki_global_vars.key_mappings.html = 0
line 67:     let g:vimwiki_global_vars.key_mappings.mouse = 0
line 68:     let g:vimwiki_global_vars.use_mouse = 0 " kept for backwards compatibility
line 69:   endif
line 70: 
line 71:   " TODO remove these checks and the table_mappings and use_mouse variables
line 72:   " backwards compatibility checks
line 73:   " if the old option isn't its default value then overwrite the new option
line 74:   if g:vimwiki_global_vars.table_mappings == 0 && g:vimwiki_global_vars.key_mappings.table_mappings == 0
line 75:     let g:vimwiki_global_vars.key_mappings.table_mappings = 0
line 76:   endif
line 77:   if g:vimwiki_global_vars.use_mouse == 1 && g:vimwiki_global_vars.key_mappings.mouse == 0
line 78:     let g:vimwiki_global_vars.key_mappings.mouse = 1
line 79:   endif
<SNR>124_normalize_global_settings returning #0

continuing in <SNR>124_populate_global_variables

line 5:   call s:internal_global_settings()
calling <SNR>124_internal_global_settings()

line 1:   " Declare: normalized settings -> more usefull variables to use internally
line 2:   " non-configurable global variables:
line 3: 
line 4:   " Scheme regexes must be defined even if syntax file is not loaded yet cause users should be
line 5:   " able to <leader>w<leader>w without opening any vimwiki file first
line 6: 
line 7:   " Know internal schemes
line 8: 
line 9:   let g:vimwiki_global_vars.schemes_web = join(vimwiki#vars#get_global('schemes_web'), '\|')
calling vimwiki#vars#get_global('schemes_web')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ['http', 'https', 'file', 'ftp', 'goph...ish', 'sftp', 'thunderlink', 'message']

continuing in <SNR>124_internal_global_settings

line 11:   let g:vimwiki_global_vars.schemes_any = join(vimwiki#vars#get_global('schemes_any'), '\|')
calling vimwiki#vars#get_global('schemes_any')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ['mailto', 'matrix', 'news', 'xmpp', 'sip', 'sips', 'doi', 'urn', 'tel', 'data']

continuing in <SNR>124_internal_global_settings

line 13:   let g:vimwiki_global_vars.schemes_local = join(['wiki\d\+', 'diary', 'local'], '\|')
line 15: 
line 16:   " Concatenate known schemes => regex
line 17:   let g:vimwiki_global_vars.rxSchemes = '\%('. g:vimwiki_global_vars.schemes_local . '\|'. g:vimwiki_global_vars.schemes_web . '\|'. g:vimwiki_global_vars.schemes_any . '\)'
line 22: 
line 23:   " Match URL for common protocols; see http://en.wikipedia.org/wiki/URI_scheme
line 24:   " http://tools.ietf.org/html/rfc3986
line 25:   let rxWebProtocols = '\%('. '\%('. '\%('. g:vimwiki_global_vars.schemes_web . '\):'. '\%(//\)'. '\)'. '\|'. '\%('. g:vimwiki_global_vars.schemes_any .'\):'. '\)'
line 34:   let g:vimwiki_global_vars.rxWeblinkUrl = rxWebProtocols . '\S\{-1,}'. '\%(([^ \t()]*)\)\='
line 35: 
line 36:   let wikilink_prefix = '[['
line 37:   let wikilink_suffix = ']]'
line 38:   let wikilink_separator = '|'
line 39:   let g:vimwiki_global_vars.rx_wikilink_prefix = vimwiki#u#escape(wikilink_prefix)
Searching for "autoload/vimwiki/u.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/u.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/u.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/u.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/u.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 39: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/u.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Description: Utility functions
line 4: " Home: https://github.com/vimwiki/vimwiki/
line 5: 
line 6: function! vimwiki#u#echo(msg, ...) abort
line 29: 
line 30: function! vimwiki#u#debug(msg) abort
line 38: 
line 39: function! vimwiki#u#warn(msg) abort
line 43: 
line 44: function! vimwiki#u#error(msg) abort
line 48: 
line 49: function! vimwiki#u#deprecate(old, new) abort
line 54: 
line 55: function! vimwiki#u#get_selection(...) abort
line 102: 
line 103: 
line 104: function! vimwiki#u#count_exe(cmd) abort
line 111: 
line 112: 
line 113: function! vimwiki#u#sort_len(list) abort
line 121: 
line 122: 
line 123: function! vimwiki#u#trim(string, ...) abort
line 135: 
line 136: 
line 137: function! vimwiki#u#cursor(lnum, cnum) abort
line 142: 
line 143: 
line 144: function! vimwiki#u#os_name() abort
line 154: 
line 155: 
line 156: function! vimwiki#u#is_windows() abort
line 160: 
line 161: 
line 162: function! vimwiki#u#is_macos() abort
line 171: 
line 172: 
line 173: function! vimwiki#u#count_first_sym(line) abort
line 177: 
line 178: 
line 179: function! vimwiki#u#escape(string) abort
line 183: 
line 184: 
line 185: function! vimwiki#u#reload_regexes() abort
line 189: 
line 190: 
line 191: function! vimwiki#u#reload_regexes_custom() abort
line 195: 
line 196: 
line 197: function! vimwiki#u#sw() abort
line 205: 
line 206: function! vimwiki#u#map_key(mode, key, plug, ...) abort
line 229: 
line 230: 
line 231: function! vimwiki#u#is_codeblock(lnum) abort
line 244: 
line 245: function! vimwiki#u#ft_set() abort
line 256: 
line 257: function! vimwiki#u#ft_is_vw() abort
line 270: 
line 271: 
line 272: function! vimwiki#u#get_syntax_dic(...) abort
line 278: 
line 279: 
line 280: function! vimwiki#u#get_punctuation_regex() abort
line 293: 
line 294: 
line 295: function! vimwiki#u#get_punctuation_string() abort
line 302: 
line 303: 
line 304: function! vimwiki#u#hi_expand_regex(lst) abort
line 368: 
line 369: 
line 370: function! vimwiki#u#hi_tag(tag_pre, tag_post, syntax_group, contains, ...) abort
line 399: 
line 400: 
line 401: function! vimwiki#u#hi_typeface(dic) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/u.vim
continuing in <SNR>124_internal_global_settings
calling vimwiki#u#escape('[[')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\[\['

continuing in <SNR>124_internal_global_settings

line 40:   let g:vimwiki_global_vars.rx_wikilink_suffix = vimwiki#u#escape(wikilink_suffix)
calling vimwiki#u#escape(']]')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\]\]'

continuing in <SNR>124_internal_global_settings

line 41:   let g:vimwiki_global_vars.rx_wikilink_separator = vimwiki#u#escape(wikilink_separator)
calling vimwiki#u#escape('|')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '|'

continuing in <SNR>124_internal_global_settings

line 42: 
line 43:   " templates for the creation of wiki links
line 44:   " [[URL]]
line 45:   let g:vimwiki_global_vars.WikiLinkTemplate1 = wikilink_prefix . '__LinkUrl__'. wikilink_suffix
line 46:   " [[URL|DESCRIPTION]]
line 47:   let g:vimwiki_global_vars.WikiLinkTemplate2 = wikilink_prefix . '__LinkUrl__'. wikilink_separator . '__LinkDescription__' . wikilink_suffix
line 49: 
line 50:   let valid_chars = '[^\\\]]'
line 51:   let g:vimwiki_global_vars.rxWikiLinkUrl = valid_chars.'\{-}'
line 52:   let g:vimwiki_global_vars.rxWikiLinkDescr = valid_chars.'\{-}'
line 53: 
line 54:   " this regexp defines what can form a link when the user presses <CR> in the
line 55:   " buffer (and not on a link) to create a link
line 56:   " basically, it's Ascii alphanumeric characters plus #|./@-_~ plus all
line 57:   " non-Ascii characters, except that . is not accepted as the last character
line 58:   " TODO look behind for . reduces the second part of the regex that is the same with '.' added
line 59:   let g:vimwiki_global_vars.rxWord = '[^[:blank:]!"$%&''()*+,:;<=>?\[\]\\^`{}]*[^[:blank:]!"$%&''()*+.,:;<=>?\[\]\\^`{}]'
line 60: 
line 61:   let g:vimwiki_global_vars.rx_wikilink_prefix1 = g:vimwiki_global_vars.rx_wikilink_prefix . g:vimwiki_global_vars.rxWikiLinkUrl . g:vimwiki_global_vars.rx_wikilink_separator
line 63:   let g:vimwiki_global_vars.rx_wikilink_suffix1 = g:vimwiki_global_vars.rx_wikilink_suffix
line 64: 
line 65:   let g:vimwiki_global_vars.rxWikiInclPrefix = '{{'
line 66:   let g:vimwiki_global_vars.rxWikiInclSuffix = '}}'
line 67:   let g:vimwiki_global_vars.rxWikiInclSeparator = '|'
line 68:   " '{{__LinkUrl__}}'
line 69:   let g:vimwiki_global_vars.WikiInclTemplate1 = g:vimwiki_global_vars.rxWikiInclPrefix .'__LinkUrl__'. g:vimwiki_global_vars.rxWikiInclSuffix
line 71:   " '{{__LinkUrl____LinkDescription__}}'
line 72:   let g:vimwiki_global_vars.WikiInclTemplate2 = g:vimwiki_global_vars.rxWikiInclPrefix . '__LinkUrl__' . g:vimwiki_global_vars.rxWikiInclSeparator . '__LinkDescription__' . g:vimwiki_global_vars.rxWikiInclSuffix
line 75: 
line 76:   let valid_chars = '[^\\\}]'
line 77:   let g:vimwiki_global_vars.rxWikiInclUrl = valid_chars.'\{-}'
line 78:   let g:vimwiki_global_vars.rxWikiInclArg = valid_chars.'\{-}'
line 79:   let g:vimwiki_global_vars.rxWikiInclArgs = '\%('. g:vimwiki_global_vars.rxWikiInclSeparator. g:vimwiki_global_vars.rxWikiInclArg. '\)'.'\{-}'
line 81: 
line 82:   " *. {{URL}[{...}]}  - i.e.  {{URL}}, {{URL|ARG1}}, {{URL|ARG1|ARG2}}, etc.
line 83:   " *a) match {{URL}[{...}]}
line 84:   let g:vimwiki_global_vars.rxWikiIncl = g:vimwiki_global_vars.rxWikiInclPrefix. g:vimwiki_global_vars.rxWikiInclUrl. g:vimwiki_global_vars.rxWikiInclArgs. g:vimwiki_global_vars.rxWikiInclSuffix
line 87:   " *b) match URL within {{URL}[{...}]}
line 88:   let g:vimwiki_global_vars.rxWikiInclMatchUrl = g:vimwiki_global_vars.rxWikiInclPrefix. '\zs'. g:vimwiki_global_vars.rxWikiInclUrl . '\ze'. g:vimwiki_global_vars.rxWikiInclArgs . g:vimwiki_global_vars.rxWikiInclSuffix
line 91: 
line 92:   let g:vimwiki_global_vars.rxWikiInclPrefix1 = g:vimwiki_global_vars.rxWikiInclPrefix. g:vimwiki_global_vars.rxWikiInclUrl . g:vimwiki_global_vars.rxWikiInclSeparator
line 94:   let g:vimwiki_global_vars.rxWikiInclSuffix1 = g:vimwiki_global_vars.rxWikiInclArgs. g:vimwiki_global_vars.rxWikiInclSuffix
line 96: 
line 97:   " default colors when headers of different levels are highlighted differently
line 98:   " not making it yet another option; needed by ColorScheme autocommand
line 99:   let g:vimwiki_global_vars.hcolor_guifg_light = ['#aa5858', '#507030', '#1030a0', '#103040' , '#505050', '#636363']
line 101:   let g:vimwiki_global_vars.hcolor_ctermfg_light = ['DarkRed', 'DarkGreen', 'DarkBlue', 'Black' , 'Black', 'Black']
line 103:   let g:vimwiki_global_vars.hcolor_guifg_dark = ['#e08090', '#80e090', '#6090e0', '#c0c0f0' , '#e0e0f0', '#f0f0f0']
line 105:   let g:vimwiki_global_vars.hcolor_ctermfg_dark = ['Red', 'Green', 'Blue', 'White', 'White' , 'White']
<SNR>124_internal_global_settings returning #0

continuing in <SNR>124_populate_global_variables

<SNR>124_populate_global_variables returning #0

continuing in vimwiki#vars#init

line 5: 
line 6:   " Init && Populate: local variable container
line 7:   let g:vimwiki_wikilocal_vars = []
line 8:   call s:populate_wikilocal_options()
calling <SNR>124_populate_wikilocal_options()

line 1:   " Populate local variable <- user & default
line 2:   " Called: s:vimwiki#vars#init
line 3:   " Retrieve default
line 4:   let default_dic = s:get_default_wikilocal()
calling <SNR>124_get_default_wikilocal()

line 1:   " Get default wikilocal values
line 2:   " Please: keep alphabetical sort
line 3:   " Build color_tag_template regular expression
line 4:   " Must be coherent with VimwikiColorize
line 5:   let fg = 'color\s*:\s*__COLORFG__\s*;\s*'
line 6:   let bg = 'background\s*:\s*__COLORBG__\s*;\s*'
line 7:   let color_tag_rx = '<span \s*style\s*=\s*"\s*\(' . fg . bg . '\|' . fg . '\|' . bg . '\)"\s*>__CONTENT__<\/span>'
line 10:   return { 'auto_diary_index': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_export': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_generate_links': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_generate_tags': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_tags': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_toc': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'automatic_nested_syntaxes': {'type': type(0), 'default': 1, 'min': 0, 'max': 1}, 'base_url': {'type': type(''), 'default': '', 'min_length': 1}, 'bullet_types': {'type': type([]), 'default': []}, 'color_dic': {'type': type({}), 'default': {   'default': ['', '#d79921'],   'red': ['#cc241d', ''],   'bred': ['', '#cc241d'],   'green': ['#98971a', ''],   'bgreen': ['', '#98971a'],   'yellow': ['#d79921', ''],   'byellow': ['', '#d79921'],   'blue': ['#458588', ''],   'bblue': ['', '#458588'],   'purple': ['#b16286', ''],   'bpurple': ['', '#b16286'],   'orange': ['#d65d0e', ''
calling vimwiki#vars#get_global('listsym_rejected')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '-'

continuing in <SNR>124_get_default_wikilocal

calling vimwiki#vars#get_global('listsyms')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ' ✓'

continuing in <SNR>124_get_default_wikilocal

<SNR>124_get_default_wikilocal returning {'auto_tags': {'min': 0, 'max': 1, 'ty... '[^:''[:space:]]\+', 'pre': '^\|\s'}}}

continuing in <SNR>124_populate_wikilocal_options

line 5: 
line 6:   " Extend from global setting
line 7:   let global_wiki_dic = s:extend_global({}, default_dic)
calling <SNR>124_extend_global({}, {'auto_tags': {'min': 0, 'max': 1, 'ty... '[^:''[:space:]]\+', 'pre': '^\|\s'}}})

line 1:   " Extend global dictionary <- default <- user
line 2:   " Note: user_dic is unused here because it comes from g:vimwiki_* vars
line 3:   " Copy the user's settings from variables of the form g:vimwiki_<option> into the dict
line 4:   " g:vimwiki_global_vars (or set a default value)
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
calling <SNR>124_check_users_value('listsyms', ' ✓', {'type': 1, 'default': ' ✓'}, 1)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>124_check_users_value returning #0

continuing in <SNR>124_extend_global

line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
calling <SNR>124_update_key({'maxhi': 0, 'css_name': 'style.css', ...ms': 10, 'list_margin': -1, 'name': ''}, 'listsyms', ' ✓', ' ✓')

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>124_update_key returning #0

continuing in <SNR>124_extend_global

line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 19:   return a:output_dic
<SNR>124_extend_global returning {'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'}

continuing in <SNR>124_populate_wikilocal_options

line 8: 
line 9:   " Extend from g:vimwiki_list
line 10:   if !exists('g:vimwiki_list')
line 11:     " if the user hasn't registered any wiki, we register one wiki using the default values
line 12:     let new_wiki_dic = deepcopy(global_wiki_dic)
line 13:     let new_wiki_dic.is_temporary_wiki = 0
line 14:     call add(g:vimwiki_wikilocal_vars, new_wiki_dic)
line 15:   else
line 16:     for user_dic in g:vimwiki_list
line 17:       let new_wiki_dic = s:extend_local({}, default_dic, global_wiki_dic, user_dic)
calling <SNR>124_extend_local({}, {'auto_tags': {'min': 0, 'max': 1, 'ty... '[^:''[:space:]]\+', 'pre': '^\|\s'}}}, {'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'}, {'path': '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki'})

line 1:   " Extend syntaxlocal dictionary <- global <- user (default for type check)
line 2:   " IDEA: can work lazily and not on all wikis at first call
line 3:   " IDEA: have a special variable for wikitmp
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
calling <SNR>124_check_users_value('path', '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki', {'min_length': 1, 'type': 1, 'default': '/Users/christopher.griffith/vimwiki/'}, 0)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>124_check_users_value returning #0

continuing in <SNR>124_extend_local

line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
calling <SNR>124_update_key({'nested_syntaxes': {}, 'auto_tags': 0...ion_level': 0, 'auto_generate_tags': 0}, 'path', '/Users/christopher.griffith/vimwiki/', '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>124_update_key returning #0

continuing in <SNR>124_extend_local

line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 13:   return a:output_dic
<SNR>124_extend_local returning {'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'}

continuing in <SNR>124_populate_wikilocal_options

line 18:       let new_wiki_dic.is_temporary_wiki = 0
line 19:       call add(g:vimwiki_wikilocal_vars, new_wiki_dic)
line 20:     endfor
line 16:     for user_dic in g:vimwiki_list
line 17:       let new_wiki_dic = s:extend_local({}, default_dic, global_wiki_dic, user_dic)
line 18:       let new_wiki_dic.is_temporary_wiki = 0
line 19:       call add(g:vimwiki_wikilocal_vars, new_wiki_dic)
line 20:     endfor
line 21:   endif
line 22: 
line 23:   " Set default values for temporary wikis
line 24:   let temp_dic = deepcopy(global_wiki_dic)
line 25:   let temp_dic.is_temporary_wiki = 1
line 26:   call add(g:vimwiki_wikilocal_vars, temp_dic)
line 27: 
line 28:   " Normalize and leave
line 29:   call s:normalize_wikilocal_settings()
calling <SNR>124_normalize_wikilocal_settings()

line 1:   " Normalize local settings
line 2:   for wiki_settings in g:vimwiki_wikilocal_vars
line 3:     " Check some values individually
line 4:     """"""""""""""""""""""""""""""""
line 5:     " Treat lists
line 6:     " TODO remove me: I am syntaxlocal
line 7:     if !has_key(wiki_settings, 'bullet_types') || len(wiki_settings.bullet_types) == 0
line 8:       let wiki_settings.bullet_types = vimwiki#vars#get_syntaxlocal('bullet_types', wiki_settings.syntax)
calling vimwiki#vars#get_syntaxlocal('bullet_types', 'default')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
calling vimwiki#vars#populate_syntax_vars('default')

line 1:   " Populate syntax variable
line 2:   " Exported: syntax/vimwiki.vim
line 3:   " TODO refactor <= too big function
line 4:   " TODO permit user conf in some var like g:vimwiki_syntaxlocal_vars
line 5:   " TODO internalize match and search (header and bold)
line 6:   " Create is not exists
line 7:   if !exists('g:vimwiki_syntaxlocal_vars')
line 8:     let g:vimwiki_syntaxlocal_vars = {}
line 9:   endif
line 10: 
line 11:   " Clause: leave if already filled
line 12:   if has_key(g:vimwiki_syntaxlocal_vars, a:syntax)
line 13:     return
line 14:   endif
line 15: 
line 16:   " Init internal dic
line 17:   let g:vimwiki_syntaxlocal_vars[a:syntax] = {}
line 18:   let syntax_dic = g:vimwiki_syntaxlocal_vars[a:syntax]
line 19: 
line 20:   " Get default dic
line 21:   let default_dic = extend({}, function('s:get_' . a:syntax . '_syntaxlocal')())
calling <SNR>124_get_default_syntaxlocal()

line 1:   " Get default syntaxlocal variable dictionary
line 2:   " type, default, min, max, possible_values, min_length
line 3: 
line 4:   return extend(s:get_common_syntaxlocal(), { 'blockquote_markers': {'type': type([]), 'default': ['>', '::']}, 'bold_match': {'type': type(''), 'default': '\%(^\|\s\|[[:punct:]]\)\@<=\*__Text__\*\%([[:punct:]]\|\s\|$\)\@='}, 'bold_search': {'type': type(''), 'default': '\%(^\|\s\|[[:punct:]]\)\@<=\*\zs\%([^*`[:space:]][^*`]*[^*`[:space:]]\|[^*`[:space:]]\)\ze\*\%([[:punct:]]\|\s\|$\)\@='}, 'bullet_types': {'type': type([]), 'default': ['-', '*', '#']}, 'header_match': {'type': type(''), 'default': '^\s*\(=\{1,6}\)=\@!\s*__Header__\s*\1=\@!\s*$'}, 'header_search': {'type': type(''), 'default': '^\s*\(=\{1,6}\)\([^=].*[^=]\)\1\s*$'}, 'list_markers': {'type': type([]), 'default': ['-', '1.', '*', 'I)', 'a)']}, 'number_types': {'type': type([]), 'default': ['1)', '1.', 'i)', 'I)', 'a)', 'A)']}, 'recurring_bullets': {'type': type(0), 'default': 0}, 'header_symbol': {'type': type(''), 'default': '='}, 'rxHR': {'type': type(''), 'default': '^-----*$'}, 'rxListDefine': {'type': type(''), 'default': '::\(\s\|
calling <SNR>124_get_common_syntaxlocal()

line 1:   let res = {}
line 2: 
line 3:   " Declare helper: a line with only --- or ...
line 4:   let rx_yaml_start_pre = '\%(^\%(\%1l\|^$\n\)\@<=\)'
line 5:   let rx_yaml_start_post = '\%(\%(\n^$\)\@!$\)'
line 6:   let rx_yaml_start = rx_yaml_start_pre . '---' . rx_yaml_start_post
line 7:   let rx_yaml_end = '^\%(---\|\.\.\.\)\s*$'
line 8: 
line 9:   let res.nested_extended = {'type': type(''), 'default': 'VimwikiError,VimwikiPre,VimwikiCode,VimwikiEqIn,VimwikiSuperScript,VimwikiSubScript,textSnipTEX'}
line 10:   let res.nested_typeface = {'type': type(''), 'default': 'VimwikiBold,VimwikiItalic,VimwikiUnderline,VimwikiDelText'}
line 11:   let res.nested = {'type': type(''), 'default': res.nested_extended.default . ',' . res.nested_typeface.default}
line 12:   let res.rxTableSep = {'type': type(''), 'default': '|'}
line 13:   " See issue #1287
line 14:   let res.yaml_metadata_block = {'type': type([]), 'default': [[rx_yaml_start, rx_yaml_end]]}
line 15: 
line 16:   " Declare helper for inline math nested variable
line 17:   let s:rx_inline_math_start = '\%(^\|[^$\\]\)\@<=\$\%($\|[^$[:space:]]\)\@='
line 18:   let s:rx_inline_math_end   = '\%(^\|[^$\\[:space:]]\)\@<=\$\%($\|[^$0-9]\)\@='
line 19: 
line 20:   " Blockquote marker (#1274)
line 21:   " -- it should not be changed but let's avoid hardcoding
line 22:   let res.blockquote_markers = {'type': type([]), 'default': ['>']}
line 23: 
line 24:   " HTML comment
line 25:   let res.comment_regex = {'type': type(''), 'default': '\%(^\s*%%.*$\|<!--\%([^>]\|\n\)*-->\)'}
line 26: 
line 27:   return res
<SNR>124_get_common_syntaxlocal returning {'nested': {'type': 1, 'default': 'Vim...arkers': {'type': 3, 'default': ['>']}}

continuing in <SNR>124_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([['\*', '\*', '[*]', 0]])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning [['\%(\%(^\|\%(\\\|\\\@<![*]\)\@<!\)\z...()+,-./:;<=>?@\[\\\]^`{}|~]\)\@=\)\)']]

continuing in <SNR>124_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([['_', '_', '[_]', 0]])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning [['\%(\%(^\|\%(\\\|\\\@<![_]\)\@<!\)\z...()+,-./:;<=>?@\[\\\]^`{}|~]\)\@=\)\)']]

continuing in <SNR>124_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning []

continuing in <SNR>124_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([['\*_', '_\*', '[*_]', 1], ['_\*', '\*_', '[*_]', 1]])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning [['\%(\%(^\|\%(\\\|\\\@<![*_]\)\@<!\)\...()+,-./:;<=>?@\[\\\]^`{}|~]\)\@=\)\)']]

continuing in <SNR>124_get_default_syntaxlocal

<SNR>124_get_default_syntaxlocal returning {'header_search': {'type': 1, 'default...': {'type': 3, 'default': ['>', '::']}}

continuing in vimwiki#vars#populate_syntax_vars

line 22: 
line 23:   " Extend <- default <- user global
line 24:   call s:extend_global(syntax_dic, default_dic)
calling <SNR>124_extend_global({}, {'header_search': {'type': 1, 'default... {'type': 1, 'default': '::\(\s\|$\)'}})

line 1:   " Extend global dictionary <- default <- user
line 2:   " Note: user_dic is unused here because it comes from g:vimwiki_* vars
line 3:   " Copy the user's settings from variables of the form g:vimwiki_<option> into the dict
line 4:   " g:vimwiki_global_vars (or set a default value)
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 19:   return a:output_dic
<SNR>124_extend_global returning {'header_search': '^\s*\(=\{1,6}\)\([^...^$\)\@!$\)', '^\%(---\|\.\.\.\)\s*$']]}

continuing in vimwiki#vars#populate_syntax_vars

line 25:   " Extend <- user wikilocal
line 26:   let wikilocal = g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
line 10:   elseif a:key ==# 'wiki_nr'
line 11:     call setbufvar(buffer, 'vimwiki_wiki_nr', vimwiki#base#find_wiki(expand('%:p')))
Searching for "autoload/vimwiki/base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Desc: Basic functionality
line 4: " Called by plugin/vimwiki.vim and ftplugin/vimwiki.vim
line 5: " by global and vimwiki local map and commands
line 6: " Home: https://github.com/vimwiki/vimwiki/
line 7: 
line 8: " Clause: load only once
line 9: if exists('g:loaded_vimwiki_auto') || &compatible
line 10:   finish
line 11: endif
line 12: let g:loaded_vimwiki_auto = 1
line 13: 
line 14: 
line 15: let g:vimwiki_max_scan_for_caption = 5
line 16: 
line 17: 
line 18: function! s:safesubstitute(text, search, replace, mode) abort
line 23: 
line 24: 
line 25: function! s:vimwiki_get_known_syntaxes() abort
line 40: 
line 41: 
line 42: function! vimwiki#base#file_pattern(files) abort
line 51: 
line 52: 
line 53: function! vimwiki#base#subdir(path, filename) abort
line 83: 
line 84: 
line 85: function! vimwiki#base#current_subdir() abort
line 89: 
line 90: 
line 91: function! vimwiki#base#invsubdir(subdir) abort
line 95: 
line 96: 
line 97: function! vimwiki#base#find_wiki(path) abort
line 118: 
line 119: 
line 120: function! s:is_wiki_link(link_infos) abort
line 124: 
line 125: 
line 126: function! vimwiki#base#resolve_link(link_text, ...) abort
line 298: 
line 299: 
line 300: function! vimwiki#base#system_open_link(url) abort
line 352: 
line 353: 
line 354: function! vimwiki#base#open_link(cmd, link, ...) abort
line 395: 
line 396: 
line 397: function! vimwiki#base#nop1(stg) abort
line 401: 
line 402: 
line 403: function! vimwiki#base#get_globlinks_escaped(...) abort
line 409: 
line 410: 
line 411: function! vimwiki#base#get_globlinks_raw(...) abort
line 417: 
line 418: 
line 419: function! vimwiki#base#get_globlinks_callback(callback, ...) abort
line 446: 
line 447: 
line 448: function! vimwiki#base#generate_links(create, ...) abort
line 514: 
line 515: 
line 516: function! vimwiki#base#goto(...) abort
line 538: 
line 539: 
line 540: function! vimwiki#base#backlinks() abort
line 572: 
line 573: 
line 574: function! vimwiki#base#find_files(wiki_nr, directories_only, ...) abort
line 613: 
line 614: 
line 615: function! vimwiki#base#get_wikilinks(wiki_nr, also_absolute_links, pattern) abort
line 649: 
line 650: 
line 651: function! vimwiki#base#get_wiki_directories(wiki_nr) abort
line 671: 
line 672: 
line 673: function! vimwiki#base#get_anchors(filename, syntax) abort
line 752: 
line 753: 
line 754: function! vimwiki#base#normalize_anchor(anchor, ...) abort
line 799: 
line 800: 
line 801: function! vimwiki#base#unnormalize_anchor(anchor) abort
line 876: 
line 877: 
line 878: function! s:jump_to_anchor(anchor) abort
line 902: 
line 903: 
line 904: function! s:jump_to_segment(segment, segment_norm_re, segment_nb) abort
line 968: 
line 969: 
line 970: function! s:get_links(wikifile, idx) abort
line 1015: 
line 1016: 
line 1017: function! vimwiki#base#check_links(range, line1, line2) abort
line 1128: 
line 1129: 
line 1130: function! vimwiki#base#edit_file(command, filename, anchor, ...) abort
line 1184: 
line 1185: 
line 1186: function! vimwiki#base#search_word(wikiRX, flags) abort
line 1194: 
line 1195: 
line 1196: function! vimwiki#base#matchstr_at_cursor(wikiRX) abort
line 1218: 
line 1219: 
line 1220: function! vimwiki#base#replacestr_at_cursor(wikiRX, sub) abort
line 1247: 
line 1248: 
line 1249: function! s:print_wiki_list() abort
line 1283: 
line 1284: 
line 1285: function! s:update_wiki_link(fname, old, new) abort
line 1307: 
line 1308: 
line 1309: function! s:update_wiki_links(wiki_nr, dir, old_url, new_url) abort
line 1390: 
line 1391: 
line 1392: function! s:tail_name(fname) abort
line 1400: 
line 1401: 
line 1402: function! s:get_wiki_buffers() abort
line 1421: 
line 1422: 
line 1423: function! s:open_wiki_buffer(item) abort
line 1431: 
line 1432: 
line 1433: function! vimwiki#base#nested_syntax(filetype, start, end, textSnipHl) abort
line 1498: 
line 1499: 
line 1500: function! vimwiki#base#update_listing_in_buffer(Generator, start_header, content_regex, default_lnum, header_level, create) abort
line 1632: 
line 1633: 
line 1634: function! vimwiki#base#find_next_task() abort
line 1640: 
line 1641: 
line 1642: function! vimwiki#base#find_next_link() abort
line 1646: 
line 1647: 
line 1648: function! vimwiki#base#find_prev_link() abort
line 1657: 
line 1658: 
line 1659: function! vimwiki#base#follow_link(split, ...) abort
line 1761: 
line 1762: 
line 1763: function! vimwiki#base#go_back_link() abort
line 1790: 
line 1791: 
line 1792: function! vimwiki#base#goto_index(wnum, ...) abort
line 1827: 
line 1828: 
line 1829: function! vimwiki#base#delete_link() abort
line 1852: 
line 1853: 
line 1854: function! s:input_rename_file() abort
line 1885: 
line 1886: 
line 1887: function! vimwiki#base#rename_file(...) abort
line 2008: 
line 2009: 
line 2010: function! vimwiki#base#ui_select() abort
line 2024: 
line 2025: 
line 2026: function! vimwiki#base#TO_header(inner, including_subheaders, count) abort
line 2078: 
line 2079: 
line 2080: function! vimwiki#base#TO_table_cell(inner, visual) abort
line 2144: 
line 2145: 
line 2146: function! vimwiki#base#TO_table_col(inner, visual) abort
line 2260: 
line 2261: 
line 2262: function! vimwiki#base#AddHeaderLevel(...) abort
line 2294: 
line 2295: 
line 2296: function! vimwiki#base#RemoveHeaderLevel(...) abort
line 2333: 
line 2334: 
line 2335: function! vimwiki#base#collect_headers() abort
line 2392: 
line 2393: 
line 2394: function! s:current_header(headers, line_number) abort
line 2411: 
line 2412: 
line 2413: function! s:clean_header_text(h_text) abort
line 2427: 
line 2428: 
line 2429: function! s:get_another_header(headers, current_index, direction, operation) abort
line 2448: 
line 2449: 
line 2450: function! vimwiki#base#goto_parent_header() abort
line 2461: 
line 2462: 
line 2463: function! vimwiki#base#goto_next_header() abort
line 2475: 
line 2476: 
line 2477: function! vimwiki#base#goto_prev_header() abort
line 2491: 
line 2492: 
line 2493: function! vimwiki#base#goto_sibling(direction) abort
line 2506: 
line 2507: 
line 2508: function! vimwiki#base#table_of_contents(create) abort
line 2614: 
line 2615: 
line 2616: function! vimwiki#base#apply_template(template, rxUrl, rxDesc, rxStyle, rxExtension) abort
line 2638: 
line 2639: 
line 2640: function! s:clean_url(url) abort
line 2668: 
line 2669: 
line 2670: function! vimwiki#base#is_among_diary_files(filename, diary_file_paths) abort
line 2680: 
line 2681: 
line 2682: function! vimwiki#base#is_diary_file(filename, ...) abort
line 2706: 
line 2707: 
line 2708: function! vimwiki#base#normalize_link_helper(str, rxUrl, rxDesc, template) abort
line 2729: 
line 2730: 
line 2731: function! vimwiki#base#normalize_imagelink_helper(str, rxUrl, rxDesc, rxStyle, template) abort
line 2738: 
line 2739: 
line 2740: function! vimwiki#base#normalize_link_in_diary(lnk) abort
line 2776: 
line 2777: 
line 2778: function! s:normalize_link_syntax_n() abort
line 2825: 
line 2826: 
line 2827: function! s:normalize_link_syntax_v() abort
line 2860: 
line 2861: 
line 2862: function! vimwiki#base#normalize_link(is_visual_mode) abort
line 2877: 
line 2878: 
line 2879: function! vimwiki#base#detect_nested_syntax() abort
line 2891: 
line 2892: 
line 2893: function! vimwiki#base#complete_links_escaped(ArgLead, CmdLine, CursorPos) abort
line 2897: 
line 2898: 
line 2899: function! vimwiki#base#complete_links_raw(ArgLead, CmdLine, CursorPos) abort
line 2903: 
line 2904: 
line 2905: function! vimwiki#base#complete_file(ArgLead, CmdLine, CursorPos) abort
line 2920: 
line 2921: 
line 2922: function! vimwiki#base#read_caption(file) abort
line 2937: 
line 2938: 
line 2939: function! vimwiki#base#search(search_pattern) abort
line 2967: 
line 2968: function! s:get_title(match) abort
line 2992: 
line 2993: function! vimwiki#base#linkify() abort
line 3045: 
line 3046: 
line 3047: function! vimwiki#base#complete_colorize(ArgLead, CmdLine, CursorPos) abort
line 3053: 
line 3054: function! vimwiki#base#get_user_color(...) abort
line 3073: 
line 3074: function! vimwiki#base#colorize(...) range abort
line 3138: 
line 3139: " -------------------------------------------------------------------------
line 3140: " Load syntax-specific Wiki functionality
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
calling <SNR>126_vimwiki_get_known_syntaxes()

line 1:   " Get all vimwiki known syntaxes
line 2:   " Getting all syntaxes that different wikis could have
line 3:   let syntaxes = {}
line 4:   let syntaxes['default'] = 1
line 5:   for wiki_nr in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in <SNR>126_vimwiki_get_known_syntaxes

line 6:     let wiki_syntax = vimwiki#vars#get_wikilocal('syntax', wiki_nr)
calling vimwiki#vars#get_wikilocal('syntax', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning 'default'

continuing in <SNR>126_vimwiki_get_known_syntaxes

line 7:     let syntaxes[wiki_syntax] = 1
line 8:   endfor
line 5:   for wiki_nr in range(vimwiki#vars#number_of_wikis())
line 6:     let wiki_syntax = vimwiki#vars#get_wikilocal('syntax', wiki_nr)
line 7:     let syntaxes[wiki_syntax] = 1
line 8:   endfor
line 9:   " also consider the syntaxes from g:vimwiki_ext2syntax
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
calling vimwiki#vars#get_global('ext2syntax')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning {'.markdown': 'markdown', '.md': 'mark...kdn': 'markdown', '.mdown': 'markdown'}

continuing in <SNR>126_vimwiki_get_known_syntaxes

line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 13:   return keys(syntaxes)
<SNR>126_vimwiki_get_known_syntaxes returning ['media', 'markdown', 'default']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim

line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3142: runtime! autoload/vimwiki/media_base.vim
Searching for "autoload/vimwiki/media_base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/vimwiki/media_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/vimwiki/media_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/autoload/vimwiki/media_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/autoload/vimwiki/media_base.vim"
not found in runtime path: "autoload/vimwiki/media_base.vim"
line 3143: endfor
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3142: runtime! autoload/vimwiki/markdown_base.vim
Searching for "autoload/vimwiki/markdown_base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/markdown_base.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3142: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/markdown_base.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Description: Link functions for markdown syntax
line 4: " Home: https://github.com/vimwiki/vimwiki/
line 5: 
line 6: 
line 7: function! s:safesubstitute(text, search, replace, mode) abort
line 12: 
line 13: 
line 14: function! vimwiki#markdown_base#scan_reflinks() abort
line 35: 
line 36: 
line 37: function! vimwiki#markdown_base#open_reflink(link) abort
line 49: 
line 50: 
line 51: function! s:normalize_link_syntax_n() abort
line 110: 
line 111: 
line 112: function! vimwiki#markdown_base#normalize_link() abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/markdown_base.vim
continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/vimwiki/markdown_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/autoload/vimwiki/markdown_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/autoload/vimwiki/markdown_base.vim"
line 3143: endfor
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3142: runtime! autoload/vimwiki/default_base.vim
Searching for "autoload/vimwiki/default_base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/vimwiki/default_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/vimwiki/default_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/autoload/vimwiki/default_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/autoload/vimwiki/default_base.vim"
not found in runtime path: "autoload/vimwiki/default_base.vim"
line 3143: endfor
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3143: endfor
line 3144: " -------------------------------------------------------------------------
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim
continuing in vimwiki#vars#get_bufferlocal
calling vimwiki#base#find_wiki('')

line 1:   " Returns: the number of the wiki a file belongs to or -1 if it doesn't belong
line 2:   " to any registered wiki.
line 3:   " The path can be the full path or just the directory of the file
line 4:   let bestmatch = -1
line 5:   let bestlen = 0
line 6:   let path = vimwiki#path#path_norm(vimwiki#path#chomp_slash(a:path))
Searching for "autoload/vimwiki/path.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/path.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/path.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/path.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 6: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Description: Path manipulation functions
line 4: " Home: https://github.com/vimwiki/vimwiki/
line 5: 
line 6: 
line 7: 
line 8: function! s:unixify(path) abort
line 12: 
line 13: 
line 14: function! s:windowsify(path) abort
line 18: 
line 19: 
line 20: " Define: os specific path conversion
line 21: if vimwiki#u#is_windows()
calling vimwiki#u#is_windows()

line 1:   " Check if OS is windows
line 2:   return has('win32') || has('win64') || has('win95') || has('win16')
vimwiki#u#is_windows returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim

line 22:   function! s:osxify(path) abort
line 25: else
line 26:   function! s:osxify(path) abort
line 29: endif
line 30: 
line 31: 
line 32: function! vimwiki#path#chomp_slash(str) abort
line 36: 
line 37: 
line 38: " Define: path-compare function, either case-sensitive or not, depending on OS.
line 39: if vimwiki#u#is_windows()
calling vimwiki#u#is_windows()

line 1:   " Check if OS is windows
line 2:   return has('win32') || has('win64') || has('win95') || has('win16')
vimwiki#u#is_windows returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim

line 40:   function! vimwiki#path#is_equal(p1, p2) abort
line 43: else
line 44:   function! vimwiki#path#is_equal(p1, p2) abort
line 47: endif
line 48: 
line 49: 
line 50: function! vimwiki#path#normalize(path) abort
line 63: 
line 64: 
line 65: function! vimwiki#path#path_norm(path) abort
line 76: 
line 77: 
line 78: function! vimwiki#path#is_link_to_dir(link) abort
line 83: 
line 84: 
line 85: function! vimwiki#path#abs_path_of_link(link) abort
line 89: 
line 90: 
line 91: function! vimwiki#path#path_common_pfx(path1, path2) abort
line 108: 
line 109: 
line 110: function! vimwiki#path#wikify_path(path) abort
line 119: 
line 120: 
line 121: function! vimwiki#path#current_wiki_file() abort
line 125: 
line 126: 
line 127: function! vimwiki#path#relpath(dir, file) abort
line 169: 
line 170: 
line 171: function! vimwiki#path#mkdir(path, ...) abort
line 203: 
line 204: 
line 205: function! vimwiki#path#is_absolute(path) abort
line 222: 
line 223: 
line 224: 
line 225: function! s:get_wikifile_link(wikifile) abort
line 229: 
line 230: function! vimwiki#path#PasteLink(wikifile) abort
line 233: 
line 234: 
line 235: if vimwiki#u#is_windows()
calling vimwiki#u#is_windows()

line 1:   " Check if OS is windows
line 2:   return has('win32') || has('win64') || has('win95') || has('win16')
vimwiki#u#is_windows returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim

line 236:   " Combine: a directory and a file into one path, doesn't generate duplicate
line 237:   " path separator in case the directory is also having an ending / or \. This
line 238:   " is because on windows ~\vimwiki//.tags is invalid but ~\vimwiki/.tags is a
line 239:   " valid path.
line 240:   function! vimwiki#path#join_path(directory, file) abort
line 245: else
line 246:   function! vimwiki#path#join_path(directory, file) abort
line 251: endif
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim
continuing in vimwiki#base#find_wiki
calling vimwiki#path#chomp_slash('')

line 1:   " Remove Delimiter: of last path (slash or backslash)
line 2:   return substitute(a:str, '[/\\]\+$', '', '')
vimwiki#path#chomp_slash returning ''

continuing in vimwiki#base#find_wiki

calling vimwiki#path#path_norm('')

line 1:   " Normalize Path: \ -> / &&  /// -> / && resolve(symlinks)
line 2:   " return if scp
line 3:   if a:path =~# '^scp:' | return a:path | endif
line 3:  return a:path | endif
line 3:  endif
line 4:   " convert backslash to slash
line 5:   let path = substitute(a:path, '\', '/', 'g')
line 6:   " treat multiple consecutive slashes as one path separator
line 7:   let path = substitute(path, '/\+', '/', 'g')
line 8:   " ensure that we are not fooled by a symbolic link
line 9:   return resolve(path)
vimwiki#path#path_norm returning ''

continuing in vimwiki#base#find_wiki

line 7:   for idx in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in vimwiki#base#find_wiki

line 8:     let idx_path = expand(vimwiki#vars#get_wikilocal('path', idx))
calling vimwiki#vars#get_wikilocal('path', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki'

continuing in vimwiki#base#find_wiki

line 9:     let idx_path = vimwiki#path#path_norm(vimwiki#path#chomp_slash(idx_path))
calling vimwiki#path#chomp_slash('/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Remove Delimiter: of last path (slash or backslash)
line 2:   return substitute(a:str, '[/\\]\+$', '', '')
vimwiki#path#chomp_slash returning '/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki'

continuing in vimwiki#base#find_wiki

calling vimwiki#path#path_norm('/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Normalize Path: \ -> / &&  /// -> / && resolve(symlinks)
line 2:   " return if scp
line 3:   if a:path =~# '^scp:' | return a:path | endif
line 3:  return a:path | endif
line 3:  endif
line 4:   " convert backslash to slash
line 5:   let path = substitute(a:path, '\', '/', 'g')
line 6:   " treat multiple consecutive slashes as one path separator
line 7:   let path = substitute(path, '/\+', '/', 'g')
line 8:   " ensure that we are not fooled by a symbolic link
line 9:   return resolve(path)
vimwiki#path#path_norm returning '/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki'

continuing in vimwiki#base#find_wiki

line 10:     let common_pfx = vimwiki#path#path_common_pfx(idx_path, path)
calling vimwiki#path#path_common_pfx('/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki', '')

line 1:   " Returns: longest common path prefix of 2 given paths.
line 2:   " Ex: '~/home/usrname/wiki', '~/home/usrname/wiki/shmiki' => '~/home/usrname/wiki'
line 3:   let p1 = split(a:path1, '[/\\]', 1)
line 4:   let p2 = split(a:path2, '[/\\]', 1)
line 5: 
line 6:   let idx = 0
line 7:   let minlen = min([len(p1), len(p2)])
line 8:   while (idx < minlen) && vimwiki#path#is_equal(p1[idx], p2[idx])
calling vimwiki#path#is_equal('', '')

line 1:     return a:p1 ==# a:p2
vimwiki#path#is_equal returning #1

continuing in vimwiki#path#path_common_pfx

line 9:     let idx = idx + 1
line 10:   endwhile
line 8:   while (idx < minlen) && vimwiki#path#is_equal(p1[idx], p2[idx])
line 9:     let idx = idx + 1
line 10:   endwhile
line 11:   if idx == 0
line 12:     return ''
line 13:   else
line 14:     return join(p1[: idx-1], '/')
vimwiki#path#path_common_pfx returning ''

continuing in vimwiki#base#find_wiki

line 11:     if vimwiki#path#is_equal(common_pfx, idx_path)
calling vimwiki#path#is_equal('', '/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki')

line 1:     return a:p1 ==# a:p2
vimwiki#path#is_equal returning #0

continuing in vimwiki#base#find_wiki

line 12:       if len(common_pfx) > bestlen
line 13:         let bestlen = len(common_pfx)
line 14:         let bestmatch = idx
line 15:       endif
line 16:     endif
line 17:   endfor
line 7:   for idx in range(vimwiki#vars#number_of_wikis())
line 8:     let idx_path = expand(vimwiki#vars#get_wikilocal('path', idx))
line 9:     let idx_path = vimwiki#path#path_norm(vimwiki#path#chomp_slash(idx_path))
line 10:     let common_pfx = vimwiki#path#path_common_pfx(idx_path, path)
line 11:     if vimwiki#path#is_equal(common_pfx, idx_path)
line 12:       if len(common_pfx) > bestlen
line 13:         let bestlen = len(common_pfx)
line 14:         let bestmatch = idx
line 15:       endif
line 16:     endif
line 17:   endfor
line 18: 
line 19:   return bestmatch
vimwiki#base#find_wiki returning #-1

continuing in vimwiki#vars#get_bufferlocal

line 12:   elseif a:key ==# 'subdir'
line 13:     call setbufvar(buffer, 'vimwiki_subdir', vimwiki#base#current_subdir())
line 14:   elseif a:key ==# 'invsubdir'
line 15:     let subdir = vimwiki#vars#get_bufferlocal('subdir')
line 16:     call setbufvar(buffer, 'vimwiki_invsubdir', vimwiki#base#invsubdir(subdir))
line 17:   elseif a:key ==# 'existing_wikifiles'
line 18:     call setbufvar(buffer, 'vimwiki_existing_wikifiles', vimwiki#base#get_wikilinks(vimwiki#vars#get_bufferlocal('wiki_nr'), 1, ''))
line 20:   elseif a:key ==# 'existing_wikidirs'
line 21:     call setbufvar(buffer, 'vimwiki_existing_wikidirs', vimwiki#base#get_wiki_directories(vimwiki#vars#get_bufferlocal('wiki_nr')))
line 23:   elseif a:key ==# 'prev_links'
line 24:     call setbufvar(buffer, 'vimwiki_prev_links', [])
line 25:   elseif a:key ==# 'markdown_refs'
line 26:     call setbufvar(buffer, 'vimwiki_markdown_refs', vimwiki#markdown_base#scan_reflinks())
line 27:   else
line 28:     call vimwiki#u#echo('unknown buffer variable ' . string(a:key))
line 29:   endif
line 30: 
line 31:   return getbufvar(buffer, 'vimwiki_'.a:key)
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#populate_syntax_vars

line 27:   " TODO remake tests
line 28:   "call s:extend_local(syntax_dic, default_dic, syntax_dic, wikilocal)
line 29:   " Extend <- user syntaxlocal
line 30:   if exists('g:vimwiki_syntax_list') && has_key(g:vimwiki_syntax_list, a:syntax)
line 31:     call s:extend_local(syntax_dic, default_dic, syntax_dic, g:vimwiki_syntax_list[a:syntax])
line 32:   endif
line 33: 
line 34:   " TODO make that clean (i.e clarify what is local to syntax or to buffer)
line 35:   " Get from local vars
line 36:   let bullet_types = vimwiki#vars#get_wikilocal('bullet_types')
calling vimwiki#vars#get_wikilocal('bullet_types')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning []

continuing in vimwiki#vars#populate_syntax_vars

line 37:   if !empty(bullet_types)
line 38:     let syntax_dic['bullet_types'] = bullet_types
line 39:   endif
line 40:   let syntax_dic['cycle_bullets'] = vimwiki#vars#get_wikilocal('cycle_bullets')
calling vimwiki#vars#get_wikilocal('cycle_bullets')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning #0

continuing in vimwiki#vars#populate_syntax_vars

line 42: 
line 43:   " Tag: get var
line 44:   " TODO rename for internal
line 45:   let syntax_dic.tag_format = {}
line 46:   let tf = syntax_dic.tag_format
line 47:   call extend(tf, vimwiki#vars#get_wikilocal('tag_format'))
calling vimwiki#vars#get_wikilocal('tag_format')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning {'pre_mark': ':', 'sep': ':', 'conceal...': '[^:''[:space:]]\+', 'pre': '^\|\s'}

continuing in vimwiki#vars#populate_syntax_vars

line 48: 
line 49:   " Tag: Close regex
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 53: 
line 54:   " Match \s<tag[:tag:tag:tag...]>\s
line 55:   " Tag: highlighting
line 56:   " Used: syntax/vimwiki.vim
line 57:   let syntax_dic.rxTags =   tf.pre . '\@<=' . tf.pre_mark . tf.in . '\%(' . tf.sep . tf.in . '\)*' . tf.post_mark . tf.post . '\@='
line 61: 
line 62:   " Tag: searching for all
line 63:   " Used: vimwiki#base#get_anchors <- GenerateTagLinks
line 64:   let syntax_dic.tag_search =   tf.pre . tf.pre_mark . '\zs' . tf.in . '\%(' . tf.sep . tf.in . '\)*' . '\ze' . tf.post_mark . tf.post
line 68: 
line 69:   " Tag: matching a specific: when goto tag
line 70:   " Used: tags.vim->s:scan_tags
line 71:   " Match <[tag:tag:...tag:]__TAG__[:tag...:tag]>
line 72:   let syntax_dic.tag_match =   tf.pre . tf.pre_mark . '\%(' . tf.in . tf.sep . '\)*' . '__Tag__' . '\%(' . tf.sep . tf.in . '\)*' . tf.post_mark . tf.post
line 78: 
line 79: 
line 80:   " Populate generic stuff
line 81:   let header_symbol = syntax_dic.header_symbol
line 82:   if syntax_dic.symH
line 83:     " symmetric headers
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 100:     let syntax_dic.rxHeader = '^\s*\('.header_symbol.'\{1,6}\)\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze\1\s*$'
line 102:   else
line 103:     " asymmetric
line 104:     " Note: For markdown rxH=# and asymmetric
line 105:     for i in range(1,6)
line 106:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__'
line 108:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*$'
line 110:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*\ze$'
line 112:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*$'
line 114:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*$\|\%$'
line 116:     endfor
line 117:     " Define header regex
line 118:     " -- ATX heading := preceded by #*
line 119:     let atx_heading = '^\s*\%('.header_symbol.'\{1,6}\)'
line 120:     let atx_heading .= '\zs[^'.header_symbol.'].*\ze$'
line 121:     let syntax_dic.rxHeader = atx_heading
line 122:   endif
line 123: 
line 124:   let syntax_dic.rxPreStart = '^\s*'.syntax_dic.pre_format.pre_mark
line 126:   let syntax_dic.rxPreEnd = '^\s*'.syntax_dic.pre_format.post_mark.'\s*$'
line 128: 
line 129:   let syntax_dic.rxMathStart = '^\s*'.syntax_dic.math_format.pre_mark
line 131:   let syntax_dic.rxMathEnd = '^\s*'.syntax_dic.math_format.post_mark.'\s*$'
line 133: 
line 134:   let syntax_dic.number_kinds = []
line 135:   let syntax_dic.number_divisors = ''
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape('.')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\.'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
line 139:   endfor
line 140: 
line 141:   let char_to_rx = {'1': '\d\+', 'i': '[ivxlcdm]\+', 'I': '[IVXLCDM]\+', 'a': '\l\{1,2}', 'A': '\u\{1,2}'}
line 143: 
line 144:   " Create regexp for bulleted list items
line 145:   if !empty(syntax_dic.bullet_types)
line 146:     let syntax_dic.rxListBullet = join( map(copy(syntax_dic.bullet_types),'vimwiki#u#escape(v:val).' .'repeat("\\+", syntax_dic.recurring_bullets)' ) , '\|')
calling vimwiki#u#escape('-')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '-'

continuing in vimwiki#vars#populate_syntax_vars

calling vimwiki#u#escape('*')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\*'

continuing in vimwiki#vars#populate_syntax_vars

calling vimwiki#u#escape('#')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '#'

continuing in vimwiki#vars#populate_syntax_vars

line 151:   else
line 152:     "regex that matches nothing
line 153:     let syntax_dic.rxListBullet = '$^'
line 154:   endif
line 155: 
line 156:   " Create regex for numbered list items
line 157:   if !empty(syntax_dic.number_types)
line 158:     let syntax_dic.rxListNumber = '\C\%('
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape('.')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\.'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
line 162:     endfor
line 163:     let syntax_dic.rxListNumber .= char_to_rx[syntax_dic.number_types[-1][0]]. vimwiki#u#escape(syntax_dic.number_types[-1][1]) . '\)'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 166:   else
line 167:     "regex that matches nothing
line 168:     let syntax_dic.rxListNumber = '$^'
line 169:   endif
line 170: 
line 171:   " 0. URL : free-standing links: keep URL UR(L) strip trailing punct: URL; URL) UR(L))
line 172:   " let g:vimwiki_rxWeblink = '[\["(|]\@<!'. g:vimwiki_rxWeblinkUrl .
line 173:   " \ '\%([),:;.!?]\=\%([ \t]\|$\)\)\@='
line 174:   let syntax_dic.rxWeblink = '\<'. g:vimwiki_global_vars.rxWeblinkUrl . '[^[:space:]><]*'
line 176:   " 0a) match URL within URL
line 177:   let syntax_dic.rxWeblinkMatchUrl = syntax_dic.rxWeblink
line 179:   " 0b) match DESCRIPTION within URL
line 180:   let syntax_dic.rxWeblinkMatchDescr = ''
line 181: 
line 182:   " template for matching all wiki links with a given target file
line 183:   let syntax_dic.WikiLinkMatchUrlTemplate = g:vimwiki_global_vars.rx_wikilink_prefix . '\zs__LinkUrl__\ze\%(#.*\)\?' . g:vimwiki_global_vars.rx_wikilink_suffix . '\|' . g:vimwiki_global_vars.rx_wikilink_prefix . '\zs__LinkUrl__\ze\%(#.*\)\?' . g:vimwiki_global_vars.rx_wikilink_separator . '.*' . g:vimwiki_global_vars.rx_wikilink_suffix
line 193: 
line 194:   " a) match [[URL|DESCRIPTION]]
line 195:   let syntax_dic.rxWikiLink = g:vimwiki_global_vars.rx_wikilink_prefix. g:vimwiki_global_vars.rxWikiLinkUrl.'\%('.g:vimwiki_global_vars.rx_wikilink_separator. g:vimwiki_global_vars.rxWikiLinkDescr.'\)\?'.g:vimwiki_global_vars.rx_wikilink_suffix
line 198:   let syntax_dic.rxAnyLink = syntax_dic.rxWikiLink.'\|'. g:vimwiki_global_vars.rxWikiIncl.'\|'.syntax_dic.rxWeblink
line 201:   " b) match URL within [[URL|DESCRIPTION]]
line 202:   let syntax_dic.rxWikiLinkMatchUrl = g:vimwiki_global_vars.rx_wikilink_prefix . '\zs'. g:vimwiki_global_vars.rxWikiLinkUrl .'\ze\%('. g:vimwiki_global_vars.rx_wikilink_separator . g:vimwiki_global_vars.rxWikiLinkDescr.'\)\?'.g:vimwiki_global_vars.rx_wikilink_suffix
line 206:   " c) match DESCRIPTION within [[URL|DESCRIPTION]]
line 207:   let syntax_dic.rxWikiLinkMatchDescr = g:vimwiki_global_vars.rx_wikilink_prefix . g:vimwiki_global_vars.rxWikiLinkUrl . g:vimwiki_global_vars.rx_wikilink_separator.'\%(\zs' . g:vimwiki_global_vars.rxWikiLinkDescr. '\ze\)\?' . g:vimwiki_global_vars.rx_wikilink_suffix
line 212: 
line 213:   " Work more if markdown
line 214:   if a:syntax ==# 'markdown'
line 215:     call s:populate_extra_markdown_vars()
line 216:   endif
line 217: 
line 218:   call s:normalize_syntax_settings(a:syntax)
calling <SNR>124_normalize_syntax_settings('default')

line 1:   " Normalize syntax setting
line 2:   "   so that we dont have to branch for the syntax at each operation
line 3:   " Called: populate_syntax_vars
line 4:   let syntax_dic = g:vimwiki_syntaxlocal_vars[a:syntax]
line 5: 
line 6:   " Link1: used when:
line 7:   "   user press enter on a non-link (normalize_link)
line 8:   "   command generate link form file name (generate_link)
line 9:   if a:syntax ==# 'markdown'
line 10:     let syntax_dic.Link1 = syntax_dic.Weblink1Template
line 11:     let syntax_dic.Link2 = syntax_dic.Weblink1Template
line 12:   else
line 13:     let syntax_dic.Link1 = vimwiki#vars#get_global('WikiLinkTemplate1')
calling vimwiki#vars#get_global('WikiLinkTemplate1')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '[[__LinkUrl__]]'

continuing in <SNR>124_normalize_syntax_settings

line 14:     let syntax_dic.Link2 = vimwiki#vars#get_global('WikiLinkTemplate2')
calling vimwiki#vars#get_global('WikiLinkTemplate2')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '[[__LinkUrl__|__LinkDescription__]]'

continuing in <SNR>124_normalize_syntax_settings

line 15:   endif
<SNR>124_normalize_syntax_settings returning #0

continuing in vimwiki#vars#populate_syntax_vars

vimwiki#vars#populate_syntax_vars returning #0

continuing in vimwiki#vars#get_syntaxlocal

line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['-', '*', '#']

continuing in <SNR>124_normalize_wikilocal_settings

line 9:     endif
line 10:     call s:populate_list_vars(wiki_settings)
calling <SNR>124_populate_list_vars({'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate list variable
line 2:   " or how to search and treat list (ex: *,-, 1.)
line 3:   " TODO this should be syntax_local
line 4:   let syntax = a:wiki.syntax
line 5: 
line 6:   let a:wiki.rx_bullet_char = '['.escape(join(a:wiki.bullet_types, ''), ']^-\').']'
line 7:   let a:wiki.rx_bullet_chars = a:wiki.rx_bullet_char.'\+'
line 8: 
line 9:   let recurring_bullets = vimwiki#vars#get_syntaxlocal('recurring_bullets')
calling vimwiki#vars#get_syntaxlocal('recurring_bullets')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning #0

continuing in <SNR>124_populate_list_vars

line 10:   let rxListNumber = vimwiki#vars#get_syntaxlocal('rxListNumber')
calling vimwiki#vars#get_syntaxlocal('rxListNumber')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning '\C\%(\d\+)\|\d\+\.\|[ivxlcdm]\+)\|[IVXLCDM]\+)\|\l\{1,2})\|\u\{1,2})\)'

continuing in <SNR>124_populate_list_vars

line 11: 
line 12:   let a:wiki.multiple_bullet_chars = recurring_bullets ? a:wiki.bullet_types : []
line 15: 
line 16:   " Create regexp for bulleted list items
line 17:   if !empty(a:wiki.bullet_types)
line 18:     let rxListBullet = join( map(copy(a:wiki.bullet_types),'vimwiki#u#escape(v:val).' .'repeat("\\+", recurring_bullets)' ) , '\|')
calling vimwiki#u#escape('-')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '-'

continuing in <SNR>124_populate_list_vars

calling vimwiki#u#escape('*')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\*'

continuing in <SNR>124_populate_list_vars

calling vimwiki#u#escape('#')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '#'

continuing in <SNR>124_populate_list_vars

line 23:   else
line 24:     "regex that matches nothing
line 25:     let rxListBullet = '$^'
line 26:   endif
line 27: 
line 28:   " the user can set the listsyms as string, but vimwiki needs a list
line 29:   let a:wiki.listsyms_list = split(a:wiki.listsyms, '\zs')
line 30: 
line 31:   " Guard: Check if listym_rejected is in listsyms
line 32:   if match(a:wiki.listsyms, '[' . a:wiki.listsym_rejected . ']') != -1
line 33:     call vimwiki#u#warn('the value of listsym_rejected (''' . a:wiki.listsym_rejected . ''') must not be a part of listsyms (''' . a:wiki.listsyms . ''')')
line 36:   endif
line 37: 
line 38:   let a:wiki.rxListItemWithoutCB = '^\s*\%(\('.rxListBullet.'\)\|\(' .rxListNumber.'\)\)\s'
line 41:   let a:wiki.rxListItem = a:wiki.rxListItemWithoutCB . '\+\%(\[\(['.a:wiki.listsyms . a:wiki.listsym_rejected.']\)\]\s\)\?'
line 45:   if recurring_bullets
line 46:     let a:wiki.rxListItemAndChildren = '^\('.rxListBullet.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\%(' .rxListBullet.'\).*\|^$\|\s.*\)\)*'
line 51:   else
line 52:     let a:wiki.rxListItemAndChildren = '^\(\s*\)\%('.rxListBullet.'\|' . rxListNumber.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\s.*\|^$\)\)*'
line 57:   endif
<SNR>124_populate_list_vars returning #0

continuing in <SNR>124_normalize_wikilocal_settings

line 11: 
line 12:     call s:populate_blockquote_vars(wiki_settings)
calling <SNR>124_populate_blockquote_vars({'rxListItem': '^\s*\%(\(-\|\*\|#\)\|\...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate blockquote variable
line 2:   " Start being more intelligent on blockquote line continuation
line 3:   " See: issue #1274
line 4: 
line 5:   " Start of line and spaces
line 6:   let a:wiki.rxBlockquoteItem = '^\s*\('
line 7: 
line 8:   " Content
line 9:   let blockquote_markers =  vimwiki#vars#get_syntaxlocal('blockquote_markers')
calling vimwiki#vars#get_syntaxlocal('blockquote_markers')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['>', '::']

continuing in <SNR>124_populate_blockquote_vars

line 10:   let a:wiki.rxBlockquoteItem .= join(blockquote_markers, '\|')
line 11: 
line 12:   let a:wiki.rxBlockquoteItem .= '\)'
<SNR>124_populate_blockquote_vars returning #0

continuing in <SNR>124_normalize_wikilocal_settings

line 13: 
line 14:     " Check nested syntax
line 15:     for keyword in keys(wiki_settings.nested_syntaxes)
line 16:       if type(keyword) != type('') || empty(keyword) || type(wiki_settings.nested_syntaxes[keyword]) != type('') || empty(wiki_settings.nested_syntaxes[keyword])
line 18:         call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(wiki_settings.nested_syntaxes), 'nested_syntaxes', 'nested_syntaxes'))
line 20:         break
line 21:       endif
line 22:     endfor
line 23: 
line 24:     " Normalize
line 25:     """"""""""""""""""""""""""""""""
line 26:     let wiki_settings['path'] = s:normalize_path(wiki_settings['path'])
calling <SNR>124_normalize_path('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning '/Users/christopher.griffith/Library/M...com~apple~CloudDocs/Documents/vimwiki/'

continuing in <SNR>124_normalize_wikilocal_settings

line 27: 
line 28:     let path_html = wiki_settings['path_html']
line 29:     if !empty(path_html)
line 30:       let wiki_settings['path_html'] = s:normalize_path(path_html)
line 31:     else
line 32:       let wiki_settings['path_html'] = s:normalize_path( substitute(wiki_settings['path'], '[/\\]\+$', '', '').'_html/')
calling <SNR>124_normalize_path('/Users/christopher.griffith/Library/M...pple~CloudDocs/Documents/vimwiki_html/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning '/Users/christopher.griffith/Library/M...pple~CloudDocs/Documents/vimwiki_html/'

continuing in <SNR>124_normalize_wikilocal_settings

line 34:     endif
line 35: 
line 36:     let wiki_settings['template_path'] = s:normalize_path(wiki_settings['template_path'])
calling <SNR>124_normalize_path('/Users/christopher.griffith/vimwiki/templates/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning '/Users/christopher.griffith/vimwiki/templates/'

continuing in <SNR>124_normalize_wikilocal_settings

line 37:     let wiki_settings['diary_rel_path'] = s:normalize_path(wiki_settings['diary_rel_path'])
calling <SNR>124_normalize_path('diary/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning 'diary/'

continuing in <SNR>124_normalize_wikilocal_settings

line 38: 
line 39:     let ext = wiki_settings['ext']
line 40:     if !empty(ext) && ext[0] !=# '.'
line 41:       let wiki_settings['ext'] = '.' . ext
line 42:     endif
line 43: 
line 44:     " for convenience, we also allow the term 'mediawiki'
line 45:     if wiki_settings.syntax ==# 'mediawiki'
line 46:       let wiki_settings.syntax = 'media'
line 47:     endif
line 48: 
line 49:     if wiki_settings.syntax ==# 'markdown' && !s:margin_set_by_user
line 50:       " default list margin to 0
line 51:       let wiki_settings.list_margin = 0
line 52:     endif
line 53:   endfor
line 2:   for wiki_settings in g:vimwiki_wikilocal_vars
line 3:     " Check some values individually
line 4:     """"""""""""""""""""""""""""""""
line 5:     " Treat lists
line 6:     " TODO remove me: I am syntaxlocal
line 7:     if !has_key(wiki_settings, 'bullet_types') || len(wiki_settings.bullet_types) == 0
line 8:       let wiki_settings.bullet_types = vimwiki#vars#get_syntaxlocal('bullet_types', wiki_settings.syntax)
calling vimwiki#vars#get_syntaxlocal('bullet_types', 'default')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['-', '*', '#']

continuing in <SNR>124_normalize_wikilocal_settings

line 9:     endif
line 10:     call s:populate_list_vars(wiki_settings)
calling <SNR>124_populate_list_vars({'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate list variable
line 2:   " or how to search and treat list (ex: *,-, 1.)
line 3:   " TODO this should be syntax_local
line 4:   let syntax = a:wiki.syntax
line 5: 
line 6:   let a:wiki.rx_bullet_char = '['.escape(join(a:wiki.bullet_types, ''), ']^-\').']'
line 7:   let a:wiki.rx_bullet_chars = a:wiki.rx_bullet_char.'\+'
line 8: 
line 9:   let recurring_bullets = vimwiki#vars#get_syntaxlocal('recurring_bullets')
calling vimwiki#vars#get_syntaxlocal('recurring_bullets')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning #0

continuing in <SNR>124_populate_list_vars

line 10:   let rxListNumber = vimwiki#vars#get_syntaxlocal('rxListNumber')
calling vimwiki#vars#get_syntaxlocal('rxListNumber')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning '\C\%(\d\+)\|\d\+\.\|[ivxlcdm]\+)\|[IVXLCDM]\+)\|\l\{1,2})\|\u\{1,2})\)'

continuing in <SNR>124_populate_list_vars

line 11: 
line 12:   let a:wiki.multiple_bullet_chars = recurring_bullets ? a:wiki.bullet_types : []
line 15: 
line 16:   " Create regexp for bulleted list items
line 17:   if !empty(a:wiki.bullet_types)
line 18:     let rxListBullet = join( map(copy(a:wiki.bullet_types),'vimwiki#u#escape(v:val).' .'repeat("\\+", recurring_bullets)' ) , '\|')
calling vimwiki#u#escape('-')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '-'

continuing in <SNR>124_populate_list_vars

calling vimwiki#u#escape('*')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\*'

continuing in <SNR>124_populate_list_vars

calling vimwiki#u#escape('#')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '#'

continuing in <SNR>124_populate_list_vars

line 23:   else
line 24:     "regex that matches nothing
line 25:     let rxListBullet = '$^'
line 26:   endif
line 27: 
line 28:   " the user can set the listsyms as string, but vimwiki needs a list
line 29:   let a:wiki.listsyms_list = split(a:wiki.listsyms, '\zs')
line 30: 
line 31:   " Guard: Check if listym_rejected is in listsyms
line 32:   if match(a:wiki.listsyms, '[' . a:wiki.listsym_rejected . ']') != -1
line 33:     call vimwiki#u#warn('the value of listsym_rejected (''' . a:wiki.listsym_rejected . ''') must not be a part of listsyms (''' . a:wiki.listsyms . ''')')
line 36:   endif
line 37: 
line 38:   let a:wiki.rxListItemWithoutCB = '^\s*\%(\('.rxListBullet.'\)\|\(' .rxListNumber.'\)\)\s'
line 41:   let a:wiki.rxListItem = a:wiki.rxListItemWithoutCB . '\+\%(\[\(['.a:wiki.listsyms . a:wiki.listsym_rejected.']\)\]\s\)\?'
line 45:   if recurring_bullets
line 46:     let a:wiki.rxListItemAndChildren = '^\('.rxListBullet.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\%(' .rxListBullet.'\).*\|^$\|\s.*\)\)*'
line 51:   else
line 52:     let a:wiki.rxListItemAndChildren = '^\(\s*\)\%('.rxListBullet.'\|' . rxListNumber.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\s.*\|^$\)\)*'
line 57:   endif
<SNR>124_populate_list_vars returning #0

continuing in <SNR>124_normalize_wikilocal_settings

line 11: 
line 12:     call s:populate_blockquote_vars(wiki_settings)
calling <SNR>124_populate_blockquote_vars({'rxListItem': '^\s*\%(\(-\|\*\|#\)\|\...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate blockquote variable
line 2:   " Start being more intelligent on blockquote line continuation
line 3:   " See: issue #1274
line 4: 
line 5:   " Start of line and spaces
line 6:   let a:wiki.rxBlockquoteItem = '^\s*\('
line 7: 
line 8:   " Content
line 9:   let blockquote_markers =  vimwiki#vars#get_syntaxlocal('blockquote_markers')
calling vimwiki#vars#get_syntaxlocal('blockquote_markers')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['>', '::']

continuing in <SNR>124_populate_blockquote_vars

line 10:   let a:wiki.rxBlockquoteItem .= join(blockquote_markers, '\|')
line 11: 
line 12:   let a:wiki.rxBlockquoteItem .= '\)'
<SNR>124_populate_blockquote_vars returning #0

continuing in <SNR>124_normalize_wikilocal_settings

line 13: 
line 14:     " Check nested syntax
line 15:     for keyword in keys(wiki_settings.nested_syntaxes)
line 16:       if type(keyword) != type('') || empty(keyword) || type(wiki_settings.nested_syntaxes[keyword]) != type('') || empty(wiki_settings.nested_syntaxes[keyword])
line 18:         call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(wiki_settings.nested_syntaxes), 'nested_syntaxes', 'nested_syntaxes'))
line 20:         break
line 21:       endif
line 22:     endfor
line 23: 
line 24:     " Normalize
line 25:     """"""""""""""""""""""""""""""""
line 26:     let wiki_settings['path'] = s:normalize_path(wiki_settings['path'])
calling <SNR>124_normalize_path('/Users/christopher.griffith/vimwiki/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning '/Users/christopher.griffith/vimwiki/'

continuing in <SNR>124_normalize_wikilocal_settings

line 27: 
line 28:     let path_html = wiki_settings['path_html']
line 29:     if !empty(path_html)
line 30:       let wiki_settings['path_html'] = s:normalize_path(path_html)
line 31:     else
line 32:       let wiki_settings['path_html'] = s:normalize_path( substitute(wiki_settings['path'], '[/\\]\+$', '', '').'_html/')
calling <SNR>124_normalize_path('/Users/christopher.griffith/vimwiki_html/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning '/Users/christopher.griffith/vimwiki_html/'

continuing in <SNR>124_normalize_wikilocal_settings

line 34:     endif
line 35: 
line 36:     let wiki_settings['template_path'] = s:normalize_path(wiki_settings['template_path'])
calling <SNR>124_normalize_path('/Users/christopher.griffith/vimwiki/templates/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning '/Users/christopher.griffith/vimwiki/templates/'

continuing in <SNR>124_normalize_wikilocal_settings

line 37:     let wiki_settings['diary_rel_path'] = s:normalize_path(wiki_settings['diary_rel_path'])
calling <SNR>124_normalize_path('diary/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>124_normalize_path returning 'diary/'

continuing in <SNR>124_normalize_wikilocal_settings

line 38: 
line 39:     let ext = wiki_settings['ext']
line 40:     if !empty(ext) && ext[0] !=# '.'
line 41:       let wiki_settings['ext'] = '.' . ext
line 42:     endif
line 43: 
line 44:     " for convenience, we also allow the term 'mediawiki'
line 45:     if wiki_settings.syntax ==# 'mediawiki'
line 46:       let wiki_settings.syntax = 'media'
line 47:     endif
line 48: 
line 49:     if wiki_settings.syntax ==# 'markdown' && !s:margin_set_by_user
line 50:       " default list margin to 0
line 51:       let wiki_settings.list_margin = 0
line 52:     endif
line 53:   endfor
line 2:   for wiki_settings in g:vimwiki_wikilocal_vars
line 3:     " Check some values individually
line 4:     """"""""""""""""""""""""""""""""
line 5:     " Treat lists
line 6:     " TODO remove me: I am syntaxlocal
line 7:     if !has_key(wiki_settings, 'bullet_types') || len(wiki_settings.bullet_types) == 0
line 8:       let wiki_settings.bullet_types = vimwiki#vars#get_syntaxlocal('bullet_types', wiki_settings.syntax)
line 9:     endif
line 10:     call s:populate_list_vars(wiki_settings)
line 11: 
line 12:     call s:populate_blockquote_vars(wiki_settings)
line 13: 
line 14:     " Check nested syntax
line 15:     for keyword in keys(wiki_settings.nested_syntaxes)
line 16:       if type(keyword) != type('') || empty(keyword) || type(wiki_settings.nested_syntaxes[keyword]) != type('') || empty(wiki_settings.nested_syntaxes[keyword])
line 18:         call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(wiki_settings.nested_syntaxes), 'nested_syntaxes', 'nested_syntaxes'))
line 20:         break
line 21:       endif
line 22:     endfor
line 23: 
line 24:     " Normalize
line 25:     """"""""""""""""""""""""""""""""
line 26:     let wiki_settings['path'] = s:normalize_path(wiki_settings['path'])
line 27: 
line 28:     let path_html = wiki_settings['path_html']
line 29:     if !empty(path_html)
line 30:       let wiki_settings['path_html'] = s:normalize_path(path_html)
line 31:     else
line 32:       let wiki_settings['path_html'] = s:normalize_path( substitute(wiki_settings['path'], '[/\\]\+$', '', '').'_html/')
line 34:     endif
line 35: 
line 36:     let wiki_settings['template_path'] = s:normalize_path(wiki_settings['template_path'])
line 37:     let wiki_settings['diary_rel_path'] = s:normalize_path(wiki_settings['diary_rel_path'])
line 38: 
line 39:     let ext = wiki_settings['ext']
line 40:     if !empty(ext) && ext[0] !=# '.'
line 41:       let wiki_settings['ext'] = '.' . ext
line 42:     endif
line 43: 
line 44:     " for convenience, we also allow the term 'mediawiki'
line 45:     if wiki_settings.syntax ==# 'mediawiki'
line 46:       let wiki_settings.syntax = 'media'
line 47:     endif
line 48: 
line 49:     if wiki_settings.syntax ==# 'markdown' && !s:margin_set_by_user
line 50:       " default list margin to 0
line 51:       let wiki_settings.list_margin = 0
line 52:     endif
line 53:   endfor
<SNR>124_normalize_wikilocal_settings returning #0

continuing in <SNR>124_populate_wikilocal_options

<SNR>124_populate_wikilocal_options returning #0

continuing in vimwiki#vars#init

vimwiki#vars#init returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 233: 
line 234: 
line 235: " Define callback functions which the user can redefine
line 236: if !exists('*VimwikiLinkHandler')
line 237:   function VimwikiLinkHandler(url)
line 240: endif
line 241: 
line 242: if !exists('*VimwikiLinkConverter')
line 243:   function VimwikiLinkConverter(url, source, target)
line 247: endif
line 248: 
line 249: if !exists('*VimwikiWikiIncludeHandler')
line 250:   function! VimwikiWikiIncludeHandler(value)
line 253: endif
line 254: 
line 255: 
line 256: " Write a level 1 header to new wiki files
line 257: " a:fname should be an absolute filepath
line 258: function! s:create_h1(fname) abort
line 302: 
line 303: " Define autocommands for all known wiki extensions
line 304: let s:known_extensions = s:vimwiki_get_known_extensions()
calling <SNR>123_vimwiki_get_known_extensions()

line 1:   " Getting all extensions that different wikis could have
line 2:   let extensions = {}
line 3:   for idx in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in <SNR>123_vimwiki_get_known_extensions

line 4:     let ext = vimwiki#vars#get_wikilocal('ext', idx)
calling vimwiki#vars#get_wikilocal('ext', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning '.wiki'

continuing in <SNR>123_vimwiki_get_known_extensions

line 5:     let extensions[ext] = 1
line 6:   endfor
line 3:   for idx in range(vimwiki#vars#number_of_wikis())
line 4:     let ext = vimwiki#vars#get_wikilocal('ext', idx)
line 5:     let extensions[ext] = 1
line 6:   endfor
line 7:   " append extensions from g:vimwiki_ext2syntax
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
calling vimwiki#vars#get_global('ext2syntax')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning {'.markdown': 'markdown', '.md': 'mark...kdn': 'markdown', '.mdown': 'markdown'}

continuing in <SNR>123_vimwiki_get_known_extensions

line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 11:   return keys(extensions)
<SNR>123_vimwiki_get_known_extensions returning ['.markdown', '.md', '.mw', '.mkdn', '.wiki', '.mdwn', '.mdown']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 305: 
line 306: if index(s:known_extensions, '.wiki') > -1
line 307:   augroup filetypedetect
line 308:     " Clear FlexWiki's stuff
line 309:     au! * *.wiki
line 310:   augroup end
line 311: endif
line 312: 
line 313: augroup vimwiki
line 314:   autocmd!
line 315:   autocmd ColorScheme * call s:setup_cleared_syntax()
line 316: 
line 317:   " ['.md', '.mdown'] => *.md,*.mdown
line 318:   let pat = join(map(s:known_extensions, '"*" . v:val'), ',')
line 319:   exe 'autocmd BufNewFile,BufRead '.pat.' call s:setup_new_wiki_buffer()'
line 319: autocmd BufNewFile,BufRead *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_new_wiki_buffer()
line 320:   exe 'autocmd BufEnter '.pat.' call s:setup_buffer_enter()'
line 320: autocmd BufEnter *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_enter()
line 321:   exe 'autocmd BufLeave '.pat.' call s:setup_buffer_leave()'
line 321: autocmd BufLeave *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_leave()
line 322:   exe 'autocmd BufWinEnter '.pat.' call s:setup_buffer_win_enter()'
line 322: autocmd BufWinEnter *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_win_enter()
line 323:   if exists('##DiffUpdated')
line 324:     exe 'autocmd DiffUpdated '.pat.' call s:setup_buffer_win_enter()'
line 324: autocmd DiffUpdated *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_win_enter()
line 325:   endif
line 326:   " automatically generate a level 1 header for new files
line 327:   exe 'autocmd BufNewFile '.pat.' call s:create_h1(expand("%:p"))'
line 327: autocmd BufNewFile *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:create_h1(expand("%:p"))
line 328:   " Format tables when exit from insert mode. Do not use textwidth to
line 329:   " autowrap tables.
line 330:   if vimwiki#vars#get_global('table_auto_fmt')
calling vimwiki#vars#get_global('table_auto_fmt')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning #1

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 331:     exe 'autocmd InsertLeave '.pat.' call vimwiki#tbl#format(line("."), 2)'
line 331: autocmd InsertLeave *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call vimwiki#tbl#format(line("."), 2)
line 332:   endif
line 333:   if vimwiki#vars#get_global('folding') =~? ':quick$'
calling vimwiki#vars#get_global('folding')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 334:     " from http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
line 335:     " Don't screw up folds when inserting text that might affect them, until
line 336:     " leaving insert mode. Foldmethod is local to the window. Protect against
line 337:     " screwing up folding when switching between windows.
line 338:     exe 'autocmd InsertEnter '.pat.' if !exists("w:last_fdm") | let w:last_fdm=&foldmethod'. ' | setlocal foldmethod=manual | endif'
line 340:     exe 'autocmd InsertLeave,WinLeave '.pat.' if exists("w:last_fdm") |'. 'let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif'
line 342:   endif
line 343: augroup END
line 344: 
line 345: 
line 346: " Declare global commands
line 347: command! VimwikiUISelect call vimwiki#base#ui_select()
line 348: 
line 349: " these commands take a count e.g. :VimwikiIndex 2
line 350: " the default behavior is to open the index, diary etc.
line 351: " for the CURRENT wiki if no count is given
line 352: command! -count=0 VimwikiIndex call vimwiki#base#goto_index(<count>)
line 354: 
line 355: command! -count=0 VimwikiTabIndex call vimwiki#base#goto_index(<count>, 1)
line 357: 
line 358: command! -count=0 VimwikiDiaryIndex call vimwiki#diary#goto_diary_index(<count>)
line 360: 
line 361: command! -count=0 VimwikiMakeDiaryNote call vimwiki#diary#make_note(<count>, 5)
line 363: 
line 364: command! -count=0 VimwikiTabMakeDiaryNote call vimwiki#diary#make_note(<count>, 1)
line 366: 
line 367: command! -count=0 VimwikiMakeYesterdayDiaryNote call vimwiki#diary#make_note(<count>, 0, vimwiki#diary#diary_date_link(localtime(), -1, <count>))
line 370: 
line 371: command! -count=0 VimwikiMakeTomorrowDiaryNote call vimwiki#diary#make_note(<count>, 0, vimwiki#diary#diary_date_link(localtime(), 1, <count>))
line 374: 
line 375: command! VimwikiDiaryGenerateLinks call vimwiki#diary#generate_diary_section()
line 377: 
line 378: command! VimwikiShowVersion call s:get_version()
line 379: 
line 380: command! -nargs=* -complete=customlist,vimwiki#vars#complete VimwikiVar call vimwiki#vars#cmd(<q-args>)
line 382: 
line 383: 
line 384: " Declare global maps
line 385: " <Plug> global definitions
line 386: nnoremap <silent><script> <Plug>VimwikiIndex :<C-U>call vimwiki#base#goto_index(v:count)<CR>
line 388: nnoremap <silent><script> <Plug>VimwikiTabIndex :<C-U>call vimwiki#base#goto_index(v:count, 1)<CR>
line 390: nnoremap <silent><script> <Plug>VimwikiUISelect :VimwikiUISelect<CR>
line 392: nnoremap <silent><script> <Plug>VimwikiDiaryIndex :<C-U>call vimwiki#diary#goto_diary_index(v:count)<CR>
line 394: nnoremap <silent><script> <Plug>VimwikiDiaryGenerateLinks :VimwikiDiaryGenerateLinks<CR>
line 396: nnoremap <silent><script> <Plug>VimwikiMakeDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 5)<CR>
line 398: nnoremap <silent><script> <Plug>VimwikiTabMakeDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 1)<CR>
line 400: nnoremap <silent><script> <Plug>VimwikiMakeYesterdayDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 0, vimwiki#diary#diary_date_link(localtime(), -1, v:count))<CR>
line 403: nnoremap <silent><script> <Plug>VimwikiMakeTomorrowDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 0, vimwiki#diary#diary_date_link(localtime(), 1, v:count))<CR>
line 406: 
line 407: 
line 408: " Set default global key mappings
line 409: if str2nr(vimwiki#vars#get_global('key_mappings').global)
calling vimwiki#vars#get_global('key_mappings')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning {'headers': 1, 'table_format': 1, 'lis...se': 0, 'table_mappings': 1, 'html': 1}

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 410:   " Get the user defined prefix (default <leader>w)
line 411:   let s:map_prefix = vimwiki#vars#get_global('map_prefix')
calling vimwiki#vars#get_global('map_prefix')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '<Leader>w'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 412: 
line 413:   call vimwiki#u#map_key('n', s:map_prefix . 'w', '<Plug>VimwikiIndex', 2)
calling vimwiki#u#map_key('n', '<Leader>ww', '<Plug>VimwikiIndex', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>ww <Plug>VimwikiIndex
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 414:   call vimwiki#u#map_key('n', s:map_prefix . 't', '<Plug>VimwikiTabIndex', 2)
calling vimwiki#u#map_key('n', '<Leader>wt', '<Plug>VimwikiTabIndex', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>wt <Plug>VimwikiTabIndex
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 415:   call vimwiki#u#map_key('n', s:map_prefix . 's', '<Plug>VimwikiUISelect', 2)
calling vimwiki#u#map_key('n', '<Leader>ws', '<Plug>VimwikiUISelect', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>ws <Plug>VimwikiUISelect
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 416:   call vimwiki#u#map_key('n', s:map_prefix . 'i', '<Plug>VimwikiDiaryIndex', 2)
calling vimwiki#u#map_key('n', '<Leader>wi', '<Plug>VimwikiDiaryIndex', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>wi <Plug>VimwikiDiaryIndex
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 417:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>i', '<Plug>VimwikiDiaryGenerateLinks', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>i', '<Plug>VimwikiDiaryGenerateLinks', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>i <Plug>VimwikiDiaryGenerateLinks
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 418:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>w', '<Plug>VimwikiMakeDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>w', '<Plug>VimwikiMakeDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>w <Plug>VimwikiMakeDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 419:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>t', '<Plug>VimwikiTabMakeDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>t', '<Plug>VimwikiTabMakeDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>t <Plug>VimwikiTabMakeDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 420:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>y', '<Plug>VimwikiMakeYesterdayDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>y', '<Plug>VimwikiMakeYesterdayDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>y <Plug>VimwikiMakeYesterdayDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 421:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>m', '<Plug>VimwikiMakeTomorrowDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>m', '<Plug>VimwikiMakeTomorrowDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>m <Plug>VimwikiMakeTomorrowDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 422: endif
line 423: 
line 424: 
line 425: " Build global wiki menu (GUI)
line 426: function! s:build_menu(topmenu) abort
line 453: 
line 454: 
line 455: " Build global table menu (GUI)
line 456: function! s:build_table_menu(topmenu) abort
line 465: 
line 466: 
line 467: " Build Menus now
line 468: if !empty(vimwiki#vars#get_global('menu'))
calling vimwiki#vars#get_global('menu')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning 'Vimwiki'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 469:   call s:build_menu(vimwiki#vars#get_global('menu'))
calling vimwiki#vars#get_global('menu')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning 'Vimwiki'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

calling <SNR>123_build_menu('Vimwiki')

line 1:   let wnamelist = []
line 2:   for idx in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in <SNR>123_build_menu

line 3:     let wname = vimwiki#vars#get_wikilocal('name', idx)
calling vimwiki#vars#get_wikilocal('name', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning ''

continuing in <SNR>123_build_menu

line 4:     if wname ==? ''
line 5:       " fall back to the path if wiki isn't named
line 6:       let wname = fnamemodify(vimwiki#vars#get_wikilocal('path', idx), ':h:t')
calling vimwiki#vars#get_wikilocal('path', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning '/Users/christopher.griffith/Library/M...com~apple~CloudDocs/Documents/vimwiki/'

continuing in <SNR>123_build_menu

line 7:     endif
line 8: 
line 9:     if index(wnamelist, wname) != -1
line 10:       " append wiki index number to duplicate entries
line 11:       let wname = wname . ' ' . string(idx + 1)
line 12:     endif
line 13: 
line 14:     " add entry to the list of names for duplicate checks
line 15:     call add(wnamelist, wname)
line 16: 
line 17:     " escape spaces and periods
line 18:     let wname = escape(wname, '\ \.')
line 19: 
line 20:     " build the menu
line 21:     execute 'menu '.a:topmenu.'.Open\ index.'.wname. ' :call vimwiki#base#goto_index('.(idx+1).')<CR>'
line 21: menu Vimwiki.Open\ index.vimwiki :call vimwiki#base#goto_index(1)<CR>
line 23:     execute 'menu '.a:topmenu.'.Open/Create\ diary\ note.'.wname. ' :call vimwiki#diary#make_note('.(idx+1).')<CR>'
line 23: menu Vimwiki.Open/Create\ diary\ note.vimwiki :call vimwiki#diary#make_note(1)<CR>
line 25:   endfor
line 2:   for idx in range(vimwiki#vars#number_of_wikis())
line 3:     let wname = vimwiki#vars#get_wikilocal('name', idx)
line 4:     if wname ==? ''
line 5:       " fall back to the path if wiki isn't named
line 6:       let wname = fnamemodify(vimwiki#vars#get_wikilocal('path', idx), ':h:t')
line 7:     endif
line 8: 
line 9:     if index(wnamelist, wname) != -1
line 10:       " append wiki index number to duplicate entries
line 11:       let wname = wname . ' ' . string(idx + 1)
line 12:     endif
line 13: 
line 14:     " add entry to the list of names for duplicate checks
line 15:     call add(wnamelist, wname)
line 16: 
line 17:     " escape spaces and periods
line 18:     let wname = escape(wname, '\ \.')
line 19: 
line 20:     " build the menu
line 21:     execute 'menu '.a:topmenu.'.Open\ index.'.wname. ' :call vimwiki#base#goto_index('.(idx+1).')<CR>'
line 23:     execute 'menu '.a:topmenu.'.Open/Create\ diary\ note.'.wname. ' :call vimwiki#diary#make_note('.(idx+1).')<CR>'
line 25:   endfor
<SNR>123_build_menu returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 470:   call s:build_table_menu(vimwiki#vars#get_global('menu'))
calling vimwiki#vars#get_global('menu')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning 'Vimwiki'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

calling <SNR>123_build_table_menu('Vimwiki')

line 1:   exe 'menu '.a:topmenu.'.-Sep- :'
line 1: menu Vimwiki.-Sep- :
line 2:   exe 'menu '.a:topmenu.'.Table.Create\ (enter\ cols\ rows) :VimwikiTable '
line 2: menu Vimwiki.Table.Create\ (enter\ cols\ rows) :VimwikiTable 
line 3:   exe 'nmenu '.a:topmenu.'.Table.Format<tab>gqq gqq'
line 3: nmenu Vimwiki.Table.Format<tab>gqq gqq
line 4:   exe 'nmenu '.a:topmenu.'.Table.Move\ column\ left<tab><A-Left> :VimwikiTableMoveColumnLeft<CR>'
line 4: nmenu Vimwiki.Table.Move\ column\ left<tab><A-Left> :VimwikiTableMoveColumnLeft<CR>
line 5:   exe 'nmenu '.a:topmenu. '.Table.Move\ column\ right<tab><A-Right> :VimwikiTableMoveColumnRight<CR>'
line 5: nmenu Vimwiki.Table.Move\ column\ right<tab><A-Right> :VimwikiTableMoveColumnRight<CR>
line 7:   exe 'nmenu disable '.a:topmenu.'.Table'
line 7: nmenu disable Vimwiki.Table
<SNR>123_build_table_menu returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 471: endif
line 472: 
line 473: 
line 474: " Hook for calendar.vim
line 475: if vimwiki#vars#get_global('use_calendar')
calling vimwiki#vars#get_global('use_calendar')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning #1

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 476:   let g:calendar_action = 'vimwiki#diary#calendar_action'
line 477:   let g:calendar_sign = 'vimwiki#diary#calendar_sign'
line 478: endif
line 479: 
line 480: 
line 481: " Restore peace in the galaxy
line 482: let &cpoptions = s:old_cpo
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/cmp_fuzzy_buffer.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/cmp_fuzzy_buffer.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/cmp_fuzzy_buffer.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.vim"
line 1: lua require "nvim-ts-autotag".init()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/peekaboo.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/peekaboo.vim"
line 1: " The MIT License (MIT)
line 2: "
line 3: " Copyright (c) 2017 Junegunn Choi
line 4: "
line 5: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 6: " of this software and associated documentation files (the "Software"), to deal
line 7: " in the Software without restriction, including without limitation the rights
line 8: " to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
line 9: " copies of the Software, and to permit persons to whom the Software is
line 10: " furnished to do so, subject to the following conditions:
line 11: "
line 12: " The above copyright notice and this permission notice shall be included in
line 13: " all copies or substantial portions of the Software.
line 14: "
line 15: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 16: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 17: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 18: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 19: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
line 20: " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
line 21: " THE SOFTWARE.
line 22: 
line 23: nnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
line 24: xnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
line 25: inoremap <silent> <Plug>(peekaboo) <c-\><c-o>:<c-u>call peekaboo#aboo()<cr>
line 26: 
line 27: function! peekaboo#on()
line 41: 
line 42: function! peekaboo#off()
line 55: 
line 56: augroup peekaboo_init
line 57:   autocmd!
line 58:   autocmd BufEnter * if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif
line 59: augroup END
line 60: 
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/peekaboo.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim"
line 1: if exists("g:loaded_node") || &cp || v:version < 700 | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: let g:loaded_node = 1
line 3: 
line 4: let s:filetypes = ["javascript", "json", "jsx"]
line 5: if exists("g:node_filetypes") | let s:filetypes = g:node_filetypes | endif
line 5:  let s:filetypes = g:node_filetypes | endif
line 5:  endif
line 6: 
line 7: function! s:detect(dir)
line 22: 
line 23: function! s:permutate(ft)
line 28: 
line 29: function! s:flatten(list)
line 38: 
line 39: augroup Node
line 40: ^Iau!
line 41: ^Iau VimEnter * if empty(expand("<amatch>")) | call s:detect(getcwd()) | endif
line 42: ^Iau BufRead,BufNewFile * call s:detect(expand("<amatch>:p"))
line 43: 
line 44: ^Ilet s:filetype_patterns = s:flatten(map(s:filetypes, "<SID>permutate(v:val)"))
calling <SNR>132_permutate('javascript')

line 1: ^I" Don't know right now how to detect javascript.jsx and other permutations
line 2: ^I" without precomputing them in advance. Please let me know if you do.
line 3: ^Ireturn [a:ft, a:ft . ".*", "*." . a:ft, "*." . a:ft . ".*"]
<SNR>132_permutate returning ['javascript', 'javascript.*', '*.javascript', '*.javascript.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

calling <SNR>132_permutate('json')

line 1: ^I" Don't know right now how to detect javascript.jsx and other permutations
line 2: ^I" without precomputing them in advance. Please let me know if you do.
line 3: ^Ireturn [a:ft, a:ft . ".*", "*." . a:ft, "*." . a:ft . ".*"]
<SNR>132_permutate returning ['json', 'json.*', '*.json', '*.json.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

calling <SNR>132_permutate('jsx')

line 1: ^I" Don't know right now how to detect javascript.jsx and other permutations
line 2: ^I" without precomputing them in advance. Please let me know if you do.
line 3: ^Ireturn [a:ft, a:ft . ".*", "*." . a:ft, "*." . a:ft . ".*"]
<SNR>132_permutate returning ['jsx', 'jsx.*', '*.jsx', '*.jsx.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

calling <SNR>132_flatten([['javascript', 'javascript.*', '*.jav..., ['jsx', 'jsx.*', '*.jsx', '*.jsx.*']])

line 1: ^Ilet values = []
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 7: ^Ireturn values
<SNR>132_flatten returning ['javascript', 'javascript.*', '*.java...*', 'jsx', 'jsx.*', '*.jsx', '*.jsx.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

line 45: ^Ilet s:filetype_patterns_joined = join(s:filetype_patterns, ",")
line 46: ^Iexecute "au FileType " s:filetype_patterns_joined " call node#javascript()"
line 46: au FileType  javascript,javascript.*,*.javascript,*.javascript.*,json,json.*,*.json,*.json.*,jsx,jsx.*,*.jsx,*.jsx.*  call node#javascript()
line 47: augroup end
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/node.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/node.vim"
line 1: function! s:isNode()
line 7: 
line 8: au BufRead,BufNewFile * if !did_filetype() && s:isNode() | setf javascript | en
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/node.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim"
line 1: " unimpaired.vim - Pairs of handy bracket mappings
line 2: " Maintainer:   Tim Pope <http://tpo.pe/>
line 3: " Version:      2.1
line 4: " GetLatestVimScripts: 1590 1 :AutoInstall: unimpaired.vim
line 5: 
line 6: if exists("g:loaded_unimpaired") || &cp || v:version < 700
line 7:   finish
line 8: endif
line 9: let g:loaded_unimpaired = 1
line 10: 
line 11: function! s:Map(...) abort
line 34: 
line 35: " Section: Next and previous
line 36: 
line 37: function! s:MapNextFamily(map, cmd, current) abort
line 71: 
line 72: call s:MapNextFamily('a', '' , 'argument')
calling <SNR>134_MapNextFamily('a', '', 'argument')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-previous) :<C-U>exe "".(v:count ? v:count : "")."previous"<CR>
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-next)     :<C-U>exe "".(v:count ? v:count : "")."next"<CR>
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-first)    :<C-U><C-R>=v:count ? v:count . "argument" : "first"<CR><CR>
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-last)     :<C-U><C-R>=v:count ? v:count . "argument" : "last"<CR><CR>
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedAPrevious :<C-U>exe "".(v:count ? v:count : "")."previous"<CR>
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedANext     :<C-U>exe "".(v:count ? v:count : "")."next"<CR>
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedAFirst    :<C-U>exe "".(v:count ? v:count : "")."first"<CR>
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedALast     :<C-U>exe "".(v:count ? v:count : "")."last"<CR>
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>134_Map('n', '[a', '<Plug>(unimpaired-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [a <Plug>(unimpaired-previous)'

continuing in <SNR>134_MapNextFamily

line 14: nmap  [a <Plug>(unimpaired-previous)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>134_Map('n', ']a', '<Plug>(unimpaired-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]a <Plug>(unimpaired-next)'

continuing in <SNR>134_MapNextFamily

line 15: nmap  ]a <Plug>(unimpaired-next)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>134_Map('n', '[A', '<Plug>(unimpaired-first)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [A <Plug>(unimpaired-first)'

continuing in <SNR>134_MapNextFamily

line 16: nmap  [A <Plug>(unimpaired-first)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>134_Map('n', ']A', '<Plug>(unimpaired-last)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]A <Plug>(unimpaired-last)'

continuing in <SNR>134_MapNextFamily

line 17: nmap  ]A <Plug>(unimpaired-last)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>134_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 73: call s:MapNextFamily('b', 'b', 'buffer')
calling <SNR>134_MapNextFamily('b', 'b', 'buffer')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-bprevious) :<C-U>exe "".(v:count ? v:count : "")."bprevious"<CR>
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-bnext)     :<C-U>exe "".(v:count ? v:count : "")."bnext"<CR>
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-bfirst)    :<C-U><C-R>=v:count ? v:count . "buffer" : "bfirst"<CR><CR>
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-blast)     :<C-U><C-R>=v:count ? v:count . "buffer" : "blast"<CR><CR>
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedBPrevious :<C-U>exe "".(v:count ? v:count : "")."bprevious"<CR>
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedBNext     :<C-U>exe "".(v:count ? v:count : "")."bnext"<CR>
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedBFirst    :<C-U>exe "".(v:count ? v:count : "")."bfirst"<CR>
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedBLast     :<C-U>exe "".(v:count ? v:count : "")."blast"<CR>
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>134_Map('n', '[b', '<Plug>(unimpaired-bprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [b <Plug>(unimpaired-bprevious)'

continuing in <SNR>134_MapNextFamily

line 14: nmap  [b <Plug>(unimpaired-bprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>134_Map('n', ']b', '<Plug>(unimpaired-bnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]b <Plug>(unimpaired-bnext)'

continuing in <SNR>134_MapNextFamily

line 15: nmap  ]b <Plug>(unimpaired-bnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>134_Map('n', '[B', '<Plug>(unimpaired-bfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [B <Plug>(unimpaired-bfirst)'

continuing in <SNR>134_MapNextFamily

line 16: nmap  [B <Plug>(unimpaired-bfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>134_Map('n', ']B', '<Plug>(unimpaired-blast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]B <Plug>(unimpaired-blast)'

continuing in <SNR>134_MapNextFamily

line 17: nmap  ]B <Plug>(unimpaired-blast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>134_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 74: call s:MapNextFamily('l', 'l', 'll')
calling <SNR>134_MapNextFamily('l', 'l', 'll')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-lprevious) :<C-U>exe "".(v:count ? v:count : "")."lprevious"<CR>zv
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-lnext)     :<C-U>exe "".(v:count ? v:count : "")."lnext"<CR>zv
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-lfirst)    :<C-U><C-R>=v:count ? v:count . "ll" : "lfirst"<CR><CR>zv
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-llast)     :<C-U><C-R>=v:count ? v:count . "ll" : "llast"<CR><CR>zv
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedLPrevious :<C-U>exe "".(v:count ? v:count : "")."lprevious"<CR>zv
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedLNext     :<C-U>exe "".(v:count ? v:count : "")."lnext"<CR>zv
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedLFirst    :<C-U>exe "".(v:count ? v:count : "")."lfirst"<CR>zv
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedLLast     :<C-U>exe "".(v:count ? v:count : "")."llast"<CR>zv
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>134_Map('n', '[l', '<Plug>(unimpaired-lprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [l <Plug>(unimpaired-lprevious)'

continuing in <SNR>134_MapNextFamily

line 14: nmap  [l <Plug>(unimpaired-lprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>134_Map('n', ']l', '<Plug>(unimpaired-lnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]l <Plug>(unimpaired-lnext)'

continuing in <SNR>134_MapNextFamily

line 15: nmap  ]l <Plug>(unimpaired-lnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>134_Map('n', '[L', '<Plug>(unimpaired-lfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [L <Plug>(unimpaired-lfirst)'

continuing in <SNR>134_MapNextFamily

line 16: nmap  [L <Plug>(unimpaired-lfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>134_Map('n', ']L', '<Plug>(unimpaired-llast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]L <Plug>(unimpaired-llast)'

continuing in <SNR>134_MapNextFamily

line 17: nmap  ]L <Plug>(unimpaired-llast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 19: nnoremap <silent> <Plug>(unimpaired-lpfile)  :<C-U>exe "".(v:count ? v:count : "")."lpfile"<CR>zv
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 20: nnoremap <silent> <Plug>(unimpaired-lnfile)  :<C-U>exe "".(v:count ? v:count : "")."lnfile"<CR>zv
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 21: nnoremap <silent> <Plug>unimpairedLPFile :<C-U>exe "".(v:count ? v:count : "")."lpfile"<CR>zv
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 22: nnoremap <silent> <Plug>unimpairedLNFile :<C-U>exe "".(v:count ? v:count : "")."lnfile"<CR>zv
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
calling <SNR>134_Map('n', '[<C-L>', '<Plug>(unimpaired-lpfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [<C-L> <Plug>(unimpaired-lpfile)'

continuing in <SNR>134_MapNextFamily

line 23: nmap  [<C-L> <Plug>(unimpaired-lpfile)
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
calling <SNR>134_Map('n', ']<C-L>', '<Plug>(unimpaired-lnfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]<C-L> <Plug>(unimpaired-lnfile)'

continuing in <SNR>134_MapNextFamily

line 24: nmap  ]<C-L> <Plug>(unimpaired-lnfile)
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>134_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 75: call s:MapNextFamily('q', 'c', 'cc')
calling <SNR>134_MapNextFamily('q', 'c', 'cc')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-cprevious) :<C-U>exe "".(v:count ? v:count : "")."cprevious"<CR>zv
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-cnext)     :<C-U>exe "".(v:count ? v:count : "")."cnext"<CR>zv
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-cfirst)    :<C-U><C-R>=v:count ? v:count . "cc" : "cfirst"<CR><CR>zv
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-clast)     :<C-U><C-R>=v:count ? v:count . "cc" : "clast"<CR><CR>zv
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedQPrevious :<C-U>exe "".(v:count ? v:count : "")."cprevious"<CR>zv
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedQNext     :<C-U>exe "".(v:count ? v:count : "")."cnext"<CR>zv
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedQFirst    :<C-U>exe "".(v:count ? v:count : "")."cfirst"<CR>zv
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedQLast     :<C-U>exe "".(v:count ? v:count : "")."clast"<CR>zv
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>134_Map('n', '[q', '<Plug>(unimpaired-cprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [q <Plug>(unimpaired-cprevious)'

continuing in <SNR>134_MapNextFamily

line 14: nmap  [q <Plug>(unimpaired-cprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>134_Map('n', ']q', '<Plug>(unimpaired-cnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]q <Plug>(unimpaired-cnext)'

continuing in <SNR>134_MapNextFamily

line 15: nmap  ]q <Plug>(unimpaired-cnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>134_Map('n', '[Q', '<Plug>(unimpaired-cfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [Q <Plug>(unimpaired-cfirst)'

continuing in <SNR>134_MapNextFamily

line 16: nmap  [Q <Plug>(unimpaired-cfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>134_Map('n', ']Q', '<Plug>(unimpaired-clast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]Q <Plug>(unimpaired-clast)'

continuing in <SNR>134_MapNextFamily

line 17: nmap  ]Q <Plug>(unimpaired-clast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 19: nnoremap <silent> <Plug>(unimpaired-cpfile)  :<C-U>exe "".(v:count ? v:count : "")."cpfile"<CR>zv
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 20: nnoremap <silent> <Plug>(unimpaired-cnfile)  :<C-U>exe "".(v:count ? v:count : "")."cnfile"<CR>zv
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 21: nnoremap <silent> <Plug>unimpairedQPFile :<C-U>exe "".(v:count ? v:count : "")."cpfile"<CR>zv
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 22: nnoremap <silent> <Plug>unimpairedQNFile :<C-U>exe "".(v:count ? v:count : "")."cnfile"<CR>zv
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
calling <SNR>134_Map('n', '[<C-Q>', '<Plug>(unimpaired-cpfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [<C-Q> <Plug>(unimpaired-cpfile)'

continuing in <SNR>134_MapNextFamily

line 23: nmap  [<C-Q> <Plug>(unimpaired-cpfile)
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
calling <SNR>134_Map('n', ']<C-Q>', '<Plug>(unimpaired-cnfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]<C-Q> <Plug>(unimpaired-cnfile)'

continuing in <SNR>134_MapNextFamily

line 24: nmap  ]<C-Q> <Plug>(unimpaired-cnfile)
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>134_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 76: call s:MapNextFamily('t', 't', 'trewind')
calling <SNR>134_MapNextFamily('t', 't', 'trewind')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-tprevious) :<C-U>exe "".(v:count ? v:count : "")."tprevious"<CR>
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-tnext)     :<C-U>exe "".(v:count ? v:count : "")."tnext"<CR>
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-tfirst)    :<C-U><C-R>=v:count ? v:count . "trewind" : "tfirst"<CR><CR>
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-tlast)     :<C-U><C-R>=v:count ? v:count . "trewind" : "tlast"<CR><CR>
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedTPrevious :<C-U>exe "".(v:count ? v:count : "")."tprevious"<CR>
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedTNext     :<C-U>exe "".(v:count ? v:count : "")."tnext"<CR>
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedTFirst    :<C-U>exe "".(v:count ? v:count : "")."tfirst"<CR>
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedTLast     :<C-U>exe "".(v:count ? v:count : "")."tlast"<CR>
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>134_Map('n', '[t', '<Plug>(unimpaired-tprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [t <Plug>(unimpaired-tprevious)'

continuing in <SNR>134_MapNextFamily

line 14: nmap  [t <Plug>(unimpaired-tprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>134_Map('n', ']t', '<Plug>(unimpaired-tnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]t <Plug>(unimpaired-tnext)'

continuing in <SNR>134_MapNextFamily

line 15: nmap  ]t <Plug>(unimpaired-tnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>134_Map('n', '[T', '<Plug>(unimpaired-tfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [T <Plug>(unimpaired-tfirst)'

continuing in <SNR>134_MapNextFamily

line 16: nmap  [T <Plug>(unimpaired-tfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>134_Map('n', ']T', '<Plug>(unimpaired-tlast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]T <Plug>(unimpaired-tlast)'

continuing in <SNR>134_MapNextFamily

line 17: nmap  ]T <Plug>(unimpaired-tlast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 28: nnoremap <silent> <Plug>unimpairedTPPrevious :<C-U>exe "p".(v:count ? v:count : "")."tprevious"<CR>
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 29: nnoremap <silent> <Plug>unimpairedTPNext :<C-U>exe "p".(v:count ? v:count : "")."tnext"<CR>
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
calling <SNR>134_Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [<C-T> <Plug>(unimpaired-ptprevious)'

continuing in <SNR>134_MapNextFamily

line 30: nmap  [<C-T> <Plug>(unimpaired-ptprevious)
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
calling <SNR>134_Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]<C-T> <Plug>(unimpaired-ptnext)'

continuing in <SNR>134_MapNextFamily

line 31: nmap  ]<C-T> <Plug>(unimpaired-ptnext)
line 32:   endif
<SNR>134_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 77: 
line 78: function! s:entries(path) abort
line 91: 
line 92: function! s:FileByOffset(num) abort
line 124: 
line 125: function! s:fnameescape(file) abort
line 132: 
line 133: function! s:GetWindow() abort
line 140: 
line 141: function! s:PreviousFileEntry(count) abort
line 152: 
line 153: function! s:NextFileEntry(count) abort
line 164: 
line 165: nnoremap <silent> <Plug>(unimpaired-directory-next)     :<C-U>execute <SID>NextFileEntry(v:count1)<CR>
line 166: nnoremap <silent> <Plug>(unimpaired-directory-previous) :<C-U>execute <SID>PreviousFileEntry(v:count1)<CR>
line 167: nnoremap <silent> <Plug>unimpairedDirectoryNext     :<C-U>execute <SID>NextFileEntry(v:count1)<CR>
line 168: nnoremap <silent> <Plug>unimpairedDirectoryPrevious :<C-U>execute <SID>PreviousFileEntry(v:count1)<CR>
line 169: exe s:Map('n', ']f', '<Plug>(unimpaired-directory-next)')
calling <SNR>134_Map('n', ']f', '<Plug>(unimpaired-directory-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]f <Plug>(unimpaired-directory-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 169: nmap  ]f <Plug>(unimpaired-directory-next)
line 170: exe s:Map('n', '[f', '<Plug>(unimpaired-directory-previous)')
calling <SNR>134_Map('n', '[f', '<Plug>(unimpaired-directory-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [f <Plug>(unimpaired-directory-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 170: nmap  [f <Plug>(unimpaired-directory-previous)
line 171: 
line 172: " Section: Diff
line 173: 
line 174: nnoremap <silent> <Plug>(unimpaired-context-previous) :<C-U>call <SID>Context(1)<CR>
line 175: nnoremap <silent> <Plug>(unimpaired-context-next)     :<C-U>call <SID>Context(0)<CR>
line 176: vnoremap <silent> <Plug>(unimpaired-context-previous) :<C-U>exe 'normal! gv'<Bar>call <SID>Context(1)<CR>
line 177: vnoremap <silent> <Plug>(unimpaired-context-next)     :<C-U>exe 'normal! gv'<Bar>call <SID>Context(0)<CR>
line 178: onoremap <silent> <Plug>(unimpaired-context-previous) :<C-U>call <SID>ContextMotion(1)<CR>
line 179: onoremap <silent> <Plug>(unimpaired-context-next)     :<C-U>call <SID>ContextMotion(0)<CR>
line 180: 
line 181: exe s:Map('n', '[n', '<Plug>(unimpaired-context-previous)')
calling <SNR>134_Map('n', '[n', '<Plug>(unimpaired-context-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [n <Plug>(unimpaired-context-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 181: nmap  [n <Plug>(unimpaired-context-previous)
line 182: exe s:Map('n', ']n', '<Plug>(unimpaired-context-next)')
calling <SNR>134_Map('n', ']n', '<Plug>(unimpaired-context-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]n <Plug>(unimpaired-context-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 182: nmap  ]n <Plug>(unimpaired-context-next)
line 183: exe s:Map('x', '[n', '<Plug>(unimpaired-context-previous)')
calling <SNR>134_Map('x', '[n', '<Plug>(unimpaired-context-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  [n <Plug>(unimpaired-context-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 183: xmap  [n <Plug>(unimpaired-context-previous)
line 184: exe s:Map('x', ']n', '<Plug>(unimpaired-context-next)')
calling <SNR>134_Map('x', ']n', '<Plug>(unimpaired-context-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  ]n <Plug>(unimpaired-context-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 184: xmap  ]n <Plug>(unimpaired-context-next)
line 185: exe s:Map('o', '[n', '<Plug>(unimpaired-context-previous)')
calling <SNR>134_Map('o', '[n', '<Plug>(unimpaired-context-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'omap  [n <Plug>(unimpaired-context-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 185: omap  [n <Plug>(unimpaired-context-previous)
line 186: exe s:Map('o', ']n', '<Plug>(unimpaired-context-next)')
calling <SNR>134_Map('o', ']n', '<Plug>(unimpaired-context-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'omap  ]n <Plug>(unimpaired-context-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 186: omap  ]n <Plug>(unimpaired-context-next)
line 187: 
line 188: nnoremap <silent> <Plug>unimpairedContextPrevious :<C-U>call <SID>Context(1)<CR>
line 189: nnoremap <silent> <Plug>unimpairedContextNext     :<C-U>call <SID>Context(0)<CR>
line 190: xnoremap <silent> <Plug>unimpairedContextPrevious :<C-U>exe 'normal! gv'<Bar>call <SID>Context(1)<CR>
line 191: xnoremap <silent> <Plug>unimpairedContextNext     :<C-U>exe 'normal! gv'<Bar>call <SID>Context(0)<CR>
line 192: onoremap <silent> <Plug>unimpairedContextPrevious :<C-U>call <SID>ContextMotion(1)<CR>
line 193: onoremap <silent> <Plug>unimpairedContextNext     :<C-U>call <SID>ContextMotion(0)<CR>
line 194: 
line 195: function! s:Context(reverse) abort
line 198: 
line 199: function! s:ContextMotion(reverse) abort
line 228: 
line 229: " Section: Line operations
line 230: 
line 231: function! s:BlankUp() abort
line 238: 
line 239: function! s:BlankDown() abort
line 246: 
line 247: nnoremap <silent> <Plug>(unimpaired-blank-up)   :<C-U>exe <SID>BlankUp()<CR>
line 248: nnoremap <silent> <Plug>(unimpaired-blank-down) :<C-U>exe <SID>BlankDown()<CR>
line 249: 
line 250: nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>exe <SID>BlankUp()<CR>
line 251: nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>exe <SID>BlankDown()<CR>
line 252: 
line 253: exe s:Map('n', '[<Space>', '<Plug>(unimpaired-blank-up)')
calling <SNR>134_Map('n', '[<Space>', '<Plug>(unimpaired-blank-up)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [<Space> <Plug>(unimpaired-blank-up)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 253: nmap  [<Space> <Plug>(unimpaired-blank-up)
line 254: exe s:Map('n', ']<Space>', '<Plug>(unimpaired-blank-down)')
calling <SNR>134_Map('n', ']<Space>', '<Plug>(unimpaired-blank-down)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]<Space> <Plug>(unimpaired-blank-down)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 254: nmap  ]<Space> <Plug>(unimpaired-blank-down)
line 255: 
line 256: function! s:ExecMove(cmd) abort
line 268: 
line 269: function! s:Move(cmd, count, map) abort
line 273: 
line 274: function! s:MoveSelectionUp(count) abort
line 278: 
line 279: function! s:MoveSelectionDown(count) abort
line 283: 
line 284: nnoremap <silent> <Plug>(unimpaired-move-up)            :<C-U>call <SID>Move('--',v:count1,'up')<CR>
line 285: nnoremap <silent> <Plug>(unimpaired-move-down)          :<C-U>call <SID>Move('+',v:count1,'down')<CR>
line 286: noremap  <silent> <Plug>(unimpaired-move-selection-up)   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR>
line 287: noremap  <silent> <Plug>(unimpaired-move-selection-down) :<C-U>call <SID>MoveSelectionDown(v:count1)<CR>
line 288: nnoremap <silent> <Plug>unimpairedMoveUp            :<C-U>call <SID>Move('--',v:count1,'up')<CR>
line 289: nnoremap <silent> <Plug>unimpairedMoveDown          :<C-U>call <SID>Move('+',v:count1,'down')<CR>
line 290: noremap  <silent> <Plug>unimpairedMoveSelectionUp   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR>
line 291: noremap  <silent> <Plug>unimpairedMoveSelectionDown :<C-U>call <SID>MoveSelectionDown(v:count1)<CR>
line 292: 
line 293: exe s:Map('n', '[e', '<Plug>(unimpaired-move-up)')
calling <SNR>134_Map('n', '[e', '<Plug>(unimpaired-move-up)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [e <Plug>(unimpaired-move-up)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 293: nmap  [e <Plug>(unimpaired-move-up)
line 294: exe s:Map('n', ']e', '<Plug>(unimpaired-move-down)')
calling <SNR>134_Map('n', ']e', '<Plug>(unimpaired-move-down)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]e <Plug>(unimpaired-move-down)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 294: nmap  ]e <Plug>(unimpaired-move-down)
line 295: exe s:Map('x', '[e', '<Plug>(unimpaired-move-selection-up)')
calling <SNR>134_Map('x', '[e', '<Plug>(unimpaired-move-selection-up)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  [e <Plug>(unimpaired-move-selection-up)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 295: xmap  [e <Plug>(unimpaired-move-selection-up)
line 296: exe s:Map('x', ']e', '<Plug>(unimpaired-move-selection-down)')
calling <SNR>134_Map('x', ']e', '<Plug>(unimpaired-move-selection-down)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  ]e <Plug>(unimpaired-move-selection-down)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 296: xmap  ]e <Plug>(unimpaired-move-selection-down)
line 297: 
line 298: " Section: Option toggling
line 299: 
line 300: function! s:StatuslineRefresh() abort
line 304: 
line 305: function! s:Toggle(op) abort
line 309: 
line 310: function! s:CursorOptions() abort
line 313: 
line 314: function! s:option_map(letter, option, mode) abort
line 319: 
line 320: nmap <script> <Plug>(unimpaired-enable)b  :<C-U>set background=light<CR>
line 321: nmap <script> <Plug>(unimpaired-disable)b :<C-U>set background=dark<CR>
line 322: nmap <script> <Plug>(unimpaired-toggle)b  :<C-U>set background=<C-R>=&background == "dark" ? "light" : "dark"<CR><CR>
line 323: call s:option_map('c', 'cursorline', 'setlocal')
calling <SNR>134_option_map('c', 'cursorline', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)c :<C-U>setlocal cursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)c :<C-U>setlocal nocursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)c :<C-U>setlocal <C-R>=<SID>Toggle("cursorline")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 324: call s:option_map('-', 'cursorline', 'setlocal')
calling <SNR>134_option_map('-', 'cursorline', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)- :<C-U>setlocal cursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)- :<C-U>setlocal nocursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)- :<C-U>setlocal <C-R>=<SID>Toggle("cursorline")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 325: call s:option_map('_', 'cursorline', 'setlocal')
calling <SNR>134_option_map('_', 'cursorline', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)_ :<C-U>setlocal cursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)_ :<C-U>setlocal nocursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)_ :<C-U>setlocal <C-R>=<SID>Toggle("cursorline")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 326: call s:option_map('u', 'cursorcolumn', 'setlocal')
calling <SNR>134_option_map('u', 'cursorcolumn', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)u :<C-U>setlocal cursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)u :<C-U>setlocal nocursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)u :<C-U>setlocal <C-R>=<SID>Toggle("cursorcolumn")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 327: call s:option_map('<Bar>', 'cursorcolumn', 'setlocal')
calling <SNR>134_option_map('<Bar>', 'cursorcolumn', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)<Bar> :<C-U>setlocal cursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)<Bar> :<C-U>setlocal nocursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)<Bar> :<C-U>setlocal <C-R>=<SID>Toggle("cursorcolumn")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 328: nmap <script> <Plug>(unimpaired-enable)d  :<C-U>diffthis<CR>
line 329: nmap <script> <Plug>(unimpaired-disable)d :<C-U>diffoff<CR>
line 330: nmap <script> <Plug>(unimpaired-toggle)d  :<C-U><C-R>=&diff ? "diffoff" : "diffthis"<CR><CR>
line 331: call s:option_map('h', 'hlsearch', 'set')
calling <SNR>134_option_map('h', 'hlsearch', 'set')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)h :<C-U>set hlsearch<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)h :<C-U>set nohlsearch<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)h :<C-U>set <C-R>=<SID>Toggle("hlsearch")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 332: call s:option_map('i', 'ignorecase', 'set')
calling <SNR>134_option_map('i', 'ignorecase', 'set')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)i :<C-U>set ignorecase<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)i :<C-U>set noignorecase<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)i :<C-U>set <C-R>=<SID>Toggle("ignorecase")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 333: call s:option_map('l', 'list', 'setlocal')
calling <SNR>134_option_map('l', 'list', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)l :<C-U>setlocal list<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)l :<C-U>setlocal nolist<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)l :<C-U>setlocal <C-R>=<SID>Toggle("list")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 334: call s:option_map('n', 'number', 'setlocal')
calling <SNR>134_option_map('n', 'number', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)n :<C-U>setlocal number<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)n :<C-U>setlocal nonumber<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)n :<C-U>setlocal <C-R>=<SID>Toggle("number")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 335: call s:option_map('r', 'relativenumber', 'setlocal')
calling <SNR>134_option_map('r', 'relativenumber', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)r :<C-U>setlocal relativenumber<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)r :<C-U>setlocal norelativenumber<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)r :<C-U>setlocal <C-R>=<SID>Toggle("relativenumber")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 336: call s:option_map('s', 'spell', 'setlocal')
calling <SNR>134_option_map('s', 'spell', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)s :<C-U>setlocal spell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)s :<C-U>setlocal nospell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)s :<C-U>setlocal <C-R>=<SID>Toggle("spell")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 337: call s:option_map('w', 'wrap', 'setlocal')
calling <SNR>134_option_map('w', 'wrap', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)w :<C-U>setlocal wrap<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)w :<C-U>setlocal nowrap<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)w :<C-U>setlocal <C-R>=<SID>Toggle("wrap")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 338: if empty(maparg('<Plug>(unimpaired-toggle)z', 'n'))
line 339:   call s:option_map('z', 'spell', 'setlocal')
calling <SNR>134_option_map('z', 'spell', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)z :<C-U>setlocal spell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)z :<C-U>setlocal nospell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)z :<C-U>setlocal <C-R>=<SID>Toggle("spell")<CR><CR>
<SNR>134_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 340: endif
line 341: nmap <script> <Plug>(unimpaired-enable)v  :<C-U>set virtualedit+=all<CR>
line 342: nmap <script> <Plug>(unimpaired-disable)v :<C-U>set virtualedit-=all<CR>
line 343: nmap <script> <Plug>(unimpaired-toggle)v  :<C-U>set <C-R>=(&virtualedit =~# "all") ? "virtualedit-=all" : "virtualedit+=all"<CR><CR>
line 344: nmap <script> <Plug>(unimpaired-enable)x  :<C-U>set cursorline cursorcolumn<CR>
line 345: nmap <script> <Plug>(unimpaired-disable)x :<C-U>set nocursorline nocursorcolumn<CR>
line 346: nmap <script> <Plug>(unimpaired-toggle)x  :<C-U>set <C-R>=<SID>CursorOptions()<CR><CR>
line 347: nmap <script> <Plug>(unimpaired-enable)+  :<C-U>set cursorline cursorcolumn<CR>
line 348: nmap <script> <Plug>(unimpaired-disable)+ :<C-U>set nocursorline nocursorcolumn<CR>
line 349: nmap <script> <Plug>(unimpaired-toggle)+  :<C-U>set <C-R>=<SID>CursorOptions()<CR><CR>
line 350: 
line 351: function! s:ColorColumn(should_clear) abort
line 357: nmap <script> <Plug>(unimpaired-enable)t  :<C-U>set colorcolumn=<C-R>=<SID>ColorColumn(0)<CR><CR>
line 358: nmap <script> <Plug>(unimpaired-disable)t :<C-U>set colorcolumn=<C-R>=<SID>ColorColumn(1)<CR><CR>
line 359: nmap <script> <Plug>(unimpaired-toggle)t  :<C-U>set colorcolumn=<C-R>=<SID>ColorColumn(!empty(&cc))<CR><CR>
line 360: 
line 361: exe s:Map('n', 'yo', '<Plug>(unimpaired-toggle)')
calling <SNR>134_Map('n', 'yo', '<Plug>(unimpaired-toggle)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  yo <Plug>(unimpaired-toggle)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 361: nmap  yo <Plug>(unimpaired-toggle)
line 362: exe s:Map('n', '[o', '<Plug>(unimpaired-enable)')
calling <SNR>134_Map('n', '[o', '<Plug>(unimpaired-enable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [o <Plug>(unimpaired-enable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 362: nmap  [o <Plug>(unimpaired-enable)
line 363: exe s:Map('n', ']o', '<Plug>(unimpaired-disable)')
calling <SNR>134_Map('n', ']o', '<Plug>(unimpaired-disable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]o <Plug>(unimpaired-disable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 363: nmap  ]o <Plug>(unimpaired-disable)
line 364: exe s:Map('n', 'yo<Esc>', '<Nop>')
calling <SNR>134_Map('n', 'yo<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap <script> yo<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 364: nmap <script> yo<Esc> <Nop>
line 365: exe s:Map('n', '[o<Esc>', '<Nop>')
calling <SNR>134_Map('n', '[o<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap <script> [o<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 365: nmap <script> [o<Esc> <Nop>
line 366: exe s:Map('n', ']o<Esc>', '<Nop>')
calling <SNR>134_Map('n', ']o<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap <script> ]o<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 366: nmap <script> ]o<Esc> <Nop>
line 367: exe s:Map('n', '=s', '<Plug>(unimpaired-toggle)')
calling <SNR>134_Map('n', '=s', '<Plug>(unimpaired-toggle)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  =s <Plug>(unimpaired-toggle)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 367: nmap  =s <Plug>(unimpaired-toggle)
line 368: exe s:Map('n', '<s', '<Plug>(unimpaired-enable)')
calling <SNR>134_Map('n', '<s', '<Plug>(unimpaired-enable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  <s <Plug>(unimpaired-enable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 368: nmap  <s <Plug>(unimpaired-enable)
line 369: exe s:Map('n', '>s', '<Plug>(unimpaired-disable)')
calling <SNR>134_Map('n', '>s', '<Plug>(unimpaired-disable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  >s <Plug>(unimpaired-disable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 369: nmap  >s <Plug>(unimpaired-disable)
line 370: exe s:Map('n', '=s<Esc>', '<Nop>')
calling <SNR>134_Map('n', '=s<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap <script> =s<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 370: nmap <script> =s<Esc> <Nop>
line 371: exe s:Map('n', '<s<Esc>', '<Nop>')
calling <SNR>134_Map('n', '<s<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap <script> <s<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 371: nmap <script> <s<Esc> <Nop>
line 372: exe s:Map('n', '>s<Esc>', '<Nop>')
calling <SNR>134_Map('n', '>s<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap <script> >s<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 372: nmap <script> >s<Esc> <Nop>
line 373: 
line 374: function! s:RestorePaste() abort
line 383: 
line 384: function! s:SetupPaste() abort
line 399: 
line 400: nnoremap <silent> <Plug>unimpairedPaste :call <SID>SetupPaste()<CR>
line 401: nmap <script><silent> <Plug>(unimpaired-paste) :<C-U>call <SID>SetupPaste()<CR>
line 402: 
line 403: nmap <script><silent> <Plug>(unimpaired-enable)p  :<C-U>call <SID>SetupPaste()<CR>O
line 404: nmap <script><silent> <Plug>(unimpaired-disable)p :<C-U>call <SID>SetupPaste()<CR>o
line 405: nmap <script><silent> <Plug>(unimpaired-toggle)p  :<C-U>call <SID>SetupPaste()<CR>0C
line 406: 
line 407: " Section: Put
line 408: 
line 409: function! s:putline(how, map) abort
line 420: 
line 421: nnoremap <silent> <Plug>(unimpaired-put-above) :call <SID>putline('[p', 'above')<CR>
line 422: nnoremap <silent> <Plug>(unimpaired-put-below) :call <SID>putline(']p', 'below')<CR>
line 423: nnoremap <silent> <Plug>(unimpaired-put-above-rightward) :<C-U>call <SID>putline(v:count1 . '[p', 'Above')<CR>>']
line 424: nnoremap <silent> <Plug>(unimpaired-put-below-rightward) :<C-U>call <SID>putline(v:count1 . ']p', 'Below')<CR>>']
line 425: nnoremap <silent> <Plug>(unimpaired-put-above-leftward)  :<C-U>call <SID>putline(v:count1 . '[p', 'Above')<CR><']
line 426: nnoremap <silent> <Plug>(unimpaired-put-below-leftward)  :<C-U>call <SID>putline(v:count1 . ']p', 'Below')<CR><']
line 427: nnoremap <silent> <Plug>(unimpaired-put-above-reformat)  :<C-U>call <SID>putline(v:count1 . '[p', 'Above')<CR>=']
line 428: nnoremap <silent> <Plug>(unimpaired-put-below-reformat)  :<C-U>call <SID>putline(v:count1 . ']p', 'Below')<CR>=']
line 429: nnoremap <silent> <Plug>unimpairedPutAbove :call <SID>putline('[p', 'above')<CR>
line 430: nnoremap <silent> <Plug>unimpairedPutBelow :call <SID>putline(']p', 'below')<CR>
line 431: 
line 432: exe s:Map('n', '[p', '<Plug>(unimpaired-put-above)')
calling <SNR>134_Map('n', '[p', '<Plug>(unimpaired-put-above)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [p <Plug>(unimpaired-put-above)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 432: nmap  [p <Plug>(unimpaired-put-above)
line 433: exe s:Map('n', ']p', '<Plug>(unimpaired-put-below)')
calling <SNR>134_Map('n', ']p', '<Plug>(unimpaired-put-below)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]p <Plug>(unimpaired-put-below)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 433: nmap  ]p <Plug>(unimpaired-put-below)
line 434: exe s:Map('n', '[P', '<Plug>(unimpaired-put-above)')
calling <SNR>134_Map('n', '[P', '<Plug>(unimpaired-put-above)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [P <Plug>(unimpaired-put-above)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 434: nmap  [P <Plug>(unimpaired-put-above)
line 435: exe s:Map('n', ']P', '<Plug>(unimpaired-put-below)')
calling <SNR>134_Map('n', ']P', '<Plug>(unimpaired-put-below)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]P <Plug>(unimpaired-put-below)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 435: nmap  ]P <Plug>(unimpaired-put-below)
line 436: 
line 437: exe s:Map('n', '>P', "<Plug>(unimpaired-put-above-rightward)")
calling <SNR>134_Map('n', '>P', '<Plug>(unimpaired-put-above-rightward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  >P <Plug>(unimpaired-put-above-rightward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 437: nmap  >P <Plug>(unimpaired-put-above-rightward)
line 438: exe s:Map('n', '>p', "<Plug>(unimpaired-put-below-rightward)")
calling <SNR>134_Map('n', '>p', '<Plug>(unimpaired-put-below-rightward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  >p <Plug>(unimpaired-put-below-rightward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 438: nmap  >p <Plug>(unimpaired-put-below-rightward)
line 439: exe s:Map('n', '<P', "<Plug>(unimpaired-put-above-leftward)")
calling <SNR>134_Map('n', '<P', '<Plug>(unimpaired-put-above-leftward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  <P <Plug>(unimpaired-put-above-leftward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 439: nmap  <P <Plug>(unimpaired-put-above-leftward)
line 440: exe s:Map('n', '<p', "<Plug>(unimpaired-put-below-leftward)")
calling <SNR>134_Map('n', '<p', '<Plug>(unimpaired-put-below-leftward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  <p <Plug>(unimpaired-put-below-leftward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 440: nmap  <p <Plug>(unimpaired-put-below-leftward)
line 441: exe s:Map('n', '=P', "<Plug>(unimpaired-put-above-reformat)")
calling <SNR>134_Map('n', '=P', '<Plug>(unimpaired-put-above-reformat)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  =P <Plug>(unimpaired-put-above-reformat)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 441: nmap  =P <Plug>(unimpaired-put-above-reformat)
line 442: exe s:Map('n', '=p', "<Plug>(unimpaired-put-below-reformat)")
calling <SNR>134_Map('n', '=p', '<Plug>(unimpaired-put-below-reformat)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  =p <Plug>(unimpaired-put-below-reformat)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 442: nmap  =p <Plug>(unimpaired-put-below-reformat)
line 443: 
line 444: " Section: Encoding and decoding
line 445: 
line 446: function! s:string_encode(str) abort
line 450: 
line 451: function! s:string_decode(str) abort
line 459: 
line 460: function! s:url_encode(str) abort
line 464: 
line 465: function! s:url_decode(str) abort
line 469: 
line 470: " HTML entities {{{2
line 471: 
line 472: let g:unimpaired_html_entities = { 'nbsp':     160, 'iexcl':    161, 'cent':     162, 'pound':    163, 'curren':   164, 'yen':      165, 'brvbar':   166, 'sect':     167, 'uml':      168, 'copy':     169, 'ordf':     170, 'laquo':    171, 'not':      172, 'shy':      173, 'reg':      174, 'macr':     175, 'deg':      176, 'plusmn':   177, 'sup2':     178, 'sup3':     179, 'acute':    180, 'micro':    181, 'para':     182, 'middot':   183, 'cedil':    184, 'sup1':     185, 'ordm':     186, 'raquo':    187, 'frac14':   188, 'frac12':   189, 'frac34':   190, 'iquest':   191, 'Agrave':   192, 'Aacute':   193, 'Acirc':    194, 'Atilde':   195, 'Auml':     196, 'Aring':    197, 'AElig':    198, 'Ccedil':   199, 'Egrave':   200, 'Eacute':   201, 'Ecirc':    202, 'Euml':     203, 'Igrave':   204, 'Iacute':   205, 'Icirc':    206, 'Iuml':     207, 'ETH':      208, 'Ntilde':   209, 'Ograve':   210, 'Oacute':   211, 'Ocirc':    212, 'Otilde':   213, 'Ouml':     214, 'times':    215, 'Oslash':   216, 'Ugrave': 
line 536: 
line 537: " }}}2
line 538: 
line 539: function! s:xml_encode(str) abort
line 548: 
line 549: function! s:xml_entity_decode(str) abort
line 560: 
line 561: function! s:xml_decode(str) abort
line 565: 
line 566: function! s:Transform(algorithm,type) abort
line 589: 
line 590: function! s:TransformOpfunc(type) abort
line 593: 
line 594: function! s:TransformSetup(algorithm) abort
line 599: 
line 600: function! UnimpairedMapTransform(algorithm, key) abort
line 613: 
line 614: exe UnimpairedMapTransform('string_encode','[y')
calling UnimpairedMapTransform('string_encode', '[y')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_encode <SID>TransformSetup("string_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-encode-line) <SID>TransformSetup("string_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', '[y', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [y <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [y <Plug>(unimpaired-string-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', '[y', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  [y <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [y <Plug>(unimpaired-string-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', '[yy', '<Plug>(unimpaired-string-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [yy <Plug>(unimpaired-string-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [yy <Plug>(unimpaired-string-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 614: 
line 615: exe UnimpairedMapTransform('string_decode',']y')
calling UnimpairedMapTransform('string_decode', ']y')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_decode <SID>TransformSetup("string_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-decode-line) <SID>TransformSetup("string_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', ']y', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]y <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]y <Plug>(unimpaired-string-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', ']y', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  ]y <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]y <Plug>(unimpaired-string-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', ']yy', '<Plug>(unimpaired-string-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]yy <Plug>(unimpaired-string-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]yy <Plug>(unimpaired-string-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 615: 
line 616: exe UnimpairedMapTransform('string_encode','[C')
calling UnimpairedMapTransform('string_encode', '[C')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_encode <SID>TransformSetup("string_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-encode-line) <SID>TransformSetup("string_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', '[C', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [C <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [C <Plug>(unimpaired-string-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', '[C', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  [C <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [C <Plug>(unimpaired-string-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', '[CC', '<Plug>(unimpaired-string-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [CC <Plug>(unimpaired-string-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [CC <Plug>(unimpaired-string-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 616: 
line 617: exe UnimpairedMapTransform('string_decode',']C')
calling UnimpairedMapTransform('string_decode', ']C')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_decode <SID>TransformSetup("string_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-decode-line) <SID>TransformSetup("string_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', ']C', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]C <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]C <Plug>(unimpaired-string-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', ']C', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  ]C <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]C <Plug>(unimpaired-string-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', ']CC', '<Plug>(unimpaired-string-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]CC <Plug>(unimpaired-string-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]CC <Plug>(unimpaired-string-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 617: 
line 618: exe UnimpairedMapTransform('url_encode','[u')
calling UnimpairedMapTransform('url_encode', '[u')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_url_encode <SID>TransformSetup("url_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_url_encode <SID>TransformSetup("url_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_url_encode <SID>TransformSetup("url_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-url-encode) <SID>TransformSetup("url_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-url-encode) <SID>TransformSetup("url_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-url-encode-line) <SID>TransformSetup("url_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', '[u', '<Plug>(unimpaired-url-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [u <Plug>(unimpaired-url-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [u <Plug>(unimpaired-url-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', '[u', '<Plug>(unimpaired-url-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  [u <Plug>(unimpaired-url-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [u <Plug>(unimpaired-url-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', '[uu', '<Plug>(unimpaired-url-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [uu <Plug>(unimpaired-url-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [uu <Plug>(unimpaired-url-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 618: 
line 619: exe UnimpairedMapTransform('url_decode',']u')
calling UnimpairedMapTransform('url_decode', ']u')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_url_decode <SID>TransformSetup("url_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_url_decode <SID>TransformSetup("url_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_url_decode <SID>TransformSetup("url_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-url-decode) <SID>TransformSetup("url_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-url-decode) <SID>TransformSetup("url_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-url-decode-line) <SID>TransformSetup("url_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', ']u', '<Plug>(unimpaired-url-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]u <Plug>(unimpaired-url-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]u <Plug>(unimpaired-url-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', ']u', '<Plug>(unimpaired-url-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  ]u <Plug>(unimpaired-url-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]u <Plug>(unimpaired-url-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', ']uu', '<Plug>(unimpaired-url-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]uu <Plug>(unimpaired-url-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]uu <Plug>(unimpaired-url-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 619: 
line 620: exe UnimpairedMapTransform('xml_encode','[x')
calling UnimpairedMapTransform('xml_encode', '[x')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_xml_encode <SID>TransformSetup("xml_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_xml_encode <SID>TransformSetup("xml_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_xml_encode <SID>TransformSetup("xml_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-xml-encode) <SID>TransformSetup("xml_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-xml-encode) <SID>TransformSetup("xml_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-xml-encode-line) <SID>TransformSetup("xml_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', '[x', '<Plug>(unimpaired-xml-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [x <Plug>(unimpaired-xml-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [x <Plug>(unimpaired-xml-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', '[x', '<Plug>(unimpaired-xml-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  [x <Plug>(unimpaired-xml-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [x <Plug>(unimpaired-xml-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', '[xx', '<Plug>(unimpaired-xml-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  [xx <Plug>(unimpaired-xml-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [xx <Plug>(unimpaired-xml-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 620: 
line 621: exe UnimpairedMapTransform('xml_decode',']x')
calling UnimpairedMapTransform('xml_decode', ']x')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_xml_decode <SID>TransformSetup("xml_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_xml_decode <SID>TransformSetup("xml_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_xml_decode <SID>TransformSetup("xml_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-xml-decode) <SID>TransformSetup("xml_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-xml-decode) <SID>TransformSetup("xml_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-xml-decode-line) <SID>TransformSetup("xml_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('n', ']x', '<Plug>(unimpaired-xml-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]x <Plug>(unimpaired-xml-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]x <Plug>(unimpaired-xml-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>134_Map('x', ']x', '<Plug>(unimpaired-xml-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'xmap  ]x <Plug>(unimpaired-xml-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]x <Plug>(unimpaired-xml-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>134_Map('n', ']xx', '<Plug>(unimpaired-xml-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>134_Map returning 'nmap  ]xx <Plug>(unimpaired-xml-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]xx <Plug>(unimpaired-xml-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 621: 
line 622: 
line 623: " vim:set sw=2 sts=2:
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim"
line 1: " fugitive.vim - A Git wrapper so awesome, it should be illegal
line 2: " Maintainer:   Tim Pope <http://tpo.pe/>
line 3: " Version:      3.7
line 4: " GetLatestVimScripts: 2975 1 :AutoInstall: fugitive.vim
line 5: 
line 6: if exists('g:loaded_fugitive')
line 7:   finish
line 8: endif
line 9: let g:loaded_fugitive = 1
line 10: 
line 11: let s:bad_git_dir = '/$\|^fugitive:'
line 12: 
line 13: " FugitiveGitDir() returns the detected Git dir for the given buffer number,
line 14: " or the current buffer if no argument is passed.  This will be an empty
line 15: " string if no Git dir was found.  Use !empty(FugitiveGitDir()) to check if
line 16: " Fugitive is active in the current buffer.  Do not rely on this for direct
line 17: " filesystem access; use FugitiveFind('.git/whatever') instead.
line 18: function! FugitiveGitDir(...) abort
line 47: 
line 48: " FugitiveReal() takes a fugitive:// URL and returns the corresponding path in
line 49: " the work tree.  This may be useful to get a cleaner path for inclusion in
line 50: " the statusline, for example.  Note that the file and its parent directories
line 51: " are not guaranteed to exist.
line 52: "
line 53: " This is intended as an abstract API to be used on any "virtual" path.  For a
line 54: " buffer named foo://bar, check for a function named FooReal(), and if it
line 55: " exists, call FooReal("foo://bar").
line 56: function! FugitiveReal(...) abort
line 70: 
line 71: " FugitiveFind() takes a Fugitive object and returns the appropriate Vim
line 72: " buffer name.  You can use this to generate Fugitive URLs ("HEAD:README") or
line 73: " to get the absolute path to a file in the Git dir (".git/HEAD"), the common
line 74: " dir (".git/config"), or the work tree (":(top)Makefile").
line 75: "
line 76: " An optional second argument provides the Git dir, or the buffer number of a
line 77: " buffer with a Git dir.  The default is the current buffer.
line 78: function! FugitiveFind(...) abort
line 85: 
line 86: " FugitiveParse() takes a fugitive:// URL and returns a 2 element list
line 87: " containing an object name ("commit:file") and the Git dir.  It's effectively
line 88: " the inverse of FugitiveFind().
line 89: function! FugitiveParse(...) abort
line 100: 
line 101: " FugitiveGitVersion() queries the version of Git in use.  Pass up to 3
line 102: " arguments to return a Boolean of whether a certain minimum version is
line 103: " available (FugitiveGitVersion(2,3,4) checks for 2.3.4 or higher) or no
line 104: " arguments to get a raw string.
line 105: function! FugitiveGitVersion(...) abort
line 108: 
line 109: " FugitiveResult() returns an object encapsulating the result of the most
line 110: " recent :Git command.  Will be empty if no result is available.  During a
line 111: " User FugitiveChanged event, this is guaranteed to correspond to the :Git
line 112: " command that triggered the event, or be empty if :Git was not the trigger.
line 113: " Pass in the name of a temp buffer to get the result object for that command
line 114: " instead.  Contains the following keys:
line 115: "
line 116: " * "args": List of command arguments, starting with the subcommand.  Will be
line 117: "   empty for usages like :Git --help.
line 118: " * "git_dir": Git dir of the relevant repository.
line 119: " * "exit_status": The integer exit code of the process.
line 120: " * "flags": Flags passed directly to Git, like -c and --help.
line 121: " * "file": Path to file containing command output.  Not guaranteed to exist,
line 122: "   so verify with filereadable() before trying to access it.
line 123: function! FugitiveResult(...) abort
line 126: 
line 127: " FugitiveExecute() runs Git with a list of arguments and returns a dictionary
line 128: " with the following keys:
line 129: "
line 130: " * "exit_status": The integer exit code of the process.
line 131: " * "stdout": The stdout produced by the process, as a list of lines.
line 132: " * "stderr": The stdout produced by the process, as a list of lines.
line 133: "
line 134: " An optional second argument provides the Git dir, or the buffer number of a
line 135: " buffer with a Git dir.  The default is the current buffer.
line 136: "
line 137: " An optional final argument is a callback Funcref, for asynchronous
line 138: " execution.
line 139: function! FugitiveExecute(args, ...) abort
line 142: 
line 143: " FugitiveShellCommand() turns an array of arguments into a Git command string
line 144: " which can be executed with functions like system() and commands like :!.
line 145: " Integer arguments will be treated as buffer numbers, and the appropriate
line 146: " relative path inserted in their place.
line 147: "
line 148: " An optional second argument provides the Git dir, or the buffer number of a
line 149: " buffer with a Git dir.  The default is the current buffer.
line 150: function! FugitiveShellCommand(...) abort
line 153: 
line 154: " FugitiveConfig() get returns an opaque structure that can be passed to other
line 155: " FugitiveConfig functions in lieu of a Git directory.  This can be faster
line 156: " when performing multiple config queries.  Do not rely on the internal
line 157: " structure of the return value as it is not guaranteed.  If you want a full
line 158: " dictionary of every config value, use FugitiveConfigGetRegexp('.*').
line 159: "
line 160: " An optional argument provides the Git dir, or the buffer number of a
line 161: " buffer with a Git dir.  The default is the current buffer.  Pass a blank
line 162: " string to limit to the global config.
line 163: function! FugitiveConfig(...) abort
line 166: 
line 167: " FugitiveConfigGet() retrieves a Git configuration value.  An optional second
line 168: " argument can be either the object returned by FugitiveConfig(), or a Git
line 169: " dir or buffer number to be passed along to FugitiveConfig().
line 170: function! FugitiveConfigGet(name, ...) abort
line 173: 
line 174: " FugitiveConfigGetAll() is like FugitiveConfigGet() but returns a list of
line 175: " all values.
line 176: function! FugitiveConfigGetAll(name, ...) abort
line 179: 
line 180: " FugitiveConfigGetRegexp() retrieves a dictionary of all configuration values
line 181: " with a key matching the given pattern.  Like git config --get-regexp, but
line 182: " using a Vim regexp.  Second argument has same semantics as
line 183: " FugitiveConfigGet().
line 184: function! FugitiveConfigGetRegexp(pattern, ...) abort
line 187: 
line 188: " FugitiveRemoteUrl() retrieves the remote URL for the given remote name,
line 189: " defaulting to the current branch's remote or "origin" if no argument is
line 190: " given.  Similar to `git remote get-url`, but also attempts to resolve HTTP
line 191: " redirects and SSH host aliases.
line 192: "
line 193: " An optional second argument provides the Git dir, or the buffer number of a
line 194: " buffer with a Git dir.  The default is the current buffer.
line 195: function! FugitiveRemoteUrl(...) abort
line 198: 
line 199: " FugitiveRemote() returns a data structure parsed from the remote URL.
line 200: " For example, for remote URL "https://me@example.com:1234/repo.git", the
line 201: " returned dictionary will contain the following:
line 202: "
line 203: " * "scheme": "https"
line 204: " * "authority": "user@example.com:1234"
line 205: " * "path": "/repo.git" (for SSH URLs this may be a relative path)
line 206: " * "pathname": "/repo.git" (always coerced to absolute path)
line 207: " * "host": "example.com:1234"
line 208: " * "hostname": "example.com"
line 209: " * "port": "1234"
line 210: " * "user": "me"
line 211: " * "path": "/repo.git"
line 212: " * "url": "https://me@example.com:1234/repo.git"
line 213: function! FugitiveRemote(...) abort
line 216: 
line 217: " FugitiveDidChange() triggers a FugitiveChanged event and reloads the summary
line 218: " buffer for the current or given buffer number's repository.  You can also
line 219: " give the result of a FugitiveExecute() and that context will be made
line 220: " available inside the FugitiveChanged() event.
line 221: "
line 222: " Passing the special argument 0 (the number zero) softly expires summary
line 223: " buffers for all repositories.  This can be used after a call to system()
line 224: " with unclear implications.
line 225: function! FugitiveDidChange(...) abort
line 228: 
line 229: " FugitiveHead() retrieves the name of the current branch. If the current HEAD
line 230: " is detached, FugitiveHead() will return the empty string, unless the
line 231: " optional argument is given, in which case the hash of the current commit
line 232: " will be truncated to the given number of characters.
line 233: "
line 234: " An optional second argument provides the Git dir, or the buffer number of a
line 235: " buffer with a Git dir.  The default is the current buffer.
line 236: function! FugitiveHead(...) abort
line 252: 
line 253: function! FugitivePath(...) abort
line 264: 
line 265: function! FugitiveStatusline(...) abort
line 271: 
line 272: let s:resolved_git_dirs = {}
line 273: function! FugitiveActualDir(...) abort
line 283: 
line 284: let s:commondirs = {}
line 285: function! FugitiveCommonDir(...) abort
line 307: 
line 308: function! FugitiveWorkTree(...) abort
line 316: 
line 317: function! FugitiveIsGitDir(...) abort
line 326: 
line 327: function! s:ReadFile(path, line_count) abort
line 337: 
line 338: let s:worktree_for_dir = {}
line 339: let s:dir_for_worktree = {}
line 340: function! s:Tree(path) abort
line 387: 
line 388: function! s:CeilingDirectories() abort
line 404: 
line 405: function! s:ResolveGitDir(git_dir) abort
line 422: 
line 423: function! FugitiveExtractGitDir(path) abort
line 471: 
line 472: function! FugitiveDetect(...) abort
line 484: 
line 485: function! FugitiveGitPath(path) abort
line 488: 
line 489: if exists('+shellslash')
line 490: 
line 491:   function! s:Slash(path) abort
line 494: 
line 495:   function! s:VimSlash(path) abort
line 498: 
line 499:   function FugitiveVimPath(path) abort
line 502: 
line 503: else
line 504: 
line 505:   function! s:Slash(path) abort
line 508: 
line 509:   function! s:VimSlash(path) abort
line 512: 
line 513:   if has('win32unix') && filereadable('/git-bash.exe')
line 514:     function! FugitiveVimPath(path) abort
line 517:   else
line 518:     function! FugitiveVimPath(path) abort
line 521:   endif
line 522: 
line 523: endif
line 524: 
line 525: function! s:ProjectionistDetect() abort
line 542: 
line 543: let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''
line 544: let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''
line 545: let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''
line 546: 
line 547: if exists(':G') != 2
line 548:   command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 549: endif
line 550: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 551: 
line 552: if exists(':Gstatus') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 553:   exe 'command! -bang -bar     -range=-1' s:addr_other 'Gstatus exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gstatus is deprecated in favor of :Git (with no arguments)"|echohl NONE'
line 555: endif
line 556: 
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 564: unlet s:cmd
line 565: 
line 566: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)"
line 566: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)
line 567: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)"
line 567: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)
line 568: 
line 569: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 569: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 570: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)'
line 570: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)
line 571: 
line 572: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'
line 572: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")
line 573: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'
line 573: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")
line 574: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'
line 574: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")
line 575: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'
line 575: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")
line 576: 
line 577: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'
line 577: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)
line 578: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'
line 578: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)
line 579: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)'
line 579: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)
line 580: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#EditComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)'
line 580: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#EditComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)
line 581: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#EditComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)'
line 581: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#EditComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)
line 582: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_tabs  '-complete=customlist,fugitive#EditComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)'
line 582: command! -bar -bang -nargs=* -range=-1 -addr=tabs -complete=customlist,fugitive#EditComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)
line 583: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gdrop    exe fugitive#DropCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 583: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gdrop    exe fugitive#DropCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 584: 
line 585: if exists(':Gr') != 2
line 586:   exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 586: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 587: endif
line 588: exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 588: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 589: 
line 590: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)'
line 590: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)
line 591: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)'
line 591: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)
line 592: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)'
line 592: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)
line 593: 
line 594: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 594: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 595: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 595: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 596: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 596: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 597: 
line 598: exe 'command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 598: command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 599: exe 'command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 599: command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 600: exe 'command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 600: command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 601: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 601: command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 602: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 602: command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 603: if exists(':Gremove') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 604:   exe 'command! -bar -bang -nargs=0 Gremove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gremove is deprecated in favor of :GRemove"|echohl NONE'
line 606: elseif exists(':Gremove') != 2 && !exists('g:fugitive_legacy_commands')
line 607:   exe 'command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"'
line 607: command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"
line 608: endif
line 609: if exists(':Gdelete') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 610:   exe 'command! -bar -bang -nargs=0 Gdelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gdelete is deprecated in favor of :GDelete"|echohl NONE'
line 612: elseif exists(':Gdelete') != 2 && !exists('g:fugitive_legacy_commands')
line 613:   exe 'command! -bar -bang -nargs=0 Gdelete echoerr ":Gdelete has been removed in favor of :GDelete"'
line 613: command! -bar -bang -nargs=0 Gdelete echoerr ":Gdelete has been removed in favor of :GDelete"
line 614: endif
line 615: if exists(':Gmove') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 616:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject Gmove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gmove is deprecated in favor of :GMove"|echohl NONE'
line 618: elseif exists(':Gmove') != 2 && !exists('g:fugitive_legacy_commands')
line 619:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove' 'echoerr ":Gmove has been removed in favor of :GMove"'
line 619: command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove echoerr ":Gmove has been removed in favor of :GMove"
line 621: endif
line 622: if exists(':Grename') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 623:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete Grename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Grename is deprecated in favor of :GRename"|echohl NONE'
line 625: elseif exists(':Grename') != 2 && !exists('g:fugitive_legacy_commands')
line 626:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename' 'echoerr ":Grename has been removed in favor of :GRename"'
line 626: command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename echoerr ":Grename has been removed in favor of :GRename"
line 628: endif
line 629: 
line 630: exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 630: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 631: if exists(':Gbrowse') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 632:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|if <bang>1|redraw!|endif|echohl WarningMSG|echomsg ":Gbrowse is deprecated in favor of :GBrowse"|echohl NONE'
line 634: elseif exists(':Gbrowse') != 2 && !exists('g:fugitive_legacy_commands')
line 635:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse' 'echoerr ":Gbrowse has been removed in favor of :GBrowse"'
line 635: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse echoerr ":Gbrowse has been removed in favor of :GBrowse"
line 637: endif
line 638: 
line 639: if v:version < 704
line 640:   finish
line 641: endif
line 642: 
line 643: let g:io_fugitive = { 'simplify': function('fugitive#simplify'), 'resolve': function('fugitive#resolve'), 'getftime': function('fugitive#getftime'), 'getfsize': function('fugitive#getfsize'), 'getftype': function('fugitive#getftype'), 'filereadable': function('fugitive#filereadable'), 'filewritable': function('fugitive#filewritable'), 'isdirectory': function('fugitive#isdirectory'), 'getfperm': function('fugitive#getfperm'), 'setfperm': function('fugitive#setfperm'), 'readfile': function('fugitive#readfile'), 'writefile': function('fugitive#writefile'), 'glob': function('fugitive#glob'), 'delete': function('fugitive#delete'), 'Real': function('FugitiveReal')}
line 659: 
line 660: augroup fugitive
line 661:   autocmd!
line 662: 
line 663:   autocmd BufNewFile,BufReadPost * if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif
line 667:   autocmd FileType           netrw if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif
line 671:   autocmd BufFilePost            *  unlet! b:git_dir
line 672: 
line 673:   autocmd FileType git call fugitive#MapCfile()
line 675:   autocmd FileType gitcommit call fugitive#MapCfile('fugitive#MessageCfile()')
line 677:   autocmd FileType git,gitcommit if &foldtext ==# 'foldtext()' |    setlocal foldtext=fugitive#Foldtext() | endif
line 681:   autocmd FileType fugitive call fugitive#MapCfile('fugitive#PorcelainCfile()')
line 683:   autocmd FileType gitrebase let &l:include = '^\%(pick\|squash\|edit\|reword\|fixup\|drop\|[pserfd]\)\>' | if &l:includeexpr !~# 'Fugitive' |   let &l:includeexpr = 'v:fname =~# ''^\x\{4,\}$'' && len(FugitiveGitDir()) ? FugitiveFind(v:fname) : ' .     (len(&l:includeexpr) ? &l:includeexpr : 'v:fname') | endif | let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|setl inex= inc='
line 690: 
line 691:   autocmd BufReadCmd index{,.lock} nested if FugitiveIsGitDir(expand('<amatch>:p:h')) |   let b:git_dir = s:Slash(expand('<amatch>:p:h')) |   exe fugitive#BufReadStatus(v:cmdbang) |   echohl WarningMSG |   echo "fugitive: Direct editing of .git/" . expand('%:t') . " is deprecated" |   echohl NONE | elseif filereadable(expand('<amatch>')) |   silent doautocmd BufReadPre |   keepalt noautocmd read <amatch> |   silent 1delete_ |   silent doautocmd BufReadPost | else |   silent doautocmd BufNewFile | endif
line 706: 
line 707:   autocmd BufReadCmd   fugitive://*          nested exe fugitive#BufReadCmd() | if &path =~# '^\.\%(,\|$\)' |   let &l:path = substitute(&path, '^\.,\=', '', '') | endif
line 711:   autocmd BufWriteCmd  fugitive://*          nested exe fugitive#BufWriteCmd()
line 712:   autocmd FileReadCmd  fugitive://*          nested exe fugitive#FileReadCmd()
line 713:   autocmd FileWriteCmd fugitive://*          nested exe fugitive#FileWriteCmd()
line 714:   if exists('##SourceCmd')
line 715:     autocmd SourceCmd     fugitive://*       nested exe fugitive#SourceCmd()
line 716:   endif
line 717: 
line 718:   autocmd User Flags call Hoist('buffer', function('FugitiveStatusline'))
line 719: 
line 720:   autocmd User ProjectionistDetect call s:ProjectionistDetect()
line 721: augroup END
line 722: 
line 723: nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
line 724: nmap <script> <Plug>fugitive: <Nop>
line 725: 
line 726: if get(g:, 'fugitive_no_maps')
line 727:   finish
line 728: endif
line 729: 
line 730: function! s:Map(mode, lhs, rhs, flags) abort
line 752: 
line 753: call s:Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')
calling <SNR>135_Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'
line 2:   let head = a:lhs
line 3:   let tail = ''
line 4:   let keys = get(g:, a:mode.'remap', {})
line 5:   if len(keys) && type(keys) == type({})
line 6:     while !empty(head)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           return
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if empty(mapcheck(head.tail, a:mode))
line 19:     exe a:mode.'map' flags head.tail a:rhs
line 19: cmap <expr><script><nowait> <C-R><C-G> fnameescape(fugitive#Object(@%))
line 20:   endif
<SNR>135_Map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim

line 754: call s:Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')
calling <SNR>135_Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'
line 2:   let head = a:lhs
line 3:   let tail = ''
line 4:   let keys = get(g:, a:mode.'remap', {})
line 5:   if len(keys) && type(keys) == type({})
line 6:     while !empty(head)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           return
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if empty(mapcheck(head.tail, a:mode))
line 19:     exe a:mode.'map' flags head.tail a:rhs
line 19: nmap <silent><script><nowait> y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
line 20:   endif
<SNR>135_Map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim

finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/fugitive.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/fugitive.vim"
line 1: autocmd BufReadPost *.fugitiveblame setfiletype fugitiveblame
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/fugitive.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/tmux_navigator.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/tmux_navigator.vim"
line 1: " Maps <C-h/j/k/l> to switch vim splits in the given direction. If there are
line 2: " no more windows in that direction, forwards the operation to tmux.
line 3: " Additionally, <C-\> toggles between last active vim splits/tmux panes.
line 4: 
line 5: if exists("g:loaded_tmux_navigator") || &cp || v:version < 700
line 6:   finish
line 7: endif
line 8: let g:loaded_tmux_navigator = 1
line 9: 
line 10: function! s:VimNavigate(direction)
line 17: 
line 18: if !get(g:, 'tmux_navigator_no_mappings', 0)
line 19:   noremap <silent> <c-h> :<C-U>TmuxNavigateLeft<cr>
line 20:   noremap <silent> <c-j> :<C-U>TmuxNavigateDown<cr>
line 21:   noremap <silent> <c-k> :<C-U>TmuxNavigateUp<cr>
line 22:   noremap <silent> <c-l> :<C-U>TmuxNavigateRight<cr>
line 23:   noremap <silent> <c-\> :<C-U>TmuxNavigatePrevious<cr>
line 24: endif
line 25: 
line 26: if empty($TMUX)
line 27:   command! TmuxNavigateLeft call s:VimNavigate('h')
line 28:   command! TmuxNavigateDown call s:VimNavigate('j')
line 29:   command! TmuxNavigateUp call s:VimNavigate('k')
line 30:   command! TmuxNavigateRight call s:VimNavigate('l')
line 31:   command! TmuxNavigatePrevious call s:VimNavigate('p')
line 32:   finish
line 33: endif
line 34: 
line 35: command! TmuxNavigateLeft call s:TmuxAwareNavigate('h')
line 36: command! TmuxNavigateDown call s:TmuxAwareNavigate('j')
line 37: command! TmuxNavigateUp call s:TmuxAwareNavigate('k')
line 38: command! TmuxNavigateRight call s:TmuxAwareNavigate('l')
line 39: command! TmuxNavigatePrevious call s:TmuxAwareNavigate('p')
line 40: 
line 41: if !exists("g:tmux_navigator_save_on_switch")
line 42:   let g:tmux_navigator_save_on_switch = 0
line 43: endif
line 44: 
line 45: if !exists("g:tmux_navigator_disable_when_zoomed")
line 46:   let g:tmux_navigator_disable_when_zoomed = 0
line 47: endif
line 48: 
line 49: if !exists("g:tmux_navigator_preserve_zoom")
line 50:   let g:tmux_navigator_preserve_zoom = 0
line 51: endif
line 52: 
line 53: if !exists("g:tmux_navigator_no_wrap")
line 54:   let g:tmux_navigator_no_wrap = 0
line 55: endif
line 56: 
line 57: let s:pane_position_from_direction = {'h': 'left', 'j': 'bottom', 'k': 'top', 'l': 'right'}
line 58: 
line 59: function! s:TmuxOrTmateExecutable()
line 62: 
line 63: function! s:TmuxVimPaneIsZoomed()
line 66: 
line 67: function! s:TmuxSocket()
line 71: 
line 72: function! s:TmuxCommand(args)
line 80: 
line 81: function! s:TmuxNavigatorProcessList()
line 84: command! TmuxNavigatorProcessList call s:TmuxNavigatorProcessList()
line 85: 
line 86: let s:tmux_is_last_pane = 0
line 87: augroup tmux_navigator
line 88:   au!
line 89:   autocmd WinEnter * let s:tmux_is_last_pane = 0
line 90: augroup END
line 91: 
line 92: function! s:NeedsVitalityRedraw()
line 95: 
line 96: function! s:ShouldForwardNavigationBackToTmux(tmux_last_pane, at_tab_page_edge)
line 102: 
line 103: function! s:TmuxAwareNavigate(direction)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/tmux_navigator.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim"
line 1: " illuminate.vim - Vim plugin for selectively illuminating other uses of current word
line 2: " Maintainer:^IAdam P. Regasz-Rethy (RRethy) <rethy.spud@gmail.com>
line 3: " Version: 2.0
line 4: 
line 5: if exists('g:loaded_illuminate')
line 6:   finish
line 7: endif
line 8: 
line 9: let g:loaded_illuminate = 1
line 10: 
line 11: if has('nvim-0.7.2') && get(g:, 'Illuminate_useDeprecated', 0) != 1
line 12: lua << EOF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 46: 
line 47: lua require('illuminate').set_highlight_defaults()
Executing:     hi def IlluminatedWordText guifg=none guibg=none gui=underline
Executing:     hi def IlluminatedWordRead guifg=none guibg=none gui=underline
Executing:     hi def IlluminatedWordWrite guifg=none guibg=none gui=underline
Executing:     
line 48: augroup vim_illuminate_autocmds
line 49:     autocmd!
line 50:     autocmd ColorScheme * lua require('illuminate').set_highlight_defaults()
line 51: augroup END
line 52: 
line 53: finish
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.vim"
line 1: command! -nargs=* WhichKey lua require('which-key').show_command(<f-args>)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/sort_motion.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/sort_motion.vim"
line 1: " sort-motion.vim - Sort based on linewise motions
line 2: " Maintainer:   Chris Toomey <http://ctoomey.com/>
line 3: " Version:      0.1
line 4: " Source:       http://github.com/christoomey/vim-sort-motion
line 5: 
line 6: if exists('g:loaded_sort_motion') || &cp || v:version < 700
line 7:   finish
line 8: endif
line 9: let g:loaded_sort_motion = 1
line 10: 
line 11: nnoremap <silent> <Plug>SortMotion :<C-U>set opfunc=sort_motion#sort_motion<CR>g@
line 13: xnoremap <silent> <Plug>SortMotionVisual :<C-U>call sort_motion#sort_motion(visualmode())<CR>
line 15: nnoremap <silent> <Plug>SortLines :<C-U>call sort_motion#sort_lines()<CR>
line 17: 
line 18: if !hasmapto('<Plug>SortMotion', 'n') && maparg('gs', 'n') ==# ''
line 19:   nmap gs <Plug>SortMotion
line 20: endif
line 21: if !hasmapto('<Plug>SortMotionVisual', 'x') && maparg('gs', 'x') ==# ''
line 22:   xmap gs <Plug>SortMotionVisual
line 23: endif
line 24: if !hasmapto('<Plug>SortLines', 'n') && maparg('gss', 'n') ==# ''
line 25:   nmap gss <Plug>SortLines
line 26: endif
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/sort_motion.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim"
line 1: lua << EOF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSelect lua require'nvim-treesitter.textobjects.select'.commands.TSTextobjectSelect['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextStart['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousEnd['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousStart['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextEnd['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMovePrevious lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMovePrevious['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveNext lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveNext['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveOpposite lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveOpposite['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMove lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMove['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinT lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinT['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltint lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltint['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinF lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinF['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinf lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinf['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapPrevious lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapPrevious['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapNext lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapNext['run<bang>'](<f-args>)
line 3: command! -bar -nargs=+ -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectPeekDefinitionCode lua require'nvim-treesitter.textobjects.lsp_interop'.commands.TSTextobjectPeekDefinitionCode['run<bang>'](<f-args>)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: 


--- Terminal info --- {{{
&term: screen-256color
Description: GNU Screen with 256 colors
Aliases: screen-256color
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = false
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = false
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = false
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = false
  back_color_erase          bce        = false
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = true
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = true
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 65536
  no_color_video            ncv        = -1
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = ^[[Z
  bell                      bel        = ^G
  carriage_return           cr         = ^M
  change_scroll_region      csr        = ^[[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = ^[[3g
  clear_screen              clear      = ^[[H^[[J
  clr_eol                   el         = ^[[K
  clr_eos                   ed         = ^[[J
  column_address            hpa        = ^[[%i%p1%dG
  cursor_address            cup        = ^[[%i%p1%d;%p2%dH
  cursor_down               cud1       = ^@
  cursor_home               home       = ^[[H
  cursor_invisible          civis      = ^[[?25l
  cursor_left               cub1       = ^H
  cursor_normal             cnorm      = ^[[34h^[[?25h
  cursor_right              cuf1       = ^[[C
  cursor_up                 cuu1       = ^[M
  cursor_visible            cvvis      = ^[[34l
  delete_character          dch1       = ^[[P
  delete_line               dl1        = ^[[M
  enter_alt_charset_mode    smacs      = ^N
  enter_blink_mode          blink      = ^[[5m
  enter_bold_mode           bold       = ^[[1m
  enter_ca_mode             smcup      = ^[[?1049h
  enter_dim_mode            dim        = ^[[2m
  enter_insert_mode         smir       = ^[[4h
  enter_reverse_mode        rev        = ^[[7m
  enter_standout_mode       smso       = ^[[3m
  enter_underline_mode      smul       = ^[[4m
  exit_alt_charset_mode     rmacs      = ^O
  exit_attribute_mode       sgr0       = ^[[m^O
  exit_ca_mode              rmcup      = ^[[?1049l
  exit_insert_mode          rmir       = ^[[4l
  exit_standout_mode        rmso       = ^[[23m
  exit_underline_mode       rmul       = ^[[24m
  flash_screen              flash      = ^[g
  from_status_line          fsl        = ^[\
  init_2string              is2        = ^[)0
  insert_line               il1        = ^[[L
  key_backspace             kbs        = ^H
  key_dc                    kdch1      = ^[[3~
  key_down                  kcud1      = ^[OB
  key_f1                    kf1        = ^[OP
  key_f10                   kf10       = ^[[21~
  key_f2                    kf2        = ^[OQ
  key_f3                    kf3        = ^[OR
  key_f4                    kf4        = ^[OS
  key_f5                    kf5        = ^[[15~
  key_f6                    kf6        = ^[[17~
  key_f7                    kf7        = ^[[18~
  key_f8                    kf8        = ^[[19~
  key_f9                    kf9        = ^[[20~
  key_home                  khome      = ^[[1~
  key_ic                    kich1      = ^[[2~
  key_left                  kcub1      = ^[OD
  key_npage                 knp        = ^[[6~
  key_ppage                 kpp        = ^[[5~
  key_right                 kcuf1      = ^[OC
  key_up                    kcuu1      = ^[OA
  keypad_local              rmkx       = ^[[?1l^[>
  keypad_xmit               smkx       = ^[[?1h^[=
  newline                   nel        = ^[E
  parm_dch                  dch        = ^[[%p1%dP
  parm_delete_line          dl         = ^[[%p1%dM
  parm_down_cursor          cud        = ^[[%p1%dB
  parm_ich                  ich        = ^[[%p1%d@
  parm_index                indn       = ^[[%p1%dS
  parm_insert_line          il         = ^[[%p1%dL
  parm_left_cursor          cub        = ^[[%p1%dD
  parm_right_cursor         cuf        = ^[[%p1%dC
  parm_rindex               rin        = ^[[%p1%dT
  parm_up_cursor            cuu        = ^[[%p1%dA
  reset_2string             rs2        = ^[c^[[?1000l^[[?25h
  restore_cursor            rc         = ^[8
  row_address               vpa        = ^[[%i%p1%dd
  save_cursor               sc         = ^[7
  scroll_forward            ind        = ^@
  scroll_reverse            ri         = ^[M
  set_attributes            sgr        = ^[[0%?%p6%t;1%;%?%p1%t;3%;%?%p2%t;4%;%?%p3%t;7%;%?%p4%t;5%;%?%p5%t;2%;m%?%p9%t^N%e^O%;
  set_tab                   hts        = ^[H
  tab                       ht         = 	
  to_status_line            tsl        = ^[_
  acs_chars                 acsc       = ++,,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = ^[[Z
  ena_acs                   enacs      = ^[(B^[)0
  key_end                   kend       = ^[[4~
  key_f11                   kf11       = ^[[23~
  key_f12                   kf12       = ^[[24~
  clr_bol                   el1        = ^[[1K
  user6                     u6         = ^[[%i%d;%dR
  user7                     u7         = ^[[6n
  user8                     u8         = ^[[?1;2c
  user9                     u9         = ^[[c
  orig_pair                 op         = ^[[39;49m
  key_mouse                 kmous      = ^[[M
  set_a_foreground          setaf      = ^[[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = ^[[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
Extended boolean capabilities:
  AX                        = true
  G0                        = true
Extended numeric capabilities:
  U8                        = 1
Extended string capabilities:
  E0                        = ^[(B
  S0                        = ^[(%p1%c
  ext.get_bg                = ^[]11;?^G
  ext.get_extkeys           = ^[[?u^[[c
  Ss                        = ^[[%p1%d q
  Se                        = ^[[ q
  ext.enter_altfont_mode    = ^[[11m
  setrgbf                   = ^[[38;2;%p1%d;%p2%d;%p3%dm
  setrgbb                   = ^[[48;2;%p1%d;%p2%d;%p3%dm
  ext.set_cursor_color      = ^[]12;%p1%s^G
  ext.reset_cursor_color    = ^[]112^G
  ext.save_title            = ^[[22;0t
  ext.restore_title         = ^[[23;0t
  ext.enable_lr_margin      = ^[[?69h
  ext.disable_lr_margin     = ^[[?69l
  ext.enable_bpaste         = ^[[?2004h
  ext.disable_bpaste        = ^[[?2004l
  ext.enable_focus          = ^[[?1004h
  ext.disable_focus         = ^[[?1004l
  ext.enable_mouse          = ^[[?1002h^[[?1006h
  ext.disable_mouse         = ^[[?1002l^[[?1006l
  ext.enable_mouse_move     = ^[[?1003h
  ext.disable_mouse_move    = ^[[?1003l
  ext.enable_extended_keys  = ^[[>4;2m
  ext.disable_extended_keys = ^[[>4;0m
}}}

Executing BufNew Autocommands for "*"
autocommand <Lua 186: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 19: runtime! ftplugin/notify.vim ftplugin/notify.lua ftplugin/notify_*.vim ftplugin/notify_*.lua ftplugin/notify/*.vim ftplugin/notify/*.lua
Searching for "ftplugin/notify.vim ftplugin/notify.lua ftplugin/notify_*.vim ftplugin/notify_*.lua ftplugin/notify/*.vim ftplugin/notify/*.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify/*.lua"
not found in runtime path: "ftplugin/notify.vim ftplugin/notify.lua ftplugin/notify_*.vim ftplugin/notify_*.lua ftplugin/notify/*.vim ftplugin/notify/*.lua"
line 23:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 23:       endfor
line 24:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/notify.vim
Searching for "indent/notify.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/notify.vim"
not found in runtime path: "indent/notify.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/notify.lua
Searching for "indent/notify.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/notify.lua"
not found in runtime path: "indent/notify.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand lua COLORIZER_SETUP_HOOK()

Executing: lua COLORIZER_SETUP_HOOK()
Executing FileType Autocommands for "*"
autocommand <Lua 241: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/install.lua:559>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 242: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/notify.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/notify.*"
not found in runtime path: "parser/notify.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 249: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:42>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 296: ~/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua:11>

Searching for "parser/notify.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/notify.*"
not found in runtime path: "parser/notify.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 357: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:74>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing FileType Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand setlocal formatoptions-=c formatoptions-=r formatoptions-=o

Executing: setlocal formatoptions-=c formatoptions-=r formatoptions-=o
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 206: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 489: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 523: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#020304
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#020304
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#010203
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#040404
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redraw
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#080a0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#080a0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#050609
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#0e0e0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#0f141c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#0f141c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#090d11
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#1b1b1b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#17202c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#17202c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#0e141b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#2a2a2a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#202c3c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#202c3c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#131b25
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#3a3a3a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#28384d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#28384d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#19222f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#494a4a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#31435c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#31435c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#1e2938
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#585959
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#384e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#384e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#223041
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#666767
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#405878
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#405878
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#27364a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#737474
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#466184
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#466184
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#2b3b51
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#7f8080
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#4c698f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#4c698f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#2e4058
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#898a8b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#517099
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#517099
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#31455e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#939394
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#5576a2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#5576a2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#344963
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#9b9c9c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#597ba9
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#597ba9
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#374c68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#a2a3a4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#5d80b0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#5d80b0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#394f6c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#a8a9aa
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6084b5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6084b5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3a516f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#aeafaf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6288ba
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6288ba
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3c5472
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#b2b3b4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#658bbe
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#658bbe
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3d5575
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#b6b7b8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#668dc2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#668dc2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3f5777
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#babbbc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6890c5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6890c5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#405879
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#bdbebf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#405a7a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#bfc0c1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6b93ca
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6b93ca
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#415b7c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c2c2c3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6c95cc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6c95cc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#425b7d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c3c4c5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6d96ce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6d96ce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#425c7e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c5c6c7
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6d97cf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6d97cf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#435d7f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c6c7c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6e98d0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6e98d0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#435d7f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c7c8c9
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6e98d1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6e98d1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#435e80
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c8c9ca
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6f99d2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6f99d2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445e80
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c9cacb
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6f99d3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6f99d3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445e81
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cacbcc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6f9ad3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6f9ad3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f81
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cacbcc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709ad4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#709ad4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cbcccd
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cbcccd
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cbcccd
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#455f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#455f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456082
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing ModeChanged Autocommands for "*"
autocommand <Lua 336: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing ModeChanged Autocommands for "*"
autocommand <Lua 493: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 

Executing: tabnew /Users/christopher.griffith/.local/state/nvim/lsp.log
Executing WinLeave Autocommands for "*"
autocommand <Lua 194: vim/_editor.lua:0>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinLeave Autocommands for "*"
autocommand setlocal nocursorline

Executing: setlocal nocursorline
Executing WinEnter Autocommands for "*"
autocommand <Lua 193: vim/_editor.lua:0>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>78_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in <SNR>78_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>78_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand setlocal cursorline

Executing: setlocal cursorline
Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing: let s:tmux_is_last_pane = 0
Executing TabEnter Autocommands for "*"
autocommand <Lua 191: vim/_editor.lua:0>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/state/nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/state/nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 186: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 433: ~/.config/nvim/lua/autocmds.lua:31>

calling TurnOffRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded'| return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOffRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number norelativenumber
TurnOffRelativeNumber returning #0

continuing in BufLeave Autocommands for "*"

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Reading ShaDa file "/Users/christopher.griffith/.local/state/nvim/shada/main.shada" marks
Executing BufNewFile Autocommands for "*"
autocommand <Lua 13: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua:10>

Executing: 
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Searching for "scripts.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/scripts.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/scripts.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/scripts.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/scripts.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/scripts.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/scripts.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/scripts.vim"
not found in runtime path: "scripts.vim"
Executing:  endif
Executing BufNewFile Autocommands for "*"
autocommand <Lua 179: vim/_editor.lua:0>

Executing: 
Executing BufNewFile Autocommands for "*"
autocommand <Lua 411: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing BufNewFile Autocommands for "*"
autocommand <Lua 380: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns.lua:124>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing BufNewFile Autocommands for "*"
autocommand call s:detect(expand("<amatch>:p"))

Executing: call s:detect(expand("<amatch>:p"))
calling <SNR>132_detect('/Users/christopher.griffith/.local/state/nvim/lsp.log')

line 1: ^Iif exists("b:node_root") | return | endif
line 1:  return | endif
line 1:  endif
line 2: ^Ilet dir = a:dir
line 3: 
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
<SNR>132_detect returning #0

continuing in BufNewFile Autocommands for "*"

Executing BufNewFile Autocommands for "*"
autocommand if !did_filetype() && s:isNode() | setf javascript | en

Executing: if !did_filetype() && s:isNode() | setf javascript | en
calling <SNR>133_isNode()

line 1: ^Ilet shebang = getline(1)
line 2: ^Iif shebang =~# '^#!.*/bin/env\s\+node\>' | return 1 | en
line 2:  return 1 | en
line 2:  en
line 3: ^Iif shebang =~# '^#!.*/bin/node\>' | return 1 | en
line 3:  return 1 | en
line 3:  en
line 4: ^Ireturn 0
<SNR>133_isNode returning #0

continuing in BufNewFile Autocommands for "*"

Executing:  setf javascript | en
Executing:  en
Executing BufNewFile Autocommands for "*"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing: if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif
Executing:    unlet b:git_dir | endif
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand <Lua 185: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
Executing: 
autocommand <Lua 187: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 228: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:89>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufEnter Autocommands for "*"
autocommand <Lua 354: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif

Executing: if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
Executing:    exe s:persist() | endif
calling <SNR>71_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>71_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.77219.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>71_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>71_persist returning ''

continuing in BufEnter Autocommands for "*"

Executing: 
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 429: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in BufEnter Autocommands for "*"

Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif

Executing: if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif
Executing:  call peekaboo#on() | endif
calling peekaboo#on()

line 1:   if get(b:, 'peekaboo_on', 0)
line 2:     return
line 3:   endif
line 4: 
line 5:   let prefix = get(g:, 'peekaboo_prefix', '')
line 6:   let ins_prefix = get(g:, 'peekaboo_ins_prefix', '')
line 7:   execute 'nmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  0)'
line 7: nmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  0)
line 8:   execute 'xmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  1)'
line 8: xmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  1)
line 9:   execute 'nmap <buffer> <expr> '.prefix.    '@     peekaboo#peek(v:count1, ''@'', 0)'
line 9: nmap <buffer> <expr> @     peekaboo#peek(v:count1, '@', 0)
line 10:   execute 'imap <buffer> <expr> '.ins_prefix.'<c-r> peekaboo#peek(1, "\<c-r>",  0)'
line 10: imap <buffer> <expr> <c-r> peekaboo#peek(1, "\<c-r>",  0)
line 11:   let b:peekaboo_on = 1
line 12:   return ''
peekaboo#on returning ''

continuing in BufEnter Autocommands for "*"

Executing:  endif
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 188: vim/_editor.lua:0>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>78_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in <SNR>78_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>78_Highlight_Matching_Pair returning #0

continuing in BufWinEnter Autocommands for "*"

Executing: unlet! b:keymap_name
Executing CursorMoved Autocommands for "*"
autocommand <Lua 334: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>78_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in <SNR>78_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>78_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 491: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 547: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 340: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>78_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in <SNR>78_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>78_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 545: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/util/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/util/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinClosed Autocommands for "*"
autocommand <Lua 202: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 182: vim/_editor.lua:0>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 202: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 182: vim/_editor.lua:0>

Executing: 
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#405a7a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#bfc0c1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#5a7caa
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#5a7caa
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#374c68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#a3a4a5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#496489
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#496489
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#2c3e54
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#848485
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#394e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#394e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#233042
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#676768
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#2b3b52
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#2b3b52
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#1a2532
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#4e4e4f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#202c3d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#202c3d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#141b25
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#3a3b3b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#18212d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#18212d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#0e141b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#2b2b2b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#111821
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#111821
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#0b0f14
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#1f1f20
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#0c1118
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#0c1118
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#080b0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#171717
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#090c11
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#090c11
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#05080a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#101010
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#06090c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#06090c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#040507
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#0b0c0c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#040608
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#040608
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#030405
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#080808
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinClosed Autocommands for "*"
autocommand <Lua 202: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 182: vim/_editor.lua:0>

Executing: 

Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 433: ~/.config/nvim/lua/autocmds.lua:31>

calling TurnOffRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded'| return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOffRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number norelativenumber
TurnOffRelativeNumber returning #0

continuing in BufLeave Autocommands for "*"

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 185: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
Executing: 
autocommand <Lua 187: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 228: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:89>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufEnter Autocommands for "*"
autocommand <Lua 354: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif

Executing: if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
Executing:    exe s:persist() | endif
calling <SNR>71_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>71_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.77219.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>71_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>71_persist returning ''

continuing in BufEnter Autocommands for "*"

Executing: 
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 429: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in BufEnter Autocommands for "*"

Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif

Executing: if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif
Executing:  call peekaboo#on() | endif
calling peekaboo#on()

line 1:   if get(b:, 'peekaboo_on', 0)
line 2:     return
line 3:   endif
line 4: 
line 5:   let prefix = get(g:, 'peekaboo_prefix', '')
line 6:   let ins_prefix = get(g:, 'peekaboo_ins_prefix', '')
line 7:   execute 'nmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  0)'
line 7: nmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  0)
line 8:   execute 'xmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  1)'
line 8: xmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  1)
line 9:   execute 'nmap <buffer> <expr> '.prefix.    '@     peekaboo#peek(v:count1, ''@'', 0)'
line 9: nmap <buffer> <expr> @     peekaboo#peek(v:count1, '@', 0)
line 10:   execute 'imap <buffer> <expr> '.ins_prefix.'<c-r> peekaboo#peek(1, "\<c-r>",  0)'
line 10: imap <buffer> <expr> <c-r> peekaboo#peek(1, "\<c-r>",  0)
line 11:   let b:peekaboo_on = 1
line 12:   return ''
peekaboo#on returning ''

continuing in BufEnter Autocommands for "*"

Executing:  endif
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 188: vim/_editor.lua:0>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>78_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>78_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>78_Remove_Matches returning #0

continuing in <SNR>78_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>78_Highlight_Matching_Pair returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufDelete Autocommands for "*"
autocommand <Lua 181: vim/_editor.lua:0>

Executing: 
Executing BufDelete Autocommands for "*"
autocommand <Lua 356: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:64>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing ModeChanged Autocommands for "*"
autocommand <Lua 336: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing ModeChanged Autocommands for "*"
autocommand <Lua 493: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 

Executing QuitPre Autocommands for "*"
autocommand <Lua 591: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 34: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp.lua:1874>

Executing: 
autocommand <Lua 47: ~/.local/share/nvim/lazy/mason.nvim/lua/mason/init.lua:9>

Executing: 
autocommand <Lua 271: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/async.lua:17>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand exe s:persist()

Executing: exe s:persist()
calling <SNR>71_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>71_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.77219.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>71_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>71_doautocmd_user returning ''

continuing in <SNR>71_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>71_persist returning ''

continuing in VimLeavePre Autocommands for "*"

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 589: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/attach.lua:378>

Executing: 
Writing ShaDa file "/Users/christopher.griffith/.local/state/nvim/shada/main.shada"
Executing VimLeave Autocommands for "*"
autocommand <Lua 178: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/state.lua:360>

Executing: 
Executing VimLeave Autocommands for "*"
autocommand <Lua 496: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:65>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinClosed Autocommands for "*"
autocommand <Lua 202: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 182: vim/_editor.lua:0>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 202: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 189: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 182: vim/_editor.lua:0>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/mason/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/mason-lspconfig/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/mason-lspconfig/api/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/nightfox.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/nightfox.vim"
line 1: " Load only once
line 2: if exists('g:loaded_nightfox') | finish | endif
line 2:  finish | endif
line 2:  endif
line 3: 
line 4: command! NightfoxCompile lua require('nightfox').compile()
line 5: command! NightfoxInteractive lua require('nightfox.interactive').attach()
line 6: 
line 7: let g:loaded_nightfox = 1
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/plugin/nightfox.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim"
line 1: if exists('g:loaded_devicons') | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: 
line 3: let s:save_cpo = &cpo
line 4: set cpo&vim
line 5: 
line 6: " TODO change so its easier to get
line 7: let g:nvim_web_devicons = 1
line 8: 
line 9: let &cpo = s:save_cpo
line 10: unlet s:save_cpo
line 11: 
line 12: let g:loaded_devicons = 1
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/barbar.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/barbar.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/plugin/barbar.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Searching for "parser/bash.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/bash.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/bash.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/bash.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/bash.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/bash.so"
Searching for "parser/c.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/c.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/c.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/c.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/c.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/c.so"
Searching for "parser/c_sharp.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/c_sharp.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/c_sharp.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/c_sharp.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/c_sharp.so"
Searching for "parser/diff.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/diff.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/diff.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/diff.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/diff.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/diff.so"
Searching for "parser/dockerfile.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/dockerfile.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/dockerfile.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/dockerfile.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/dockerfile.so"
Searching for "parser/git_config.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/git_config.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/git_config.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/git_config.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/git_config.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/git_config.so"
Searching for "parser/git_rebase.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/git_rebase.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/git_rebase.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/git_rebase.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/git_rebase.so"
Searching for "parser/gitcommit.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/gitcommit.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/gitcommit.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/gitcommit.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/gitcommit.so"
Searching for "parser/gitignore.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/gitignore.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/gitignore.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/gitignore.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/gitignore.so"
Searching for "parser/html.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/html.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/html.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/html.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/html.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/html.so"
Searching for "parser/javascript.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/javascript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/javascript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/javascript.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/javascript.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/javascript.so"
Searching for "parser/lua.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/lua.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/lua.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/lua.so"
Searching for "parser/make.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/make.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/make.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/make.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/make.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/make.so"
Searching for "parser/markdown.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/markdown.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/markdown.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/markdown.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/markdown.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/markdown.so"
Searching for "parser/markdown_inline.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/markdown_inline.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/markdown_inline.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/markdown_inline.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/markdown_inline.so"
Searching for "parser/query.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/query.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/query.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/query.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/query.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/query.so"
Searching for "parser/rust.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/rust.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/rust.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/rust.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/rust.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/rust.so"
Searching for "parser/scss.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/scss.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/scss.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/scss.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/scss.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/scss.so"
Searching for "parser/tmux.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/tmux.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/tmux.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/tmux.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/tmux.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/tmux.so"
Searching for "parser/toml.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/toml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/toml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/toml.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/toml.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/toml.so"
Searching for "parser/tsx.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/tsx.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/tsx.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/tsx.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/tsx.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/tsx.so"
Searching for "parser/typescript.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/typescript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/typescript.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/typescript.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/typescript.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/typescript.so"
Searching for "parser/vim.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/vim.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/vim.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/vim.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/vim.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/vim.so"
Searching for "parser/vimdoc.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/vimdoc.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/vimdoc.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/vimdoc.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/vimdoc.so"
Searching for "parser/xml.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/xml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/xml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/xml.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/xml.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/xml.so"
Searching for "parser/yaml.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/yaml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/yaml.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/yaml.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/yaml.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/yaml.so"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/colorizer.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/colorizer.vim"
line 1: if exists('g:loaded_colorizer')
line 2:   finish
line 3: endif
line 4: 
line 5: command! ColorizerAttachToBuffer lua require'colorizer'.attach_to_buffer(0)
line 6: command! ColorizerDetachFromBuffer lua require'colorizer'.detach_from_buffer(0)
line 7: command! ColorizerReloadAllBuffers lua require'colorizer'.reload_all_buffers()
line 8: command! ColorizerToggle lua local c = require'colorizer' if c.is_buffer_attached(0) then c.detach_from_buffer(0) else c.attach_to_buffer(0) end
line 11: 
line 12: let g:loaded_colorizer = 1
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/colorizer.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup ColorizerSetup
Executing: autocmd!
Executing: autocmd FileType * lua COLORIZER_SETUP_HOOK()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup lualine | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Searching for "lua/lualine/themes/auto.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/lua/lualine/themes/auto.lua"
Executing: highlight! lualine_c_inactive guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_inactive guifg=#a9a9a9 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_inactive guifg=#000000 guibg=#a9a9a9 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_terminal guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_terminal guifg=#40ffff guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_terminal guifg=#000000 guibg=#40ffff gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_visual guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_visual guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_visual guifg=#000000 guibg=#ffa500 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_replace guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_replace guifg=#ffa0a0 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_replace guifg=#000000 guibg=#ffa0a0 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_command guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_command guifg=#40ffff guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_command guifg=#000000 guibg=#40ffff gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_insert guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_insert guifg=#ffa0a0 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_insert guifg=#000000 guibg=#ffa0a0 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_normal guifg=#505050 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_normal guifg=#a9a9a9 guibg=#000000 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_normal guifg=#000000 guibg=#a9a9a9 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd lualine ColorScheme * lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     autocmd lualine OptionSet background lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_normal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_insert guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_visual guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_replace guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_command guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_terminal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_inactive guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_stl_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: au lualine WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged *
--- Autocommands ---
Executing: autocmd lualine_stl_refresh WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged * call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_tal_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing: augroup lualine_wb_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing:     hi default link NotifyBackground Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyERRORBorder guifg=#8A1F1F
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyWARNBorder guifg=#79491D
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyINFOBorder guifg=#4F6752
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyDEBUGBorder guifg=#8B8B8B
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyTRACEBorder guifg=#4F3552
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyERRORIcon guifg=#F70067
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyWARNIcon guifg=#F79000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyINFOIcon guifg=#A9FF68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyDEBUGIcon guifg=#8B8B8B
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyTRACEIcon guifg=#D484FF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyERRORTitle  guifg=#F70067
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyWARNTitle guifg=#F79000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyINFOTitle guifg=#A9FF68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyDEBUGTitle  guifg=#8B8B8B
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default NotifyTRACETitle  guifg=#D484FF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyERRORBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyWARNBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyINFOBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyDEBUGBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyTRACEBody Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing:     hi default link NotifyLogTime Comment
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     hi default link NotifyLogTitle Special
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:   
Executing:   augroup NvimNotifyRefreshHighlights
Executing:     autocmd!
Executing:     autocmd ColorScheme * lua require('notify.config.highlights').setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:   augroup END
Executing: command! Notifications :lua require("notify")._print_history()<CR>
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim"
line 1: 
line 2: " Create command for running busted
line 3: command! -nargs=1 -complete=file PlenaryBustedFile lua require('plenary.test_harness').test_file([[<args>]])
line 5: 
line 6: command! -nargs=+ -complete=file PlenaryBustedDirectory lua require('plenary.test_harness').test_directory_command([[<args>]])
line 8: 
line 9: nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Searching for "data/plenary/filetypes/base.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/data/plenary/filetypes/base.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/data/plenary/filetypes/base.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/data/plenary/filetypes/base.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/data/plenary/filetypes/base.lua"
Searching for "data/plenary/filetypes/builtin.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/data/plenary/filetypes/builtin.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/data/plenary/filetypes/builtin.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/data/plenary/filetypes/builtin.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/data/plenary/filetypes/builtin.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/trouble.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/trouble.vim"
line 1: 
line 2: augroup Trouble
line 3:   autocmd!
line 4:   if has('nvim-0.6')
line 5:     " Use the new diagnostic subsystem for neovim 0.6 and up
line 6:     au DiagnosticChanged * lua require'trouble'.refresh({auto = true, provider = "diagnostics"})
line 7:   else
line 8:     au User LspDiagnosticsChanged lua require'trouble'.refresh({auto = true, provider = "diagnostics"})
line 9:   endif
line 10:   autocmd BufWinEnter,BufEnter * lua require("trouble").action("on_win_enter")
line 11: augroup end
line 12: 
line 13: function! s:complete(arg,line,pos) abort
line 16: 
line 17: command! -nargs=* -complete=custom,s:complete Trouble lua require'trouble'.open(<f-args>)
line 18: command! -nargs=* -complete=custom,s:complete TroubleToggle lua require'trouble'.toggle(<f-args>)
line 19: command! TroubleClose lua require'trouble'.close()
line 20: command! TroubleRefresh lua require'trouble'.refresh()
line 21: 
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/plugin/trouble.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: hi def link TroubleTextError TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleFile Directory
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignOther TroubleSignInformation
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleNormal Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextInformation TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleCount TabLineSel
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleText Normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSource Comment
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroublePreview Search
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextHint TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleLocation LineNr
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleCode Comment
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleFoldIcon CursorLineNr
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleIndent LineNr
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextWarning TroubleText
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleOther DiagnosticOther
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignOther DiagnosticSignOther
Executing: hi def link TroubleError DiagnosticError
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignError DiagnosticSignError
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleWarning DiagnosticWarn
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignWarning DiagnosticSignWarn
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleInformation DiagnosticInfo
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignInformation DiagnosticSignInfo
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleHint DiagnosticHint
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleSignHint DiagnosticSignHint
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/trouble/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi def link TroubleTextError TroubleText
Executing: hi def link TroubleFile Directory
Executing: hi def link TroubleSignOther TroubleSignInformation
Executing: hi def link TroubleNormal Normal
Executing: hi def link TroubleTextInformation TroubleText
Executing: hi def link TroubleCount TabLineSel
Executing: hi def link TroubleText Normal
Executing: hi def link TroubleSource Comment
Executing: hi def link TroublePreview Search
Executing: hi def link TroubleTextHint TroubleText
Executing: hi def link TroubleLocation LineNr
Executing: hi def link TroubleCode Comment
Executing: hi def link TroubleFoldIcon CursorLineNr
Executing: hi def link TroubleIndent LineNr
Executing: hi def link TroubleTextWarning TroubleText
Executing: hi def link TroubleOther DiagnosticOther
Executing: hi def link TroubleSignOther DiagnosticSignOther
Executing: hi def link TroubleError DiagnosticError
Executing: hi def link TroubleSignError DiagnosticSignError
Executing: hi def link TroubleWarning DiagnosticWarn
Executing: hi def link TroubleSignWarning DiagnosticSignWarn
Executing: hi def link TroubleInformation DiagnosticInfo
Executing: hi def link TroubleSignInformation DiagnosticSignInfo
Executing: hi def link TroubleHint DiagnosticHint
Executing: hi def link TroubleSignHint DiagnosticSignHint
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/Comment/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/lspsaga.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/lspsaga.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/plugin/lspsaga.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: doautocmd <nomodeline> User CmpReady
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/bufdelete.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/bufdelete.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/plugin/bufdelete.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/transparent.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/transparent.vim"
line 1: if !has('nvim')  | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: 
line 3: if exists('g:loaded_transparent') | finish | endif
line 3:  finish | endif
line 3:  endif
line 4: 
line 5: let g:loaded_transparent = 1
line 6: 
line 7: function! OnTransparentGroupsChanged(d, k, z)
line 10: 
line 11: call dictwatcheradd(g:, 'transparent_groups', 'OnTransparentGroupsChanged')
line 12: 
line 13: augroup transparent
line 14:     autocmd!
line 15:     autocmd VimEnter,ColorScheme,FileType * lua require('transparent').clear()
line 16:     command -bar -nargs=0 TransparentEnable  lua require('transparent').toggle(true)
line 17:     command -bar -nargs=0 TransparentDisable lua require('transparent').toggle(false)
line 18:     command -bar -nargs=0 TransparentToggle  lua require('transparent').toggle()
line 19: augroup END
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/plugin/transparent.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/obsession.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/obsession.vim"
line 1: " obsession.vim - Continuously updated session files
line 2: " Maintainer:   Tim Pope <http://tpo.pe/>
line 3: " Version:      1.0
line 4: " GetLatestVimScripts: 4472 1 :AutoInstall: obsession.vim
line 5: 
line 6: if exists("g:loaded_obsession") || v:version < 704 || &cp
line 7:   finish
line 8: endif
line 9: let g:loaded_obsession = 1
line 10: 
line 11: command! -bar -bang -complete=file -nargs=? Obsession execute s:dispatch(<bang>0, <q-args>)
line 13: 
line 14: function! s:dispatch(bang, file) abort
line 56: 
line 57: function! s:doautocmd_user(arg) abort
line 64: 
line 65: function! s:persist() abort
line 102: 
line 103: function! ObsessionStatus(...) abort
line 121: 
line 122: augroup obsession
line 123:   autocmd!
line 124:   autocmd VimLeavePre * exe s:persist()
line 125:   autocmd BufEnter * if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
line 129:   autocmd User Flags call Hoist('global', 'ObsessionStatus')
line 130: augroup END
line 131: 
line 132: " vim:set et sw=2:
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/plugin/obsession.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/gzip.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2016 Oct 30
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
line 11: endif
line 12: let loaded_gzip = 1
line 13: 
line 14: augroup gzip
line 15:   " Remove all gzip autocommands
line 16:   au!
line 17: 
line 18:   " Enable editing of gzipped files.
line 19:   " The functions are defined in autoload/gzip.vim.
line 20:   "
line 21:   " Set binary mode before reading the file.
line 22:   " Use "gzip -d", gunzip isn't always available.
line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo setlocal bin
line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")
line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")
line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")
line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")
line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")
line 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")
line 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")
line 31:   autocmd BufReadPost,FileReadPost^I*.br call gzip#read("brotli -d --rm")
line 32:   autocmd BufReadPost,FileReadPost^I*.lzo call gzip#read("lzop -d -U")
line 33:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")
line 34:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")
line 35:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")
line 36:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")
line 37:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")
line 38:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")
line 39:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")
line 40:   autocmd BufWritePost,FileWritePost^I*.br  call gzip#write("brotli --rm")
line 41:   autocmd BufWritePost,FileWritePost^I*.lzo  call gzip#write("lzop -U")
line 42:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")
line 43:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")
line 44:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")
line 45:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")
line 46:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")
line 47:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")
line 48:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")
line 49:   autocmd FileAppendPre^I^I^I*.br call gzip#appre("brotli -d --rm")
line 50:   autocmd FileAppendPre^I^I^I*.lzo call gzip#appre("lzop -d -U")
line 51:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")
line 52:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")
line 53:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")
line 54:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")
line 55:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")
line 56:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")
line 57:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")
line 58:   autocmd FileAppendPost^I^I*.br call gzip#write("brotli --rm")
line 59:   autocmd FileAppendPost^I^I*.lzo call gzip#write("lzop -U")
line 60: augroup END
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/gzip.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/health.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/health.vim"
line 1: autocmd CmdUndefined CheckHealth checkhealth
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/health.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/man.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/man.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/man.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim"
line 1: " Nvim: load the matchit plugin by default.
line 2: if !exists("g:loaded_matchit") && stridx(&packpath, $VIMRUNTIME) >= 0
line 3:   packadd matchit
Searching for "pack/*/start/matchit" in "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/*/start/matchit"
not found in 'packpath': "pack/*/start/matchit"
Searching for "pack/*/opt/matchit" in "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/*/opt/matchit"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/site/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching
line 2: "  Maintainer:  Christian Brabandt
line 3: "  Version:     1.18
line 4: "  Last Change: 2020 Dec 23
line 5: "  Repository:  https://github.com/chrisbra/matchit
line 6: "  Previous URL:http://www.vim.org/script.php?script_id=39
line 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>
line 8: 
line 9: " Documentation:
line 10: "  The documentation is in a separate file: ../doc/matchit.txt
line 11: 
line 12: " Credits:
line 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)
line 14: "  Original script and design by Raul Segura Acevedo
line 15: "  Support for comments by Douglas Potts
line 16: "  Support for back references and other improvements by Benji Fisher
line 17: "  Support for many languages by Johannes Zellner
line 18: "  Suggestions for improvement, bug reports, and support for additional
line 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark
line 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.
line 21: 
line 22: " Debugging:
line 23: "  If you'd like to try the built-in debugging commands...
line 24: "   :MatchDebug      to activate debugging for the current buffer
line 25: "  This saves the values of several key script variables as buffer-local
line 26: "  variables.  See the MatchDebug() function, below, for details.
line 27: 
line 28: " TODO:  I should think about multi-line patterns for b:match_words.
line 29: "   This would require an option:  how many lines to scan (default 1).
line 30: "   This would be useful for Python, maybe also for *ML.
line 31: " TODO:  Maybe I should add a menu so that people will actually use some of
line 32: "   the features that I have implemented.
line 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to
line 34: "   Match_wrapper() instead.
line 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'
line 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).
line 37: " TODO:  Add a level of indirection, so that custom % scripts can use my
line 38: "   work but extend it.
line 39: 
line 40: " Allow user to prevent loading and prevent duplicate loading.
line 41: if exists("g:loaded_matchit") || &cp
line 42:   finish
line 43: endif
line 44: let g:loaded_matchit = 1
line 45: 
line 46: let s:save_cpo = &cpo
line 47: set cpo&vim
line 48: 
line 49: nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
line 50: nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
line 51: xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") \| exe ":normal! m'" \| endif<cr>gv``
line 53: xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
line 54: onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
line 55: onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
line 56: 
line 57: " Analogues of [{ and ]} using matching patterns:
line 58: nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>
line 59: nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>
line 60: xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
line 61: xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
line 62: onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>
line 63: onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>
line 64: 
line 65: " text object:
line 66: xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
line 67: 
line 68: if !exists("g:no_plugin_maps")
line 69:   nmap <silent> %  <Plug>(MatchitNormalForward)
line 70:   nmap <silent> g% <Plug>(MatchitNormalBackward)
line 71:   xmap <silent> %  <Plug>(MatchitVisualForward)
line 72:   xmap <silent> g% <Plug>(MatchitVisualBackward)
line 73:   omap <silent> %  <Plug>(MatchitOperationForward)
line 74:   omap <silent> g% <Plug>(MatchitOperationBackward)
line 75: 
line 76:   " Analogues of [{ and ]} using matching patterns:
line 77:   nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
line 78:   nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
line 79:   xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
line 80:   xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
line 81:   omap <silent> [% <Plug>(MatchitOperationMultiBackward)
line 82:   omap <silent> ]% <Plug>(MatchitOperationMultiForward)
line 83: 
line 84:   " Text object
line 85:   xmap a% <Plug>(MatchitVisualTextObject)
line 86: endif
line 87: 
line 88: " Call this function to turn on debugging information.  Every time the main
line 89: " script is run, buffer variables will be saved.  These can be used directly
line 90: " or viewed using the menu items below.
line 91: if !exists(":MatchDebug")
line 92:   command! -nargs=0 MatchDebug call matchit#Match_debug()
line 93: endif
line 94: 
line 95: let &cpo = s:save_cpo
line 96: unlet s:save_cpo
line 97: 
line 98: " vim:sts=2:sw=2:et:
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim
line 3: augroup filetypedetect
line 3: augroup END
line 4: endif
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchit.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2022 Dec 01
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: if exists("g:loaded_matchparen") || &cp
line 9:   finish
line 10: endif
line 11: let g:loaded_matchparen = 1
line 12: 
line 13: if !exists("g:matchparen_timeout")
line 14:   let g:matchparen_timeout = 300
line 15: endif
line 16: if !exists("g:matchparen_insert_timeout")
line 17:   let g:matchparen_insert_timeout = 60
line 18: endif
line 19: 
line 20: augroup matchparen
line 21:   " Replace all matchparen autocommands
line 22:   autocmd! CursorMoved,CursorMovedI,WinEnter,BufWinEnter,WinScrolled * call s:Highlight_Matching_Pair()
line 23:   autocmd! WinLeave,BufLeave * call s:Remove_Matches()
line 24:   if exists('##TextChanged')
line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 26:   endif
line 27: augroup END
line 28: 
line 29: " Skip the rest if it was already done.
line 30: if exists("*s:Highlight_Matching_Pair")
line 31:   finish
line 32: endif
line 33: 
line 34: let s:cpo_save = &cpo
line 35: set cpo-=C
line 36: 
line 37: " The function that is invoked (very often) to define a ":match" highlighting
line 38: " for any matching paren.
line 39: func s:Highlight_Matching_Pair()
line 196: 
line 197: func s:Remove_Matches()
line 203: 
line 204: 
line 205: " Define commands that will disable and enable the plugin.
line 206: command DoMatchParen call s:DoMatchParen()
line 207: command NoMatchParen call s:NoMatchParen()
line 208: 
line 209: func s:NoMatchParen()
line 216: 
line 217: func s:DoMatchParen()
line 223: 
line 224: let &cpo = s:cpo_save
line 225: unlet s:cpo_save
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/netrwPlugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IFeb 09, 2021
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2021 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/netrwPlugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/nvim.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/nvim.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/nvim.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim"
line 1: if exists('g:loaded_remote_plugins')
line 2:   finish
line 3: endif
line 4: let g:loaded_remote_plugins = '/path/to/manifest'
line 5: 
line 6: " Get the path to the rplugin manifest file.
line 7: function! s:GetManifestPath() abort
line 26: 
line 27: " Old manifest file based on known script locations.
line 28: function! s:GetOldManifestPaths() abort
line 43: 
line 44: function! s:GetManifest() abort
line 57: 
line 58: function! s:LoadRemotePlugins() abort
line 64: 
line 65: command! -bar UpdateRemotePlugins call remote#host#UpdateRemotePlugins()
line 66: 
line 67: if index(v:argv, "--clean") < 0
line 68:   call s:LoadRemotePlugins()
calling <SNR>77_LoadRemotePlugins()

line 1:   let g:loaded_remote_plugins = s:GetManifest()
calling <SNR>77_GetManifest()

line 1:   let manifest = s:GetManifestPath()
calling <SNR>77_GetManifestPath()

line 1:   let manifest_base = ''
line 2: 
line 3:   if exists('$NVIM_RPLUGIN_MANIFEST')
line 4:     return fnamemodify($NVIM_RPLUGIN_MANIFEST, ':p')
line 5:   endif
line 6: 
line 7:   let dest = stdpath('data')
line 8:   if !empty(dest)
line 9:     if !isdirectory(dest)
line 10:       if getftype(dest) != "link"
line 11:         call mkdir(dest, 'p', 0700)
line 12:       endif
line 13:     endif
line 14:     let manifest_base = dest
line 15:   endif
line 16: 
line 17:   return manifest_base.'/rplugin.vim'
<SNR>77_GetManifestPath returning '/Users/christopher.griffith/.local/share/nvim/rplugin.vim'

continuing in <SNR>77_GetManifest

line 2:   if !filereadable(manifest)
line 3:     " Check if an old manifest file exists and move it to the new location.
line 4:     for old_manifest in s:GetOldManifestPaths()
line 5:       if filereadable(old_manifest)
line 6:         call rename(old_manifest, manifest)
line 7:         break
line 8:       endif
line 9:     endfor
line 10:   endif
line 11:   return manifest
<SNR>77_GetManifest returning '/Users/christopher.griffith/.local/share/nvim/rplugin.vim'

continuing in <SNR>77_LoadRemotePlugins

line 2:   if filereadable(g:loaded_remote_plugins)
line 3:     execute 'source' fnameescape(g:loaded_remote_plugins)
line 3: source /Users/christopher.griffith/.local/share/nvim/rplugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3: sourcing "/Users/christopher.griffith/.local/share/nvim/rplugin.vim"
line 1: " perl plugins
line 2: 
line 3: 
line 4: " node plugins
line 5: 
line 6: 
line 7: " python3 plugins
line 8: call remote#host#RegisterPlugin('python3', '/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder', [ {'sync': v:true, 'name': '_wilder_python_basic_highlight', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_clap_filt', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_cpsm_filt', 'type': 'function', 'opts': {}}, {'sync': v:true, 'name': '_wilder_python_cpsm_highlight', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_difflib_sort', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_file_finder', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_fruzzy_filt', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_fuzzy_filt', 'type': 'function', 'opts': {}}, {'sync': 'urgent', 'name': '_wilder_python_fuzzywuzzy_sort', 'type': 'function', 'opts': {}}, {'sync': v:true, 'name': '_wilder_python_get_file_completion', 'type'
Searching for "autoload/remote/host.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/remote/host.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/remote/host.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 8: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim"
line 1: let s:hosts = {}
line 2: let s:plugin_patterns = {}
line 3: let s:plugins_for_host = {}
line 4: 
line 5: " Register a host by associating it with a factory(funcref)
line 6: function! remote#host#Register(name, pattern, factory) abort
line 14: 
line 15: " Register a clone to an existing host. The new host will use the same factory
line 16: " as `source`, but it will run as a different process. This can be used by
line 17: " plugins that should run isolated from other plugins created for the same host
line 18: " type
line 19: function! remote#host#RegisterClone(name, orig_name) abort
line 31: 
line 32: " Get a host channel, bootstrapping it if necessary
line 33: function! remote#host#Require(name) abort
line 48: 
line 49: function! remote#host#IsRunning(name) abort
line 55: 
line 56: " Example of registering a Python plugin with two commands (one async), one
line 57: " autocmd (async) and one function (sync):
line 58: "
line 59: " let s:plugin_path = expand('<sfile>:p:h').'/nvim_plugin.py'
line 60: " call remote#host#RegisterPlugin('python', s:plugin_path, [
line 61: "   \ {'type': 'command', 'name': 'PyCmd', 'sync': 1, 'opts': {}},
line 62: "   \ {'type': 'command', 'name': 'PyAsyncCmd', 'sync': 0, 'opts': {'eval': 'cursor()'}},
line 63: "   \ {'type': 'autocmd', 'name': 'BufEnter', 'sync': 0, 'opts': {'eval': 'expand("<afile>")'}},
line 64: "   \ {'type': 'function', 'name': 'PyFunc', 'sync': 1, 'opts': {}}
line 65: "   \ ])
line 66: "
line 67: " The third item in a declaration is a boolean: non zero means the command,
line 68: " autocommand or function will be executed synchronously with rpcrequest.
line 69: function! remote#host#RegisterPlugin(host, path, specs) abort
line 111: 
line 112: function! s:RegistrationCommands(host) abort
line 155: 
line 156: function! remote#host#UpdateRemotePlugins() abort
line 176: 
line 177: function! remote#host#PluginsForHost(host) abort
line 183: 
line 184: function! remote#host#LoadErrorForHost(host, log) abort
line 190: 
line 191: " Registration of standard hosts
line 192: 
line 193: " Python/Python3
line 194: call remote#host#Register('python', '*', function('provider#pythonx#Require'))
calling remote#host#Register('python', '*', function('provider#pythonx#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 196: call remote#host#Register('python3', '*', function('provider#pythonx#Require'))
calling remote#host#Register('python3', '*', function('provider#pythonx#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 198: 
line 199: " Ruby
line 200: call remote#host#Register('ruby', '*.rb', function('provider#ruby#Require'))
calling remote#host#Register('ruby', '*.rb', function('provider#ruby#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 202: 
line 203: " nodejs
line 204: call remote#host#Register('node', '*', function('provider#node#Require'))
calling remote#host#Register('node', '*', function('provider#node#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

line 206: 
line 207: " perl
line 208: call remote#host#Register('perl', '*', function('provider#perl#Require'))
calling remote#host#Register('perl', '*', function('provider#perl#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
remote#host#Register returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim

finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/host.vim
continuing in /Users/christopher.griffith/.local/share/nvim/rplugin.vim
calling remote#host#RegisterPlugin('python3', '/Users/christopher.griffith/.local/sh...azy/wilder.nvim/rplugin/python3/wilder', [{'sync': v:true, 'name': '_wilder_pyt...filt', 'type': 'function', 'opts': {}}])

line 1:   let plugins = remote#host#PluginsForHost(a:host)
calling remote#host#PluginsForHost('python3')

line 1:   if !has_key(s:plugins_for_host, a:host)
line 2:     let s:plugins_for_host[a:host] = []
line 3:   end
line 4:   return s:plugins_for_host[a:host]
remote#host#PluginsForHost returning []

continuing in remote#host#RegisterPlugin

line 2: 
line 3:   for plugin in plugins
line 4:     if plugin.path == a:path
line 5:       throw 'Plugin "'.a:path.'" is already registered'
line 6:     endif
line 7:   endfor
line 8: 
line 9:   if has_key(s:hosts, a:host) && remote#host#IsRunning(a:host)
calling remote#host#IsRunning('python3')

line 1:   if !has_key(s:hosts, a:name)
line 2:     throw 'No host named "'.a:name.'" is registered'
line 3:   endif
line 4:   return s:hosts[a:name].channel != 0
remote#host#IsRunning returning #0

continuing in remote#host#RegisterPlugin

line 10:     " For now we won't allow registration of plugins when the host is already
line 11:     " running.
line 12:     throw 'Host "'.a:host.'" is already running'
line 13:   endif
line 14: 
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
Searching for "autoload/remote/define.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/remote/define.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/remote/define.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/define.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 34: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/define.vim"
line 1: function! remote#define#CommandOnHost(host, method, sync, name, opts)
line 39: 
line 40: 
line 41: function! remote#define#CommandBootstrap(host, method, sync, name, opts, forward)
line 52: 
line 53: 
line 54: function! remote#define#CommandOnChannel(channel, method, sync, name, opts)
line 88: 
line 89: 
line 90: function! remote#define#AutocmdOnHost(host, method, sync, name, opts)
line 105: 
line 106: 
line 107: function! remote#define#AutocmdBootstrap(host, method, sync, name, opts, forward)
line 120: 
line 121: 
line 122: function! remote#define#AutocmdOnChannel(channel, method, sync, name, opts)
line 130: 
line 131: 
line 132: function! remote#define#FunctionOnHost(host, method, sync, name, opts)
line 143: 
line 144: 
line 145: function! remote#define#FunctionBootstrap(host, method, sync, name, opts, group)
line 157: 
line 158: 
line 159: function! remote#define#FunctionOnChannel(channel, method, sync, name, opts)
line 171: 
line 172: let s:busy = {}
line 173: let s:pending_notifications = {}
line 174: 
line 175: function! s:GetRpcFunction(sync)
line 183: 
line 184: function! remote#define#notify(chan, ...)
line 193: 
line 194: function! remote#define#request(chan, ...)
line 206: 
line 207: function! s:GetCommandPrefix(name, opts)
line 211: 
line 212: 
line 213: " Each msgpack-rpc autocommand has it's own unique group, which is derived
line 214: " from an autoincrementing gid(group id). This is required for replacing the
line 215: " autocmd implementation with the lazy-load mechanism
line 216: let s:next_gid = 1
line 217: function! s:GetNextAutocmdGroup()
line 226: 
line 227: 
line 228: function! s:GetAutocmdPrefix(name, opts)
line 252: 
line 253: 
line 254: function! s:GetFunctionPrefix(name, opts)
line 261: 
line 262: 
line 263: function! s:StringifyOpts(opts, keys)
line 276: 
line 277: 
line 278: function! s:AddEval(rpcargs, opts)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/remote/define.vim
continuing in remote#host#RegisterPlugin
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...unction:_wilder_python_basic_highlight', v:true, '_wilder_python_basic_highlight', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_1 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_1'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_1 FuncUndefined _wilder_python_basic_highlight call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_basic_highlight", v:true, "_wilder_python_basic_highlight", {}, "RPC_DEFINE_AUTOCMD_GROUP_1")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_clap_filt', 'urgent', '_wilder_python_clap_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_2 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_2'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_2 FuncUndefined _wilder_python_clap_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_clap_filt", 'urgent', "_wilder_python_clap_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_2")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_cpsm_filt', 'urgent', '_wilder_python_cpsm_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_3 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_3'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_3 FuncUndefined _wilder_python_cpsm_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_cpsm_filt", 'urgent', "_wilder_python_cpsm_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_3")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...function:_wilder_python_cpsm_highlight', v:true, '_wilder_python_cpsm_highlight', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_4 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_4'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_4 FuncUndefined _wilder_python_cpsm_highlight call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_cpsm_highlight", v:true, "_wilder_python_cpsm_highlight", {}, "RPC_DEFINE_AUTOCMD_GROUP_4")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...r:function:_wilder_python_difflib_sort', 'urgent', '_wilder_python_difflib_sort', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_5 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_5'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_5 FuncUndefined _wilder_python_difflib_sort call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_difflib_sort", 'urgent', "_wilder_python_difflib_sort", {}, "RPC_DEFINE_AUTOCMD_GROUP_5")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...er:function:_wilder_python_file_finder', 'urgent', '_wilder_python_file_finder', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_6 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_6'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_6 FuncUndefined _wilder_python_file_finder call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_file_finder", 'urgent', "_wilder_python_file_finder", {}, "RPC_DEFINE_AUTOCMD_GROUP_6")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...er:function:_wilder_python_fruzzy_filt', 'urgent', '_wilder_python_fruzzy_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_7 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_7'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_7 FuncUndefined _wilder_python_fruzzy_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_fruzzy_filt", 'urgent', "_wilder_python_fruzzy_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_7")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...der:function:_wilder_python_fuzzy_filt', 'urgent', '_wilder_python_fuzzy_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_8 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_8'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_8 FuncUndefined _wilder_python_fuzzy_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_fuzzy_filt", 'urgent', "_wilder_python_fuzzy_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_8")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...unction:_wilder_python_fuzzywuzzy_sort', 'urgent', '_wilder_python_fuzzywuzzy_sort', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_9 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_9'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_9 FuncUndefined _wilder_python_fuzzywuzzy_sort call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_fuzzywuzzy_sort", 'urgent', "_wilder_python_fuzzywuzzy_sort", {}, "RPC_DEFINE_AUTOCMD_GROUP_9")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...ion:_wilder_python_get_file_completion', v:true, '_wilder_python_get_file_completion', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_10 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_10'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_10 FuncUndefined _wilder_python_get_file_completion call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_get_file_completion", v:true, "_wilder_python_get_file_completion", {}, "RPC_DEFINE_AUTOCMD_GROUP_10")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...:function:_wilder_python_get_help_tags', 'urgent', '_wilder_python_get_help_tags', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_11 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_11'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_11 FuncUndefined _wilder_python_get_help_tags call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_get_help_tags", 'urgent', "_wilder_python_get_help_tags", {}, "RPC_DEFINE_AUTOCMD_GROUP_11")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_get_users', 'urgent', '_wilder_python_get_users', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_12 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_12'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_12 FuncUndefined _wilder_python_get_users call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_get_users", 'urgent', "_wilder_python_get_users", {}, "RPC_DEFINE_AUTOCMD_GROUP_12")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...n/python3/wilder:function:_wilder_init', v:true, '_wilder_init', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_13 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_13'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_13 FuncUndefined _wilder_init call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_init", v:true, "_wilder_init", {}, "RPC_DEFINE_AUTOCMD_GROUP_13")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...unction:_wilder_python_pcre2_highlight', v:true, '_wilder_python_pcre2_highlight', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_14 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_14'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_14 FuncUndefined _wilder_python_pcre2_highlight call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_pcre2_highlight", v:true, "_wilder_python_pcre2_highlight", {}, "RPC_DEFINE_AUTOCMD_GROUP_14")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh.../wilder:function:_wilder_python_search', 'urgent', '_wilder_python_search', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_15 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_15'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_15 FuncUndefined _wilder_python_search call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_search", 'urgent', "_wilder_python_search", {}, "RPC_DEFINE_AUTOCMD_GROUP_15")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...3/wilder:function:_wilder_python_sleep', 'urgent', '_wilder_python_sleep', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_16 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_16'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_16 FuncUndefined _wilder_python_sleep call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_sleep", 'urgent', "_wilder_python_sleep", {}, "RPC_DEFINE_AUTOCMD_GROUP_16")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...r:function:_wilder_python_lexical_sort', 'urgent', '_wilder_python_lexical_sort', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_17 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_17'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_17 FuncUndefined _wilder_python_lexical_sort call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_lexical_sort", 'urgent', "_wilder_python_lexical_sort", {}, "RPC_DEFINE_AUTOCMD_GROUP_17")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
calling remote#define#FunctionOnHost('python3', '/Users/christopher.griffith/.local/sh...lder:function:_wilder_python_uniq_filt', 'urgent', '_wilder_python_uniq_filt', {})

line 1:   let group = s:GetNextAutocmdGroup()
calling <SNR>80_GetNextAutocmdGroup()

line 1:   let gid = s:next_gid
line 2:   let s:next_gid += 1
line 3: 
line 4:   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
line 5:   " Ensure the group is defined
line 6:   exe 'augroup '.group_name.' | augroup END'
line 6: augroup RPC_DEFINE_AUTOCMD_GROUP_18 | augroup END
line 6:  augroup END
line 7:   return group_name
<SNR>80_GetNextAutocmdGroup returning 'RPC_DEFINE_AUTOCMD_GROUP_18'

continuing in remote#define#FunctionOnHost

line 2:   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'
line 2: autocmd! RPC_DEFINE_AUTOCMD_GROUP_18 FuncUndefined _wilder_python_uniq_filt call remote#define#FunctionBootstrap("python3", "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/rplugin/python3/wilder:function:_wilder_python_uniq_filt", 'urgent', "_wilder_python_uniq_filt", {}, "RPC_DEFINE_AUTOCMD_GROUP_18")
remote#define#FunctionOnHost returning #0

continuing in remote#host#RegisterPlugin

line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 39: 
line 40:   call add(plugins, {'path': a:path, 'specs': a:specs})
remote#host#RegisterPlugin returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/rplugin.vim

line 28: 
line 29: 
line 30: " ruby plugins
line 31: 
line 32: 
line 33: " python plugins
line 34: 
line 35: 
finished sourcing /Users/christopher.griffith/.local/share/nvim/rplugin.vim
continuing in <SNR>77_LoadRemotePlugins
line 4:   endif
<SNR>77_LoadRemotePlugins returning #0

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim

line 69: endif
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/rplugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/shada.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/shada.vim"
line 1: if exists('g:loaded_shada_plugin')
line 2:   finish
line 3: endif
line 4: let g:loaded_shada_plugin = 1
line 5: 
line 6: augroup ShaDaCommands
line 7:   autocmd!
line 8:   autocmd BufReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call setline('.', shada#get_strings(readfile(expand('<afile>'),'b'))) |setlocal filetype=shada
line 12:   autocmd FileReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call append("'[", shada#get_strings(readfile(expand('<afile>'), 'b')))
line 15:   autocmd BufWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |if writefile(shada#get_binstrings(getline(1, '$')),expand('<afile>'), 'b') == 0 |  let &l:modified = (expand('<afile>') is# bufname(+expand('<abuf>'))? 0: stridx(&cpoptions, '+') != -1) |endif
line 23:   autocmd FileWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'b')
line 30:   autocmd FileAppendCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'ab')
line 37:   autocmd SourceCmd *.shada,*.shada.tmp.[a-z] :execute 'rshada' fnameescape(expand('<afile>'))
line 39: augroup END
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/shada.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/spellfile.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: 
line 3: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 4:   finish
line 5: endif
line 6: let loaded_spellfile_plugin = 1
line 7: 
line 8: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/spellfile.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tarPlugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v32"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 47:   au BufReadCmd   *.tar.zst^I^Icall tar#Browse(expand("<amatch>"))
line 48:   au BufReadCmd   *.tzs^I^I^Icall tar#Browse(expand("<amatch>"))
line 49: augroup END
line 50: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: " Restoration And Modelines: {{{1
line 54: " vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tarPlugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tohtml.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2023 Jan 01
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: if exists('g:loaded_2html_plugin')
line 9:   finish
line 10: endif
line 11: let g:loaded_2html_plugin = 'vim9.0_v1'
line 12: 
line 13: "
line 14: " Changelog: {{{
line 15: "   9.0_v1  (this version): - Implement g:html_no_doc and g:html_no_modeline
line 16: "                             for diff mode. Add tests.
line 17: "           (Vim 9.0.1122): NOTE: no version string update for this version!
line 18: "                           - Bugfix for variable name in g:html_no_doc
line 19: "           (Vim 9.0.0819): NOTE: no version string update for this version!
line 20: "                           - Add options g:html_no_doc, g:html_no_lines,
line 21: "                             and g:html_no_modeline (partially included in Vim
line 22: "                             runtime prior to version string update).
line 23: "                           - Updates for new Vim9 string append style (i.e. use
line 24: "                             ".." instead of ".")
line 25: "
line 26: "   8.1 updates: {{{
line 27: "   8.1_v2  (Vim 8.1.2312): - Fix SourceForge issue #19: fix calculation of tab
line 28: "                             stop position to use in expanding a tab, when that
line 29: "                             tab occurs after a syntax match which in turn
line 30: "                             comes after previously expanded tabs.
line 31: "                           - Set eventignore while splitting a window for the
line 32: "                             destination file to ignore FileType events;
line 33: "                             speeds up processing when the destination file
line 34: "                             already exists and HTML highlight takes too long.
line 35: "                           - Fix SourceForge issue #20: progress bar could not be
line 36: "                             seen when DiffDelete background color matched
line 37: "                             StatusLine background color. Added TOhtmlProgress
line 38: "                             highlight group for manual user override, but
line 39: "                             calculate it to be visible compared to StatusLine
line 40: "                             by default.
line 41: "                           - Fix SourceForge issue #1: Remove workaround for old
line 42: "                             browsers which don't support 'ch' CSS unit, since
line 43: "                             all modern browsers, including IE>=9, support it.
line 44: "                           - Fix SourceForge issue #10: support termguicolors
line 45: "                           - Fix SourceForge issue #21: default to using
line 46: "                             generated content instead of <input> tags for
line 47: "                             uncopyable text, so that text is correctly
line 48: "                             prevented from being copied in chrome. Use
line 49: "                             g:html_use_input_for_pc option to control the
line 50: "                             method used.
line 51: "                           - Switch to HTML5 to allow using vnu as a validator
line 52: "                             in unit test.
line 53: "                           - Fix fallback sizing of <input> tags for browsers
line 54: "                             without "ch" support.
line 55: "                           - Fix cursor on unselectable diff filler text.
line 56: "   8.1_v1  (Vim 8.1.0528): - Fix SourceForge issue #6: Don't generate empty
line 57: "                             script tag.
line 58: "                           - Fix SourceForge issue #5: javascript should
line 59: "                             declare variables with "var".
line 60: "                           - Fix SourceForge issue #13: errors thrown sourcing
line 61: "                             2html.vim directly when plugins not loaded.
line 62: "                           - Fix SourceForge issue #16: support 'vartabstop'.
line 63: "}}}
line 64: "
line 65: "   7.4 updates: {{{
line 66: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing
line 67: "                           an empty buffer. Jan Stocker: allow g:html_font to
line 68: "                           take a list so it is easier to specfiy fallback
line 69: "                           fonts in the generated CSS.
line 70: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and
line 71: "^I^I^I    also for version-specific modelines like "vim>703:".
line 72: "}}}
line 73: "
line 74: "   7.3 updates: {{{
line 75: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using
line 76: "^I^I^I    g:html_line_ids=0. Allow customizing
line 77: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 78: "^I^I^I    g:html_id_expr evaluated when the buffer conversion
line 79: "^I^I^I    is started.
line 80: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and
line 81: "^I^I^I    insert modeline to set it to manual.
line 82: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 83: "^I^I^I    duplicate of one buffer instead of including both.
line 84: "^I^I^I    Add anchors to each line so you can put '#L123'
line 85: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 86: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 87: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 88: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 89: "^I^I^I    Allow TOhtml to chain together with other commands
line 90: "^I^I^I    using |.
line 91: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple
line 92: "^I^I^I    highlight groups make up the start-of-modeline text.
line 93: "^I^I^I    Improve render time of page with uncopyable regions
line 94: "^I^I^I    by not using one-input-per-char. Change name of
line 95: "^I^I^I    uncopyable option from html_unselectable to
line 96: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 97: "^I^I^I    default to inserting invalid markup for uncopyable
line 98: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 99: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 100: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 101: "^I^I^I    eliminate post-processing substitute commands in
line 102: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 103: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 104: "^I^I^I    speed improvements. Fix modeline mangling in
line 105: "^I^I^I    generated output so it works for text in the first
line 106: "^I^I^I    column. Fix missing line number and fold column in
line 107: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 108: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 109: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 110: "^I^I^I    the new default foldtext added in v11, as the patch
line 111: "^I^I^I    adding it has not yet been included in Vim.
line 112: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 113: "^I^I^I    Brabandt in
line 114: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 115: "^I^I^I    This patch has not yet been included in Vim, thus
line 116: "^I^I^I    these changes are removed in the next version.
line 117: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside
line 118: "^I^I^I    multiple nested folds with dynamic folding on.
line 119: "^I^I^I    Also fix problem with foldtext in this situation.
line 120: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css
line 121: "^I^I^I    and without html_no_pre, default value same as
line 122: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 123: "^I^I^I    'fileencoding' for converted document encoding if
line 124: "^I^I^I    'buftype' indicates a special buffer which isn't
line 125: "^I^I^I    written.
line 126: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab
line 127: "^I^I^I    characters in generated output (Andy Spencer).
line 128: "^I^I^I    Escape text that looks like a modeline so Vim
line 129: "^I^I^I    doesn't use anything in the converted HTML as a
line 130: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 131: "^I^I^I    before the conversion range. Remove fold column when
line 132: "^I^I^I    there are no folds.
line 133: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:
line 134: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 135: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 136: "^I^I^I    supported by all major browsers according to
line 137: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 138: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 139: "^I^I^I    HTML encoding to Vim encoding detection be
line 140: "^I^I^I    case-insensitive for built-in pairs.
line 141: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 142: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 143: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 144: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 145: "^I^I^I    file matches its indicated charset. Add charsets for
line 146: "^I^I^I    all of Vim's natively supported encodings.
line 147: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other
line 148: "^I^I^I    user settings interfering with diff mode generation,
line 149: "^I^I^I    trailing whitespace (e.g. line number column) when
line 150: "^I^I^I    using html_no_pre, and bugs when using
line 151: "^I^I^I    html_hover_unfold.
line 152: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 153: "^I^I^I    folds in diff mode when first line was folded.
line 154: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode
line 155: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css
line 156: "^I^I^I    default to true when not set to anything. Use strict
line 157: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 158: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 159: "^I^I^I    when using this option. Add meta tag for settings.
line 160: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the
line 161: "^I^I^I    diff colors and the normal syntax colors
line 162: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output
line 163: "}}}
line 164: "}}}
line 165: 
line 166: " TODO: {{{
line 167: "   * Check the issue tracker:
line 168: "     https://sourceforge.net/p/vim-tohtml/issues/search/?q=%21status%3Aclosed
line 169: "   * Options for generating the CSS in external style sheets. New :TOcss
line 170: "     command to convert the current color scheme into a (mostly) generic CSS
line 171: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 172: "     by Erik Falor
line 173: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 174: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 175: "     term) to use for the styling. Suggestion by "nacitar".
line 176: "   * Add way to override or specify which RGB colors map to the color numbers
line 177: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 178: "   * Disable filetype detection until after all processing is done.
line 179: "   * Add option for not generating the hyperlink on stuff that looks like a
line 180: "     URL? Or just color the link to fit with the colorscheme (and only special
line 181: "     when hovering)?
line 182: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 183: "     regions is turned on. Possible solution: Add normal text line numbers with
line 184: "     display:none, set to display:inline for print style sheets, and hide
line 185: "     <input> elements for print, to allow Opera printing multiple pages (and
line 186: "     other uncopyable areas?). May need to make the new text invisible to IE
line 187: "     with conditional comments to prevent copying it, IE for some reason likes
line 188: "     to copy hidden text. Other browsers too?
line 189: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 190: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 191: "     on Windows). Perhaps it is font related?
line 192: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 193: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 194: "     on diff lines though.
line 195: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 196: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 197: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 198: "     accepted to modify it.
line 199: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 200: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 201: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 202: "     does not show the whole diff filler as it is supposed to?
line 203: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 204: "     invalid content. Can/should anything be done about this? Maybe a separate
line 205: "     plugin to correct 'isprint' based on encoding?
line 206: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 207: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 208: "   * Font auto-detection similar to
line 209: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 210: "     platforms.
line 211: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 212: "^I- listchars support
line 213: "^I- full-line background highlight
line 214: "^I- other?
line 215: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 216: "     free with full-line background highlight above).
line 217: "   * Restore open/closed folds and cursor position after processing each file
line 218: "     with option not to restore for speed increase.
line 219: "   * Add extra meta info (generation time, etc.)?
line 220: "   * Tidy up so we can use strict doctype in even more situations
line 221: "   * Implementation detail: add threshold for writing the lines to the html
line 222: "     buffer before we're done (5000 or so lines should do it)
line 223: "   * TODO comments for code cleanup scattered throughout
line 224: "}}}
line 225: 
line 226: " Define the :TOhtml command when:
line 227: " - 'compatible' is not set
line 228: " - this plugin or user override was not already loaded
line 229: " - user commands are available. {{{
line 230: if !&cp && !exists(":TOhtml") && has("user_commands")
line 231:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 232: endif "}}}
line 233: 
line 234: " Make sure any patches will probably use consistent indent
line 235: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tohtml.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tutor.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tutor.vim"
line 1: if exists('g:loaded_tutor_mode_plugin') || &compatible
line 2:     finish
line 3: endif
line 4: let g:loaded_tutor_mode_plugin = 1
line 5: 
line 6: command! -nargs=? -complete=custom,tutor#TutorCmdComplete Tutor call tutor#TutorCmd(<q-args>)
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/tutor.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/zipPlugin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^IJan 07, 2020
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v32"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/zipPlugin.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/cmp_nvim_lsp_document_symbol.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/cmp_nvim_lsp_document_symbol.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/plugin/cmp_nvim_lsp_document_symbol.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/cmp_nvim_lua.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/cmp_nvim_lua.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/plugin/cmp_nvim_lua.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/barbar.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/barbar.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/barbar.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/nightfox.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/nightfox.lua"
Executing: colorscheme nightfox
Executing ColorSchemePre Autocommands for "*"
autocommand <Lua 9: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/loader.lua:31>

Executing: 
Searching for "colors/nightfox.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/colors/nightfox.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/nightfox.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/nightfox.vim"
line 1: lua << EOF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/nightfox/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/nightfox/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/colors/nightfox.vim
continuing in nvim_exec2() called at /Users/christopher.griffith/projects/dotfiles/nvim/after/plugin/nightfox.lua:0
Executing ColorScheme Autocommands for "*"
autocommand <Lua 31: ~/.local/share/nvim/lazy/glance.nvim/lua/glance/highlights.lua:155>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand <Lua 249: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:186>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand <Lua 270: ~/.local/share/nvim/lazy/nvim-web-devicons/lua/nvim-web-devicons.lua:281>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand lua require'lualine'.setup()

Executing: lua require'lualine'.setup()
Executing: augroup lualine | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Searching for "lua/lualine/themes/auto.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/lua/lualine/themes/auto.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/lua/lualine/themes/auto.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/lua/lualine/themes/auto.lua"
Searching for "lua/lualine/themes/nightfox.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/lua/lualine/themes/nightfox.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/lualine/themes/nightfox.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/lua/lualine/themes/nightfox.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/lua/lualine/themes/nightfox.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/lua/lualine/themes/nightfox.lua"
Executing: highlight clear lualine_c_filename_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_terminal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_replace
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_b_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_inactive
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_filename_normal
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_visual
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_a_command
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight clear lualine_c_insert
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_inactive guifg=#738091 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_inactive guifg=#71839b guibg=None gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_inactive guifg=#719cd6 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_terminal guifg=#cdcecf guibg=#574336 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_terminal guifg=#131a24 guibg=#f4a261 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_visual guifg=#cdcecf guibg=#3c3759 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_visual guifg=#131a24 guibg=#9d79d6 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_replace guifg=#cdcecf guibg=#4a2a3a gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_replace guifg=#131a24 guibg=#c94f6d gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_normal guifg=#aeafb0 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_normal guifg=#cdcecf guibg=#2f4159 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_normal guifg=#131a24 guibg=#719cd6 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_insert guifg=#cdcecf guibg=#344847 gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_insert guifg=#131a24 guibg=#81b29a gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_b_command guifg=#cdcecf guibg=#4f4c3c gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_a_command guifg=#131a24 guibg=#dbc074 gui=bold
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd lualine ColorScheme * lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:     autocmd lualine OptionSet background lua require'lualine'.setup()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_normal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_insert guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_visual guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_replace guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_command guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_terminal guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename_inactive guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_stl_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing: au lualine WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged *
--- Autocommands ---
Executing: autocmd lualine_stl_refresh WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost,VimResized,Filetype,CursorMoved,CursorMovedI,ModeChanged * call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup lualine_tal_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing: augroup lualine_wb_refresh | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Executing ColorScheme Autocommands for "*"
autocommand lua require('notify.config.highlights').setup()

Executing: lua require('notify.config.highlights').setup()
Executing:     hi default link NotifyBackground Normal
Executing:     hi default NotifyERRORBorder guifg=#8A1F1F
Executing:     hi default NotifyWARNBorder guifg=#79491D
Executing:     hi default NotifyINFOBorder guifg=#4F6752
Executing:     hi default NotifyDEBUGBorder guifg=#8B8B8B
Executing:     hi default NotifyTRACEBorder guifg=#4F3552
Executing:     hi default NotifyERRORIcon guifg=#F70067
Executing:     hi default NotifyWARNIcon guifg=#F79000
Executing:     hi default NotifyINFOIcon guifg=#A9FF68
Executing:     hi default NotifyDEBUGIcon guifg=#8B8B8B
Executing:     hi default NotifyTRACEIcon guifg=#D484FF
Executing:     hi default NotifyERRORTitle  guifg=#F70067
Executing:     hi default NotifyWARNTitle guifg=#F79000
Executing:     hi default NotifyINFOTitle guifg=#A9FF68
Executing:     hi default NotifyDEBUGTitle  guifg=#8B8B8B
Executing:     hi default NotifyTRACETitle  guifg=#D484FF
Executing:     hi default link NotifyERRORBody Normal
Executing:     hi default link NotifyWARNBody Normal
Executing:     hi default link NotifyINFOBody Normal
Executing:     hi default link NotifyDEBUGBody Normal
Executing:     hi default link NotifyTRACEBody Normal
Executing: 
Executing:     hi default link NotifyLogTime Comment
Executing:     hi default link NotifyLogTitle Special
Executing:   
Executing ColorScheme Autocommands for "*"
autocommand <Lua 373: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing ColorScheme Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/nightfox.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/noice.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/noice.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/noice.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/nvim-lspconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/nvim-lspconfig.lua"
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/nvim-lspconfig.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/telescope.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/telescope.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/telescope.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/trouble.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/trouble.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/trouble.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/vim-fugitive.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/vim-fugitive.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/vim-fugitive.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/vim-obsession.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/vim-obsession.lua"
Executing: augroup ObsessionGroup
Executing:   au!
Executing:   au VimEnter * nested if !&modified && empty(v:this_session) | Obsession | echo '' | endif
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup END
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/vim-obsession.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing: source /Users/christopher.griffith/.config/nvim/after/plugin/vim-sort-motion.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.config/nvim/after/plugin/vim-sort-motion.lua"
finished sourcing /Users/christopher.griffith/.config/nvim/after/plugin/vim-sort-motion.lua
continuing in nvim_exec2() called at /Users/christopher.griffith/.config/nvim/init.lua:0
Executing User Autocommands for "LazyDone"
autocommand <Lua 8: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:159>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: function! StripTrailingWhitespace()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing: function! IsExcludedFileType()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing: function! TurnOnRelativeNumber()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing: function! TurnOffRelativeNumber()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.config/nvim/init.lua
Searching for "filetype.lua filetype.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.config/nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/filetype.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/)
chdir(/Users/christopher.griffith/projects/dotfiles)
sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua"
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/filetype.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/filetype.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/filetype.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/filetype.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/filetype.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/filetype.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/filetype.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/filetype.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/filetype.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/)
chdir(/Users/christopher.griffith/projects/dotfiles)
sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2022 Apr 12
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/syntax/synload.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/syntax/synload.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/synload.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 19: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2022 Apr 12
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Line continuation is used here, remove 'C' from 'cpoptions'
line 18: let s:cpo_save = &cpo
line 19: set cpo&vim
line 20: 
line 21: " First remove all old syntax autocommands.
line 22: au! Syntax
line 23: 
line 24: au Syntax *^I^Icall s:SynSet()
line 25: 
line 26: fun! s:SynSet()
line 57: 
line 58: 
line 59: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 60: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 65: 
line 66: 
line 67: " Source the user-specified syntax highlighting file
line 68: if exists("mysyntaxfile")
line 69:   let s:fname = expand(mysyntaxfile)
line 70:   if filereadable(s:fname)
line 71:     execute "source " . fnameescape(s:fname)
line 72:   endif
line 73: endif
line 74: 
line 75: " Restore 'cpoptions'
line 76: let &cpo = s:cpo_save
line 77: unlet s:cpo_save
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/synload.vim
continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected
line 31: " unless treesitter highlighting is enabled.
line 32: " Avoid an error when 'verbose' is set and <amatch> expansion fails.
line 33: augroup syntaxset
line 34:   au! FileType *^Iif !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
line 35: augroup END
line 36: 
line 37: " Execute the syntax autocommands for the each buffer.
line 38: " If the filetype wasn't detected yet, do that now.
line 39: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 40: " already was set manually (e.g., help buffers).
line 41: doautoall syntaxset FileType
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
line 42: if !s:did_ft
line 43:   doautoall filetypedetect BufRead
line 44: endif
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/syntax.vim
Reading ShaDa file "/Users/christopher.griffith/.local/state/nvim/shada/main.shada" info marks oldfiles
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 106: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 254: vim/_editor.lua:0>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufWinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 105: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 251: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
autocommand <Lua 253: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 316: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:89>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufEnter Autocommands for "*"
autocommand if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif

Executing: if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
Executing:    exe s:persist() | endif
calling <SNR>67_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
line 10:       execute 'mksession!' fnameescape(tmp)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>67_persist returning ''

continuing in BufEnter Autocommands for "*"

Executing: 
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 429: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in BufEnter Autocommands for "*"

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 243: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/state.lua:369>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 281: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/init.lua:18>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/util/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/util/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
autocommand <Lua 317: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:82>

Executing: 
autocommand <Lua 319: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:82>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing VimEnter Autocommands for "*"
autocommand if !&modified && empty(v:this_session) | Obsession | echo '' | endif

Executing: if !&modified && empty(v:this_session) | Obsession | echo '' | endif
Executing:  Obsession | echo '' | endif
Executing: execute s:dispatch(0, '')
calling <SNR>67_dispatch(0, '')

line 1:   let session = get(g:, 'this_obsession', v:this_session)
line 2:   try
line 3:     if a:bang && empty(a:file) && filereadable(session)
line 4:       echo 'Deleting session in '.fnamemodify(session, ':~:.')
line 5:       call delete(session)
line 6:       unlet! g:this_obsession
line 7:       return ''
line 8:     elseif empty(a:file) && exists('g:this_obsession')
line 9:       echo 'Pausing session in '.fnamemodify(session, ':~:.')
line 10:       unlet g:this_obsession
line 11:       return ''
line 12:     elseif empty(a:file) && !empty(session)
line 13:       let file = session
line 14:     elseif empty(a:file)
line 15:       let file = getcwd() . '/Session.vim'
line 16:     elseif isdirectory(a:file)
line 17:       let file = substitute(fnamemodify(expand(a:file), ':p'), '[\/]$', '', '') . '/Session.vim'
line 19:     else
line 20:       let file = fnamemodify(expand(a:file), ':p')
line 21:     endif
line 22:     if !a:bang && file !~# 'Session\.vim$' && filereadable(file) && getfsize(file) > 0 && readfile(file, '', 1)[0] !=# 'let SessionLoad = 1'
line 27:       return 'mksession '.fnameescape(file)
line 28:     endif
line 29:     let g:this_obsession = file
line 30:     let error = s:persist()
calling <SNR>67_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>67_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.79181.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>67_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>67_persist returning ''

continuing in <SNR>67_dispatch

line 31:     if empty(error)
line 32:       echo 'Tracking session in '.fnamemodify(file, ':~:.')
Tracking session in Session.vim
line 33:       let v:this_session = file
line 34:       return ''
:return  made pending

line 35:     else
line 36:       return error
line 37:     endif
line 38:   finally
line 39:     let &l:readonly = &l:readonly
line 40:   endtry
:return  resumed

<SNR>67_dispatch returning ''

continuing in VimEnter Autocommands for "*"

Executing: 
Executing:  echo '' | endif

Executing:  endif
Executing UIEnter Autocommands for "*"
autocommand <Lua 6: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:259>

Executing: 
autocommand <Lua 430: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:165>

Executing: 
Searching for "autoload/provider/clipboard.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/provider/clipboard.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/)
chdir(/Users/christopher.griffith/projects/dotfiles)
sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim"
line 1: " The clipboard provider uses shell commands to communicate with the clipboard.
line 2: " The provider function will only be registered if a supported command is
line 3: " available.
line 4: 
line 5: if exists('g:loaded_clipboard_provider')
line 6:   finish
line 7: endif
line 8: " Default to 1.  provider#clipboard#Executable() may set 2.
line 9: " To force a reload:
line 10: "   :unlet g:loaded_clipboard_provider
line 11: "   :runtime autoload/provider/clipboard.vim
line 12: let g:loaded_clipboard_provider = 1
line 13: 
line 14: let s:copy = {}
line 15: let s:paste = {}
line 16: let s:clipboard = {}
line 17: 
line 18: " When caching is enabled, store the jobid of the xclip/xsel process keeping
line 19: " ownership of the selection, so we know how long the cache is valid.
line 20: let s:selection = { 'owner': 0, 'data': [], 'stderr_buffered': v:true }
line 21: 
line 22: function! s:selection.on_exit(jobid, data, event) abort
line 35: 
line 36: let s:selections = { '*': s:selection, '+': copy(s:selection) }
line 37: 
line 38: function! s:try_cmd(cmd, ...) abort
line 51: 
line 52: " Returns TRUE if `cmd` exits with success, else FALSE.
line 53: function! s:cmd_ok(cmd) abort
line 57: 
line 58: function! s:split_cmd(cmd) abort
line 61: 
line 62: let s:cache_enabled = 1
line 63: let s:err = ''
line 64: 
line 65: function! provider#clipboard#Error() abort
line 68: 
line 69: function! provider#clipboard#Executable() abort
line 164: 
line 165: function! s:clipboard.get(reg) abort
line 182: 
line 183: function! s:clipboard.set(lines, regtype, reg) abort
line 241: 
line 242: function! provider#clipboard#Call(method, args) abort
line 253: 
line 254: " eval_has_provider() decides based on this variable.
line 255: let g:loaded_clipboard_provider = empty(provider#clipboard#Executable()) ? 1 : 2
calling provider#clipboard#Executable()

line 1:   if exists('g:clipboard')
line 2:     if type({}) isnot# type(g:clipboard) || type({}) isnot# type(get(g:clipboard, 'copy', v:null)) || type({}) isnot# type(get(g:clipboard, 'paste', v:null))
line 5:       let s:err = 'clipboard: invalid g:clipboard'
line 6:       return ''
line 7:     endif
line 8: 
line 9:     let s:copy = {}
line 10:     let s:copy['+'] = s:split_cmd(get(g:clipboard.copy, '+', v:null))
line 11:     let s:copy['*'] = s:split_cmd(get(g:clipboard.copy, '*', v:null))
line 12: 
line 13:     let s:paste = {}
line 14:     let s:paste['+'] = s:split_cmd(get(g:clipboard.paste, '+', v:null))
line 15:     let s:paste['*'] = s:split_cmd(get(g:clipboard.paste, '*', v:null))
line 16: 
line 17:     let s:cache_enabled = get(g:clipboard, 'cache_enabled', 0)
line 18:     return get(g:clipboard, 'name', 'g:clipboard')
line 19:   elseif has('mac')
line 20:     let s:copy['+'] = ['pbcopy']
line 21:     let s:paste['+'] = ['pbpaste']
line 22:     let s:copy['*'] = s:copy['+']
line 23:     let s:paste['*'] = s:paste['+']
line 24:     let s:cache_enabled = 0
line 25:     return 'pbcopy'
provider#clipboard#Executable returning 'pbcopy'

continuing in /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim

finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing:       silent! call dictwatcherdel(g:, 'bufferline', 'barbar#events#dict_changed')
Error detected while processing nvim_exec2():
Couldn't find a watcher matching key and callback
Executing:       silent! call dictwatcherdel(g:bufferline, '*', 'barbar#events#on_option_changed')
Error detected while processing nvim_exec2():
E121: Undefined variable: g:bufferline
Error detected while processing nvim_exec2():
E116: Invalid arguments for function dictwatcherdel
Executing:     
Executing:       call dictwatcheradd(g:, 'bufferline', 'barbar#events#dict_changed')
Executing:       call dictwatcheradd(g:bufferline, '*', 'barbar#events#on_option_changed')
Executing:     
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_filename guifg=#719cd6 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_normal guifg=#719cd6 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing User Autocommands for "VeryLazy"
autocommand <Lua 7: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:267>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/view/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing User Autocommands for "VeryLazy"
autocommand <Lua 11: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/tmux_navigator.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/tmux_navigator.vim"
line 1: " Maps <C-h/j/k/l> to switch vim splits in the given direction. If there are
line 2: " no more windows in that direction, forwards the operation to tmux.
line 3: " Additionally, <C-\> toggles between last active vim splits/tmux panes.
line 4: 
line 5: if exists("g:loaded_tmux_navigator") || &cp || v:version < 700
line 6:   finish
line 7: endif
line 8: let g:loaded_tmux_navigator = 1
line 9: 
line 10: function! s:VimNavigate(direction)
line 17: 
line 18: if !get(g:, 'tmux_navigator_no_mappings', 0)
line 19:   noremap <silent> <c-h> :<C-U>TmuxNavigateLeft<cr>
line 20:   noremap <silent> <c-j> :<C-U>TmuxNavigateDown<cr>
line 21:   noremap <silent> <c-k> :<C-U>TmuxNavigateUp<cr>
line 22:   noremap <silent> <c-l> :<C-U>TmuxNavigateRight<cr>
line 23:   noremap <silent> <c-\> :<C-U>TmuxNavigatePrevious<cr>
line 24: endif
line 25: 
line 26: if empty($TMUX)
line 27:   command! TmuxNavigateLeft call s:VimNavigate('h')
line 28:   command! TmuxNavigateDown call s:VimNavigate('j')
line 29:   command! TmuxNavigateUp call s:VimNavigate('k')
line 30:   command! TmuxNavigateRight call s:VimNavigate('l')
line 31:   command! TmuxNavigatePrevious call s:VimNavigate('p')
line 32:   finish
line 33: endif
line 34: 
line 35: command! TmuxNavigateLeft call s:TmuxAwareNavigate('h')
line 36: command! TmuxNavigateDown call s:TmuxAwareNavigate('j')
line 37: command! TmuxNavigateUp call s:TmuxAwareNavigate('k')
line 38: command! TmuxNavigateRight call s:TmuxAwareNavigate('l')
line 39: command! TmuxNavigatePrevious call s:TmuxAwareNavigate('p')
line 40: 
line 41: if !exists("g:tmux_navigator_save_on_switch")
line 42:   let g:tmux_navigator_save_on_switch = 0
line 43: endif
line 44: 
line 45: if !exists("g:tmux_navigator_disable_when_zoomed")
line 46:   let g:tmux_navigator_disable_when_zoomed = 0
line 47: endif
line 48: 
line 49: if !exists("g:tmux_navigator_preserve_zoom")
line 50:   let g:tmux_navigator_preserve_zoom = 0
line 51: endif
line 52: 
line 53: if !exists("g:tmux_navigator_no_wrap")
line 54:   let g:tmux_navigator_no_wrap = 0
line 55: endif
line 56: 
line 57: let s:pane_position_from_direction = {'h': 'left', 'j': 'bottom', 'k': 'top', 'l': 'right'}
line 58: 
line 59: function! s:TmuxOrTmateExecutable()
line 62: 
line 63: function! s:TmuxVimPaneIsZoomed()
line 66: 
line 67: function! s:TmuxSocket()
line 71: 
line 72: function! s:TmuxCommand(args)
line 80: 
line 81: function! s:TmuxNavigatorProcessList()
line 84: command! TmuxNavigatorProcessList call s:TmuxNavigatorProcessList()
line 85: 
line 86: let s:tmux_is_last_pane = 0
line 87: augroup tmux_navigator
line 88:   au!
line 89:   autocmd WinEnter * let s:tmux_is_last_pane = 0
line 90: augroup END
line 91: 
line 92: function! s:NeedsVitalityRedraw()
line 95: 
line 96: function! s:ShouldForwardNavigationBackToTmux(tmux_last_pane, at_tab_page_edge)
line 102: 
line 103: function! s:TmuxAwareNavigate(direction)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/plugin/tmux_navigator.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim"
line 1: if exists("g:loaded_node") || &cp || v:version < 700 | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: let g:loaded_node = 1
line 3: 
line 4: let s:filetypes = ["javascript", "json", "jsx"]
line 5: if exists("g:node_filetypes") | let s:filetypes = g:node_filetypes | endif
line 5:  let s:filetypes = g:node_filetypes | endif
line 5:  endif
line 6: 
line 7: function! s:detect(dir)
line 22: 
line 23: function! s:permutate(ft)
line 28: 
line 29: function! s:flatten(list)
line 38: 
line 39: augroup Node
line 40: ^Iau!
line 41: ^Iau VimEnter * if empty(expand("<amatch>")) | call s:detect(getcwd()) | endif
line 42: ^Iau BufRead,BufNewFile * call s:detect(expand("<amatch>:p"))
line 43: 
line 44: ^Ilet s:filetype_patterns = s:flatten(map(s:filetypes, "<SID>permutate(v:val)"))
calling <SNR>118_permutate('javascript')

line 1: ^I" Don't know right now how to detect javascript.jsx and other permutations
line 2: ^I" without precomputing them in advance. Please let me know if you do.
line 3: ^Ireturn [a:ft, a:ft . ".*", "*." . a:ft, "*." . a:ft . ".*"]
<SNR>118_permutate returning ['javascript', 'javascript.*', '*.javascript', '*.javascript.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

calling <SNR>118_permutate('json')

line 1: ^I" Don't know right now how to detect javascript.jsx and other permutations
line 2: ^I" without precomputing them in advance. Please let me know if you do.
line 3: ^Ireturn [a:ft, a:ft . ".*", "*." . a:ft, "*." . a:ft . ".*"]
<SNR>118_permutate returning ['json', 'json.*', '*.json', '*.json.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

calling <SNR>118_permutate('jsx')

line 1: ^I" Don't know right now how to detect javascript.jsx and other permutations
line 2: ^I" without precomputing them in advance. Please let me know if you do.
line 3: ^Ireturn [a:ft, a:ft . ".*", "*." . a:ft, "*." . a:ft . ".*"]
<SNR>118_permutate returning ['jsx', 'jsx.*', '*.jsx', '*.jsx.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

calling <SNR>118_flatten([['javascript', 'javascript.*', '*.jav..., ['jsx', 'jsx.*', '*.jsx', '*.jsx.*']])

line 1: ^Ilet values = []
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 2: ^Ifor value in a:list
line 3: ^I^Iif type(value) == type([]) | call extend(values, value)
line 3:  call extend(values, value)
line 4: ^I^Ielse | add(values, value)
line 4:  add(values, value)
line 5: ^I^Iendif
line 6: ^Iendfor
line 7: ^Ireturn values
<SNR>118_flatten returning ['javascript', 'javascript.*', '*.java...*', 'jsx', 'jsx.*', '*.jsx', '*.jsx.*']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim

line 45: ^Ilet s:filetype_patterns_joined = join(s:filetype_patterns, ",")
line 46: ^Iexecute "au FileType " s:filetype_patterns_joined " call node#javascript()"
line 46: au FileType  javascript,javascript.*,*.javascript,*.javascript.*,json,json.*,*.json,*.json.*,jsx,jsx.*,*.jsx,*.jsx.*  call node#javascript()
line 47: augroup end
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/plugin/node.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/node.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/node.vim"
line 1: function! s:isNode()
line 7: 
line 8: au BufRead,BufNewFile * if !did_filetype() && s:isNode() | setf javascript | en
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftdetect/node.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim"
line 1: lua << EOF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSelect lua require'nvim-treesitter.textobjects.select'.commands.TSTextobjectSelect['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousEnd['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousStart['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextEnd['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextStart['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltint lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltint['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinF lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinF['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinf lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinf['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMovePrevious lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMovePrevious['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveNext lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveNext['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveOpposite lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveOpposite['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMove lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMove['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinT lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinT['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapPrevious lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapPrevious['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapNext lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapNext['run<bang>'](<f-args>)
line 3: command! -bar -nargs=+ -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectPeekDefinitionCode lua require'nvim-treesitter.textobjects.lsp_interop'.commands.TSTextobjectPeekDefinitionCode['run<bang>'](<f-args>)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim"
line 1: " illuminate.vim - Vim plugin for selectively illuminating other uses of current word
line 2: " Maintainer:^IAdam P. Regasz-Rethy (RRethy) <rethy.spud@gmail.com>
line 3: " Version: 2.0
line 4: 
line 5: if exists('g:loaded_illuminate')
line 6:   finish
line 7: endif
line 8: 
line 9: let g:loaded_illuminate = 1
line 10: 
line 11: if has('nvim-0.7.2') && get(g:, 'Illuminate_useDeprecated', 0) != 1
line 12: lua << EOF
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 46: 
line 47: lua require('illuminate').set_highlight_defaults()
Executing:     hi def IlluminatedWordText guifg=none guibg=none gui=underline
Executing:     hi def IlluminatedWordRead guifg=none guibg=none gui=underline
Executing:     hi def IlluminatedWordWrite guifg=none guibg=none gui=underline
Executing:     
line 48: augroup vim_illuminate_autocmds
line 49:     autocmd!
line 50:     autocmd ColorScheme * lua require('illuminate').set_highlight_defaults()
line 51: augroup END
line 52: 
line 53: finish
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/peekaboo.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/peekaboo.vim"
line 1: " The MIT License (MIT)
line 2: "
line 3: " Copyright (c) 2017 Junegunn Choi
line 4: "
line 5: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 6: " of this software and associated documentation files (the "Software"), to deal
line 7: " in the Software without restriction, including without limitation the rights
line 8: " to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
line 9: " copies of the Software, and to permit persons to whom the Software is
line 10: " furnished to do so, subject to the following conditions:
line 11: "
line 12: " The above copyright notice and this permission notice shall be included in
line 13: " all copies or substantial portions of the Software.
line 14: "
line 15: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 16: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 17: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 18: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 19: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
line 20: " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
line 21: " THE SOFTWARE.
line 22: 
line 23: nnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
line 24: xnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
line 25: inoremap <silent> <Plug>(peekaboo) <c-\><c-o>:<c-u>call peekaboo#aboo()<cr>
line 26: 
line 27: function! peekaboo#on()
line 41: 
line 42: function! peekaboo#off()
line 55: 
line 56: augroup peekaboo_init
line 57:   autocmd!
line 58:   autocmd BufEnter * if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif
line 59: augroup END
line 60: 
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/plugin/peekaboo.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/cmp_fuzzy_buffer.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/cmp_fuzzy_buffer.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/plugin/cmp_fuzzy_buffer.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/zoomwin.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/zoomwin.vim"
line 1: scriptencoding utf-8
line 2: 
line 3: " Zoom / Restore window.
line 4: function! s:ZoomToggle() abort
line 15: 
line 16: command! ZoomToggle call s:ZoomToggle()
line 17: 
line 18: noremap <silent> <Leader>z :ZoomToggle<CR>
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/plugin/zoomwin.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki plugin file
line 3: " Home: https://github.com/vimwiki/vimwiki/
line 4: " GetLatestVimScripts: 2226 1 :AutoInstall: vimwiki
line 5: 
line 6: 
line 7: " Clause: load only once
line 8: if exists('g:loaded_vimwiki') || &compatible
line 9:   finish
line 10: endif
line 11: let g:loaded_vimwiki = 1
line 12: 
line 13: " Set to version number for release:
line 14: let g:vimwiki_version = '2024.01.24'
line 15: 
line 16: " Get the directory the script is installed in
line 17: let s:plugin_dir = expand('<sfile>:p:h:h')
line 18: 
line 19: " Save peace in the galaxy
line 20: let s:old_cpo = &cpoptions
line 21: set cpoptions&vim
line 22: 
line 23: " Save autowriteall variable state
line 24: if exists('g:vimwiki_autowriteall')
line 25:   let s:vimwiki_autowriteall_saved = g:vimwiki_autowriteall
line 26: else
line 27:   let s:vimwiki_autowriteall_saved = 1
line 28: endif
line 29: 
line 30: 
line 31: " Autocommand called when the cursor leaves the buffer
line 32: function! s:setup_buffer_leave() abort
line 45: 
line 46: 
line 47: " Create a new temporary wiki for the current buffer
line 48: function! s:create_temporary_wiki() abort
line 70: 
line 71: 
line 72: " Autocommand called when Vim opens a new buffer with a known wiki
line 73: " extension. Both when the buffer has never been opened in this session and
line 74: " when it has.
line 75: function! s:setup_new_wiki_buffer() abort
line 96: 
line 97: 
line 98: " Autocommand called when the cursor enters the buffer
line 99: function! s:setup_buffer_enter() abort
line 108: 
line 109: 
line 110: " Autocommand called when the buffer enters a window or when running a  diff
line 111: function! s:setup_buffer_win_enter() abort
line 124: 
line 125: 
line 126: " Help syntax reloading
line 127: function! s:setup_cleared_syntax() abort
line 143: 
line 144: 
line 145: " Return: list of extension known vy vimwiki
line 146: function! s:vimwiki_get_known_extensions() abort
line 159: 
line 160: 
line 161: " Set settings which are global for Vim, but should only be executed for
line 162: " Vimwiki buffers. So they must be set when the cursor enters a Vimwiki buffer
line 163: " and reset when the cursor leaves the buffer.
line 164: function! s:set_global_options() abort
line 172: 
line 173: 
line 174: " Set settings which are local to a window. In a new tab they would be reset to
line 175: " Vim defaults. So we enforce our settings here when the cursor enters a
line 176: " Vimwiki buffer.
line 177: function! s:set_windowlocal_options() abort
line 207: 
line 208: 
line 209: " Echo vimwiki version
line 210: " Called by :VimwikiShowVersion
line 211: function! s:get_version() abort
line 226: 
line 227: 
line 228: """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
line 229: " Initialization of Vimwiki starts here.
line 230: " Make sure everything below does not cause autoload/vimwiki/base.vim
line 231: " to be loaded
line 232: call vimwiki#vars#init()
Searching for "autoload/vimwiki/vars.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/vars.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/vars.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/vars.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/vars.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 232: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/vars.vim"
line 1: " Title: Vimwiki variable definition and manipulation functions
line 2: "
line 3: " Home: https://github.com/vimwiki/vimwiki/
line 4: 
line 5: " ------------------------------------------------------------------------------------------------
line 6: " This file provides functions to manage the various state variables which are needed during a
line 7: " Vimwiki session.
line 8: " They consist of:
line 9: "
line 10: " - global variables. These are stored in the dict g:vimwiki_global_vars. They consist mainly of
line 11: "   global user variables and syntax stuff which is the same for every syntax.
line 12: "
line 13: " - wiki-local variables. They are stored in g:vimwiki_wikilocal_vars which is a list of
line 14: "   dictionaries, one dict for every registered wiki. The last dictionary contains default values
line 15: "   (used for temporary wikis).
line 16: "
line 17: " - syntax variables. Stored in the dict g:vimwiki_syntaxlocal_vars which holds all the regexes and
line 18: "   other stuff which is needed for highlighting.
line 19: "
line 20: " - buffer-local variables. They are stored as buffer variables directly (b:foo)
line 21: 
line 22: " As a developer, you should, if possible, only use the get_ and set_ functions for these types of
line 23: " variables, not the underlying dicts!
line 24: " ------------------------------------------------------------------------------------------------
line 25: 
line 26: " Script variable
line 27: let s:margin_set_by_user = 0
line 28: 
line 29: 
line 30: function! vimwiki#vars#init() abort
line 40: 
line 41: 
line 42: function! s:check_users_value(key, users_value, value_infos, comes_from_global_variable) abort
line 104: 
line 105: 
line 106: function! s:update_key(output_dic, key, old, new) abort
line 124: 
line 125: " ----------------------------------------------------------
line 126: " 1. Global {{{1
line 127: " ----------------------------------------------------------
line 128: 
line 129: function! s:get_default_global() abort
line 197: 
line 198: 
line 199: function! s:populate_global_variables() abort
line 206: 
line 207: 
line 208: function! s:internal_global_settings() abort
line 316: 
line 317: 
line 318: function! s:extend_global(output_dic, default_dic) abort
line 339: 
line 340: 
line 341: function! s:read_global_settings_from_user() abort
line 371: 
line 372: 
line 373: function! s:normalize_global_settings() abort
line 454: 
line 455: 
line 456: " ----------------------------------------------------------
line 457: " 3. Wiki local {{{1
line 458: " ----------------------------------------------------------
line 459: 
line 460: function! s:get_default_wikilocal() abort
line 549: 
line 550: function! s:extend_local(output_dic, default_dic, global_dic, user_dic) abort
line 565: 
line 566: 
line 567: function! s:populate_wikilocal_options() abort
line 598: 
line 599: 
line 600: function! s:normalize_wikilocal_settings() abort
line 655: 
line 656: 
line 657: function! s:normalize_path(path) abort
line 668: 
line 669: 
line 670: " ----------------------------------------------------------
line 671: " 2. Syntax specific {{{1
line 672: " ----------------------------------------------------------
line 673: 
line 674: function! s:get_default_syntaxlocal() abort
line 720: 
line 721: function! s:get_markdown_syntaxlocal() abort
line 783: 
line 784: function! s:get_media_syntaxlocal() abort
line 826: 
line 827: function! s:get_common_syntaxlocal() abort
line 856: 
line 857: 
line 858: function! vimwiki#vars#populate_syntax_vars(syntax) abort
line 1078: 
line 1079: 
line 1080: function! s:populate_list_vars(wiki) abort
line 1139: 
line 1140: 
line 1141: function! s:populate_blockquote_vars(wiki) abort
line 1155: 
line 1156: 
line 1157: function! s:populate_extra_markdown_vars() abort
line 1327: 
line 1328: 
line 1329: function! s:normalize_syntax_settings(syntax) abort
line 1346: 
line 1347: 
line 1348: " ----------------------------------------------------------
line 1349: " 4. Command (exported) {{{1
line 1350: " ----------------------------------------------------------
line 1351: 
line 1352: function! s:get_anywhere(key, ...) abort
line 1451: 
line 1452: 
line 1453: function! vimwiki#vars#cmd(arg) abort
line 1547: 
line 1548: 
line 1549: function! vimwiki#vars#complete(arglead, cmdline, pos) abort
line 1583: 
line 1584: 
line 1585: " ----------------------------------------------------------
line 1586: " 4. Getter, Setter (exported) {{{1
line 1587: " ----------------------------------------------------------
line 1588: 
line 1589: function! vimwiki#vars#get_syntaxlocal(key, ...) abort
line 1608: 
line 1609: 
line 1610: function! vimwiki#vars#set_syntaxlocal(key, value, ...) abort
line 1630: 
line 1631: 
line 1632: function! vimwiki#vars#get_bufferlocal(key, ...) abort
line 1665: 
line 1666: 
line 1667: function! vimwiki#vars#set_bufferlocal(key, value, ...) abort
line 1672: 
line 1673: 
line 1674: function! vimwiki#vars#get_global(key) abort
line 1678: 
line 1679: 
line 1680: function! vimwiki#vars#set_global(key, value) abort
line 1685: 
line 1686: 
line 1687: function! vimwiki#vars#get_wikilocal(key, ...) abort
line 1698: 
line 1699: 
line 1700: function! vimwiki#vars#get_wikilocal_default(key) abort
line 1704: 
line 1705: 
line 1706: function! vimwiki#vars#set_wikilocal(key, value, ...) abort
line 1720: 
line 1721: 
line 1722: function! vimwiki#vars#add_temporary_wiki(settings) abort
line 1733: 
line 1734: 
line 1735: function! vimwiki#vars#number_of_wikis() abort
line 1739: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/vars.vim
continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim
calling vimwiki#vars#init()

line 1:   " Init global and local variables
line 2:   " Init && Populate: global variable container
line 3:   let g:vimwiki_global_vars = {}
line 4:   call s:populate_global_variables()
calling <SNR>127_populate_global_variables()

line 1:   " Populate: global variable <- user & default
line 2:   " Called: s:vimwiki#vars#init
line 3:   call s:read_global_settings_from_user()
calling <SNR>127_read_global_settings_from_user()

line 1:   " Read user global settings
line 2:   " Called: s:populate_global_variables
line 3:   let default_dic = s:get_default_global()
calling <SNR>127_get_default_global()

line 1:   " Get default wikilocal values
line 2:   " Please: keep alphabetical sort
line 3:   return { 'CJK_length': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_chdir': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_header': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'autowriteall': {'type': type(0), 'default': 1, 'min': 0, 'max': 1}, 'conceallevel': {'type': type(0), 'default': 2, 'min': 0, 'max': 3}, 'conceal_onechar_markers': {'type': type(0), 'default': 1, 'min': 0, 'max': 1}, 'conceal_pre': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'create_link': {'type': type(0), 'default': 1, 'min':0, 'max': 1}, 'diary_months': {'type': type({}), 'default':   {     1: 'January', 2: 'February', 3: 'March',     4: 'April', 5: 'May', 6: 'June',     7: 'July', 8: 'August', 9: 'September',     10: 'October', 11: 'November', 12: 'December'   }}, 'dir_link': {'type': type(''), 'default': ''}, 'emoji_enable': {'type': type(0), 'default': 3, 'min':0, 'max': 3}, 'ext2syntax': {'type': type({}), 'default': {'.md': 'markdown', '.mkdn': 'markdown',     '.mdwn': 'mark
<SNR>127_get_default_global returning {'links_header_level': {'min': 1, 'max...tom:quick'], 'type': 1, 'default': ''}}

continuing in <SNR>127_read_global_settings_from_user

line 4: 
line 5:   " Update batch
line 6:   call s:extend_global(g:vimwiki_global_vars, default_dic)
calling <SNR>127_extend_global({}, {'links_header_level': {'min': 1, 'max...tom:quick'], 'type': 1, 'default': ''}})

line 1:   " Extend global dictionary <- default <- user
line 2:   " Note: user_dic is unused here because it comes from g:vimwiki_* vars
line 3:   " Copy the user's settings from variables of the form g:vimwiki_<option> into the dict
line 4:   " g:vimwiki_global_vars (or set a default value)
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
calling <SNR>127_check_users_value('listsyms', ' ✓', {'min_length': 2, 'type': 1, 'default': ' .oOX'}, 1)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>127_check_users_value returning #0

continuing in <SNR>127_extend_global

line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
calling <SNR>127_update_key({'links_header_level': 1, 'tags_header...refix': '<Leader>w', 'menu': 'Vimwiki'}, 'listsyms', ' .oOX', ' ✓')

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>127_update_key returning #0

continuing in <SNR>127_extend_global

line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
calling <SNR>127_check_users_value('url_maxsave', 0, {'min': 0, 'type': 0, 'default': 15}, 1)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>127_check_users_value returning #0

continuing in <SNR>127_extend_global

line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
calling <SNR>127_update_key({'links_header_level': 1, 'tags_header...', 'auto_header': 0, 'menu': 'Vimwiki'}, 'url_maxsave', 15, 0)

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>127_update_key returning #0

continuing in <SNR>127_extend_global

line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 19:   return a:output_dic
<SNR>127_extend_global returning {'links_header_level': 1, 'tags_header...er'}, 'menu': 'Vimwiki', 'folding': ''}

continuing in <SNR>127_read_global_settings_from_user

line 7: 
line 8:   " Validate some settings individually
line 9:   let key = 'diary_months'
line 10:   let users_value = g:vimwiki_global_vars[key]
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 11:   for month in range(1, 12)
line 12:     if !has_key(users_value, month) || type(users_value[month]) != type('') || empty(users_value[month])
line 14:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 16:       break
line 17:     endif
line 18:   endfor
line 19: 
line 20:   let key = 'ext2syntax'
line 21:   let users_value = g:vimwiki_global_vars[key]
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
line 22:   for ext in keys(users_value)
line 23:     if empty(ext) || index(['markdown', 'media', 'mediawiki', 'default'], users_value[ext]) == -1
line 24:       call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(users_value), key, key))
line 26:       break
line 27:     endif
line 28:   endfor
<SNR>127_read_global_settings_from_user returning #0

continuing in <SNR>127_populate_global_variables

line 4:   call s:normalize_global_settings()
calling <SNR>127_normalize_global_settings()

line 1:   " Normalize user global settings
line 2:   " Called: s:populate_global_variables
line 3:   let keys = keys(g:vimwiki_global_vars.ext2syntax)
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 4:   for ext in keys
line 5:     " for convenience, we also allow the term 'mediawiki'
line 6:     if g:vimwiki_global_vars.ext2syntax[ext] ==# 'mediawiki'
line 7:       let g:vimwiki_global_vars.ext2syntax[ext] = 'media'
line 8:     endif
line 9: 
line 10:     " ensure the file extensions in ext2syntax start with a dot
line 11:     " make sure this occurs after anything else that tries to access
line 12:     " the entry using the index 'ext' since this removes that index
line 13:     if ext[0] !=# '.'
line 14:       let new_ext = '.' . ext
line 15:       let g:vimwiki_global_vars.ext2syntax[new_ext] = g:vimwiki_global_vars.ext2syntax[ext]
line 16:       call remove(g:vimwiki_global_vars.ext2syntax, ext)
line 17:     endif
line 18:   endfor
line 19: 
line 20:   " ensure key_mappings dictionary has all required keys
line 21:   if !has_key(g:vimwiki_global_vars.key_mappings, 'all_maps')
line 22:     let g:vimwiki_global_vars.key_mappings.all_maps = 1
line 23:   endif
line 24:   if !has_key(g:vimwiki_global_vars.key_mappings, 'global')
line 25:     let g:vimwiki_global_vars.key_mappings.global = 1
line 26:   endif
line 27:   if !has_key(g:vimwiki_global_vars.key_mappings, 'headers')
line 28:     let g:vimwiki_global_vars.key_mappings.headers = 1
line 29:   endif
line 30:   if !has_key(g:vimwiki_global_vars.key_mappings, 'text_objs')
line 31:     let g:vimwiki_global_vars.key_mappings.text_objs = 1
line 32:   endif
line 33:   if !has_key(g:vimwiki_global_vars.key_mappings, 'table_format')
line 34:     let g:vimwiki_global_vars.key_mappings.table_format = 1
line 35:   endif
line 36:   if !has_key(g:vimwiki_global_vars.key_mappings, 'table_mappings')
line 37:     let g:vimwiki_global_vars.key_mappings.table_mappings = 1
line 38:   endif
line 39:   if !has_key(g:vimwiki_global_vars.key_mappings, 'lists')
line 40:     let g:vimwiki_global_vars.key_mappings.lists = 1
line 41:   endif
line 42:   if !has_key(g:vimwiki_global_vars.key_mappings, 'lists_return')
line 43:     let g:vimwiki_global_vars.key_mappings.lists_return = 1
line 44:   endif
line 45:   if !has_key(g:vimwiki_global_vars.key_mappings, 'links')
line 46:     let g:vimwiki_global_vars.key_mappings.links = 1
line 47:   endif
line 48:   if !has_key(g:vimwiki_global_vars.key_mappings, 'html')
line 49:     let g:vimwiki_global_vars.key_mappings.html = 1
line 50:   endif
line 51:   if !has_key(g:vimwiki_global_vars.key_mappings, 'mouse')
line 52:     let g:vimwiki_global_vars.key_mappings.mouse = 0
line 53:   endif
line 54: 
line 55:   " disable all key mappings if all_maps == 0
line 56:   if !g:vimwiki_global_vars.key_mappings.all_maps
line 57:     let g:vimwiki_global_vars.key_mappings.global = 0
line 58:     let g:vimwiki_global_vars.key_mappings.headers = 0
line 59:     let g:vimwiki_global_vars.key_mappings.text_objs = 0
line 60:     let g:vimwiki_global_vars.key_mappings.table_format = 0
line 61:     let g:vimwiki_global_vars.key_mappings.table_mappings = 0
line 62:     let g:vimwiki_global_vars.table_mappings = 0 " kept for backwards compatibility
line 63:     let g:vimwiki_global_vars.key_mappings.lists = 0
line 64:     let g:vimwiki_global_vars.key_mappings.lists_return = 0
line 65:     let g:vimwiki_global_vars.key_mappings.links = 0
line 66:     let g:vimwiki_global_vars.key_mappings.html = 0
line 67:     let g:vimwiki_global_vars.key_mappings.mouse = 0
line 68:     let g:vimwiki_global_vars.use_mouse = 0 " kept for backwards compatibility
line 69:   endif
line 70: 
line 71:   " TODO remove these checks and the table_mappings and use_mouse variables
line 72:   " backwards compatibility checks
line 73:   " if the old option isn't its default value then overwrite the new option
line 74:   if g:vimwiki_global_vars.table_mappings == 0 && g:vimwiki_global_vars.key_mappings.table_mappings == 0
line 75:     let g:vimwiki_global_vars.key_mappings.table_mappings = 0
line 76:   endif
line 77:   if g:vimwiki_global_vars.use_mouse == 1 && g:vimwiki_global_vars.key_mappings.mouse == 0
line 78:     let g:vimwiki_global_vars.key_mappings.mouse = 1
line 79:   endif
<SNR>127_normalize_global_settings returning #0

continuing in <SNR>127_populate_global_variables

line 5:   call s:internal_global_settings()
calling <SNR>127_internal_global_settings()

line 1:   " Declare: normalized settings -> more usefull variables to use internally
line 2:   " non-configurable global variables:
line 3: 
line 4:   " Scheme regexes must be defined even if syntax file is not loaded yet cause users should be
line 5:   " able to <leader>w<leader>w without opening any vimwiki file first
line 6: 
line 7:   " Know internal schemes
line 8: 
line 9:   let g:vimwiki_global_vars.schemes_web = join(vimwiki#vars#get_global('schemes_web'), '\|')
calling vimwiki#vars#get_global('schemes_web')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ['http', 'https', 'file', 'ftp', 'goph...ish', 'sftp', 'thunderlink', 'message']

continuing in <SNR>127_internal_global_settings

line 11:   let g:vimwiki_global_vars.schemes_any = join(vimwiki#vars#get_global('schemes_any'), '\|')
calling vimwiki#vars#get_global('schemes_any')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ['mailto', 'matrix', 'news', 'xmpp', 'sip', 'sips', 'doi', 'urn', 'tel', 'data']

continuing in <SNR>127_internal_global_settings

line 13:   let g:vimwiki_global_vars.schemes_local = join(['wiki\d\+', 'diary', 'local'], '\|')
line 15: 
line 16:   " Concatenate known schemes => regex
line 17:   let g:vimwiki_global_vars.rxSchemes = '\%('. g:vimwiki_global_vars.schemes_local . '\|'. g:vimwiki_global_vars.schemes_web . '\|'. g:vimwiki_global_vars.schemes_any . '\)'
line 22: 
line 23:   " Match URL for common protocols; see http://en.wikipedia.org/wiki/URI_scheme
line 24:   " http://tools.ietf.org/html/rfc3986
line 25:   let rxWebProtocols = '\%('. '\%('. '\%('. g:vimwiki_global_vars.schemes_web . '\):'. '\%(//\)'. '\)'. '\|'. '\%('. g:vimwiki_global_vars.schemes_any .'\):'. '\)'
line 34:   let g:vimwiki_global_vars.rxWeblinkUrl = rxWebProtocols . '\S\{-1,}'. '\%(([^ \t()]*)\)\='
line 35: 
line 36:   let wikilink_prefix = '[['
line 37:   let wikilink_suffix = ']]'
line 38:   let wikilink_separator = '|'
line 39:   let g:vimwiki_global_vars.rx_wikilink_prefix = vimwiki#u#escape(wikilink_prefix)
Searching for "autoload/vimwiki/u.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/u.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/u.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/u.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/u.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 39: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/u.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Description: Utility functions
line 4: " Home: https://github.com/vimwiki/vimwiki/
line 5: 
line 6: function! vimwiki#u#echo(msg, ...) abort
line 29: 
line 30: function! vimwiki#u#debug(msg) abort
line 38: 
line 39: function! vimwiki#u#warn(msg) abort
line 43: 
line 44: function! vimwiki#u#error(msg) abort
line 48: 
line 49: function! vimwiki#u#deprecate(old, new) abort
line 54: 
line 55: function! vimwiki#u#get_selection(...) abort
line 102: 
line 103: 
line 104: function! vimwiki#u#count_exe(cmd) abort
line 111: 
line 112: 
line 113: function! vimwiki#u#sort_len(list) abort
line 121: 
line 122: 
line 123: function! vimwiki#u#trim(string, ...) abort
line 135: 
line 136: 
line 137: function! vimwiki#u#cursor(lnum, cnum) abort
line 142: 
line 143: 
line 144: function! vimwiki#u#os_name() abort
line 154: 
line 155: 
line 156: function! vimwiki#u#is_windows() abort
line 160: 
line 161: 
line 162: function! vimwiki#u#is_macos() abort
line 171: 
line 172: 
line 173: function! vimwiki#u#count_first_sym(line) abort
line 177: 
line 178: 
line 179: function! vimwiki#u#escape(string) abort
line 183: 
line 184: 
line 185: function! vimwiki#u#reload_regexes() abort
line 189: 
line 190: 
line 191: function! vimwiki#u#reload_regexes_custom() abort
line 195: 
line 196: 
line 197: function! vimwiki#u#sw() abort
line 205: 
line 206: function! vimwiki#u#map_key(mode, key, plug, ...) abort
line 229: 
line 230: 
line 231: function! vimwiki#u#is_codeblock(lnum) abort
line 244: 
line 245: function! vimwiki#u#ft_set() abort
line 256: 
line 257: function! vimwiki#u#ft_is_vw() abort
line 270: 
line 271: 
line 272: function! vimwiki#u#get_syntax_dic(...) abort
line 278: 
line 279: 
line 280: function! vimwiki#u#get_punctuation_regex() abort
line 293: 
line 294: 
line 295: function! vimwiki#u#get_punctuation_string() abort
line 302: 
line 303: 
line 304: function! vimwiki#u#hi_expand_regex(lst) abort
line 368: 
line 369: 
line 370: function! vimwiki#u#hi_tag(tag_pre, tag_post, syntax_group, contains, ...) abort
line 399: 
line 400: 
line 401: function! vimwiki#u#hi_typeface(dic) abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/u.vim
continuing in <SNR>127_internal_global_settings
calling vimwiki#u#escape('[[')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\[\['

continuing in <SNR>127_internal_global_settings

line 40:   let g:vimwiki_global_vars.rx_wikilink_suffix = vimwiki#u#escape(wikilink_suffix)
calling vimwiki#u#escape(']]')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\]\]'

continuing in <SNR>127_internal_global_settings

line 41:   let g:vimwiki_global_vars.rx_wikilink_separator = vimwiki#u#escape(wikilink_separator)
calling vimwiki#u#escape('|')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '|'

continuing in <SNR>127_internal_global_settings

line 42: 
line 43:   " templates for the creation of wiki links
line 44:   " [[URL]]
line 45:   let g:vimwiki_global_vars.WikiLinkTemplate1 = wikilink_prefix . '__LinkUrl__'. wikilink_suffix
line 46:   " [[URL|DESCRIPTION]]
line 47:   let g:vimwiki_global_vars.WikiLinkTemplate2 = wikilink_prefix . '__LinkUrl__'. wikilink_separator . '__LinkDescription__' . wikilink_suffix
line 49: 
line 50:   let valid_chars = '[^\\\]]'
line 51:   let g:vimwiki_global_vars.rxWikiLinkUrl = valid_chars.'\{-}'
line 52:   let g:vimwiki_global_vars.rxWikiLinkDescr = valid_chars.'\{-}'
line 53: 
line 54:   " this regexp defines what can form a link when the user presses <CR> in the
line 55:   " buffer (and not on a link) to create a link
line 56:   " basically, it's Ascii alphanumeric characters plus #|./@-_~ plus all
line 57:   " non-Ascii characters, except that . is not accepted as the last character
line 58:   " TODO look behind for . reduces the second part of the regex that is the same with '.' added
line 59:   let g:vimwiki_global_vars.rxWord = '[^[:blank:]!"$%&''()*+,:;<=>?\[\]\\^`{}]*[^[:blank:]!"$%&''()*+.,:;<=>?\[\]\\^`{}]'
line 60: 
line 61:   let g:vimwiki_global_vars.rx_wikilink_prefix1 = g:vimwiki_global_vars.rx_wikilink_prefix . g:vimwiki_global_vars.rxWikiLinkUrl . g:vimwiki_global_vars.rx_wikilink_separator
line 63:   let g:vimwiki_global_vars.rx_wikilink_suffix1 = g:vimwiki_global_vars.rx_wikilink_suffix
line 64: 
line 65:   let g:vimwiki_global_vars.rxWikiInclPrefix = '{{'
line 66:   let g:vimwiki_global_vars.rxWikiInclSuffix = '}}'
line 67:   let g:vimwiki_global_vars.rxWikiInclSeparator = '|'
line 68:   " '{{__LinkUrl__}}'
line 69:   let g:vimwiki_global_vars.WikiInclTemplate1 = g:vimwiki_global_vars.rxWikiInclPrefix .'__LinkUrl__'. g:vimwiki_global_vars.rxWikiInclSuffix
line 71:   " '{{__LinkUrl____LinkDescription__}}'
line 72:   let g:vimwiki_global_vars.WikiInclTemplate2 = g:vimwiki_global_vars.rxWikiInclPrefix . '__LinkUrl__' . g:vimwiki_global_vars.rxWikiInclSeparator . '__LinkDescription__' . g:vimwiki_global_vars.rxWikiInclSuffix
line 75: 
line 76:   let valid_chars = '[^\\\}]'
line 77:   let g:vimwiki_global_vars.rxWikiInclUrl = valid_chars.'\{-}'
line 78:   let g:vimwiki_global_vars.rxWikiInclArg = valid_chars.'\{-}'
line 79:   let g:vimwiki_global_vars.rxWikiInclArgs = '\%('. g:vimwiki_global_vars.rxWikiInclSeparator. g:vimwiki_global_vars.rxWikiInclArg. '\)'.'\{-}'
line 81: 
line 82:   " *. {{URL}[{...}]}  - i.e.  {{URL}}, {{URL|ARG1}}, {{URL|ARG1|ARG2}}, etc.
line 83:   " *a) match {{URL}[{...}]}
line 84:   let g:vimwiki_global_vars.rxWikiIncl = g:vimwiki_global_vars.rxWikiInclPrefix. g:vimwiki_global_vars.rxWikiInclUrl. g:vimwiki_global_vars.rxWikiInclArgs. g:vimwiki_global_vars.rxWikiInclSuffix
line 87:   " *b) match URL within {{URL}[{...}]}
line 88:   let g:vimwiki_global_vars.rxWikiInclMatchUrl = g:vimwiki_global_vars.rxWikiInclPrefix. '\zs'. g:vimwiki_global_vars.rxWikiInclUrl . '\ze'. g:vimwiki_global_vars.rxWikiInclArgs . g:vimwiki_global_vars.rxWikiInclSuffix
line 91: 
line 92:   let g:vimwiki_global_vars.rxWikiInclPrefix1 = g:vimwiki_global_vars.rxWikiInclPrefix. g:vimwiki_global_vars.rxWikiInclUrl . g:vimwiki_global_vars.rxWikiInclSeparator
line 94:   let g:vimwiki_global_vars.rxWikiInclSuffix1 = g:vimwiki_global_vars.rxWikiInclArgs. g:vimwiki_global_vars.rxWikiInclSuffix
line 96: 
line 97:   " default colors when headers of different levels are highlighted differently
line 98:   " not making it yet another option; needed by ColorScheme autocommand
line 99:   let g:vimwiki_global_vars.hcolor_guifg_light = ['#aa5858', '#507030', '#1030a0', '#103040' , '#505050', '#636363']
line 101:   let g:vimwiki_global_vars.hcolor_ctermfg_light = ['DarkRed', 'DarkGreen', 'DarkBlue', 'Black' , 'Black', 'Black']
line 103:   let g:vimwiki_global_vars.hcolor_guifg_dark = ['#e08090', '#80e090', '#6090e0', '#c0c0f0' , '#e0e0f0', '#f0f0f0']
line 105:   let g:vimwiki_global_vars.hcolor_ctermfg_dark = ['Red', 'Green', 'Blue', 'White', 'White' , 'White']
<SNR>127_internal_global_settings returning #0

continuing in <SNR>127_populate_global_variables

<SNR>127_populate_global_variables returning #0

continuing in vimwiki#vars#init

line 5: 
line 6:   " Init && Populate: local variable container
line 7:   let g:vimwiki_wikilocal_vars = []
line 8:   call s:populate_wikilocal_options()
calling <SNR>127_populate_wikilocal_options()

line 1:   " Populate local variable <- user & default
line 2:   " Called: s:vimwiki#vars#init
line 3:   " Retrieve default
line 4:   let default_dic = s:get_default_wikilocal()
calling <SNR>127_get_default_wikilocal()

line 1:   " Get default wikilocal values
line 2:   " Please: keep alphabetical sort
line 3:   " Build color_tag_template regular expression
line 4:   " Must be coherent with VimwikiColorize
line 5:   let fg = 'color\s*:\s*__COLORFG__\s*;\s*'
line 6:   let bg = 'background\s*:\s*__COLORBG__\s*;\s*'
line 7:   let color_tag_rx = '<span \s*style\s*=\s*"\s*\(' . fg . bg . '\|' . fg . '\|' . bg . '\)"\s*>__CONTENT__<\/span>'
line 10:   return { 'auto_diary_index': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_export': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_generate_links': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_generate_tags': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_tags': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'auto_toc': {'type': type(0), 'default': 0, 'min': 0, 'max': 1}, 'automatic_nested_syntaxes': {'type': type(0), 'default': 1, 'min': 0, 'max': 1}, 'base_url': {'type': type(''), 'default': '', 'min_length': 1}, 'bullet_types': {'type': type([]), 'default': []}, 'color_dic': {'type': type({}), 'default': {   'default': ['', '#d79921'],   'red': ['#cc241d', ''],   'bred': ['', '#cc241d'],   'green': ['#98971a', ''],   'bgreen': ['', '#98971a'],   'yellow': ['#d79921', ''],   'byellow': ['', '#d79921'],   'blue': ['#458588', ''],   'bblue': ['', '#458588'],   'purple': ['#b16286', ''],   'bpurple': ['', '#b16286'],   'orange': ['#d65d0e', ''
calling vimwiki#vars#get_global('listsym_rejected')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '-'

continuing in <SNR>127_get_default_wikilocal

calling vimwiki#vars#get_global('listsyms')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ' ✓'

continuing in <SNR>127_get_default_wikilocal

<SNR>127_get_default_wikilocal returning {'auto_tags': {'min': 0, 'max': 1, 'ty... '[^:''[:space:]]\+', 'pre': '^\|\s'}}}

continuing in <SNR>127_populate_wikilocal_options

line 5: 
line 6:   " Extend from global setting
line 7:   let global_wiki_dic = s:extend_global({}, default_dic)
calling <SNR>127_extend_global({}, {'auto_tags': {'min': 0, 'max': 1, 'ty... '[^:''[:space:]]\+', 'pre': '^\|\s'}}})

line 1:   " Extend global dictionary <- default <- user
line 2:   " Note: user_dic is unused here because it comes from g:vimwiki_* vars
line 3:   " Copy the user's settings from variables of the form g:vimwiki_<option> into the dict
line 4:   " g:vimwiki_global_vars (or set a default value)
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
calling <SNR>127_check_users_value('listsyms', ' ✓', {'type': 1, 'default': ' ✓'}, 1)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>127_check_users_value returning #0

continuing in <SNR>127_extend_global

line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
calling <SNR>127_update_key({'maxhi': 0, 'css_name': 'style.css', ...ms': 10, 'list_margin': -1, 'name': ''}, 'listsyms', ' ✓', ' ✓')

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>127_update_key returning #0

continuing in <SNR>127_extend_global

line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 19:   return a:output_dic
<SNR>127_extend_global returning {'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'}

continuing in <SNR>127_populate_wikilocal_options

line 8: 
line 9:   " Extend from g:vimwiki_list
line 10:   if !exists('g:vimwiki_list')
line 11:     " if the user hasn't registered any wiki, we register one wiki using the default values
line 12:     let new_wiki_dic = deepcopy(global_wiki_dic)
line 13:     let new_wiki_dic.is_temporary_wiki = 0
line 14:     call add(g:vimwiki_wikilocal_vars, new_wiki_dic)
line 15:   else
line 16:     for user_dic in g:vimwiki_list
line 17:       let new_wiki_dic = s:extend_local({}, default_dic, global_wiki_dic, user_dic)
calling <SNR>127_extend_local({}, {'auto_tags': {'min': 0, 'max': 1, 'ty... '[^:''[:space:]]\+', 'pre': '^\|\s'}}}, {'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'}, {'path': '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki'})

line 1:   " Extend syntaxlocal dictionary <- global <- user (default for type check)
line 2:   " IDEA: can work lazily and not on all wikis at first call
line 3:   " IDEA: have a special variable for wikitmp
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
calling <SNR>127_check_users_value('path', '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki', {'min_length': 1, 'type': 1, 'default': '/Users/christopher.griffith/vimwiki/'}, 0)

line 1:   " Helper: Check user setting
line 2:   " warn user with message if not good type
line 3:   " Param: 1: key <string>: variable name
line 4:   " Param: 2: vimwiki_key <obj>: user value
line 5:   " Param: 3: value_infod <dict>: type and default value
line 6:   " Param: 4: coming from a global variable <bool>
line 7:   let type_code_to_name = { type(0): 'number', type(''): 'string', type([]): 'list', type({}): 'dictionary'}
line 12: 
line 13:   let setting_origin = a:comes_from_global_variable ? printf('''g:vimwiki_%s''', a:key) : printf('''%s'' in g:vimwiki_list', a:key)
line 16: 
line 17:   let help_text = a:comes_from_global_variable ? 'g:vimwiki_' : 'vimwiki-option-'
line 20: 
line 21:   if has_key(a:value_infos, 'type') && type(a:users_value) != a:value_infos.type
line 22:     call vimwiki#u#error(printf('The provided value of the option %s is a %s, ' . 'but expected is a %s. See '':h '.help_text.'%s''.', setting_origin, type_code_to_name[type(a:users_value)], type_code_to_name[a:value_infos.type], a:key))
line 25:   endif
line 26: 
line 27:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'min') && a:users_value < a:value_infos.min
line 29:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too small. The minimum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min, a:key))
line 32:   endif
line 33: 
line 34:   if a:value_infos.type == type(0) && has_key(a:value_infos, 'max') && a:users_value > a:value_infos.max
line 36:     call vimwiki#u#error(printf('The provided value ''%i'' of the option %s is' . ' too large. The maximum value is %i. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.max, a:key))
line 39:   endif
line 40: 
line 41:   if has_key(a:value_infos, 'possible_values') && index(a:value_infos.possible_values, a:users_value) == -1
line 43:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s is' . ' invalid. Allowed values are %s. See '':h '.help_text.'%s''.', a:users_value, setting_origin, string(a:value_infos.possible_values), a:key))
line 46:   endif
line 47: 
line 48:   if a:value_infos.type == type('') && has_key(a:value_infos, 'length') && strwidth(a:users_value) != a:value_infos.length
line 50:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' contain exactly %i character(s) but has %i. See '':h '.help_text.'_%s''.', a:users_value, setting_origin, a:value_infos.length, strwidth(a:users_value), a:key))
line 53:   endif
line 54: 
line 55:   if a:value_infos.type == type('') && has_key(a:value_infos, 'min_length') && strwidth(a:users_value) < a:value_infos.min_length
line 57:     call vimwiki#u#error(printf('The provided value ''%s'' of the option %s must' . ' have at least %d character(s) but has %d. See '':h '.help_text.'%s''.', a:users_value, setting_origin, a:value_infos.min_length, strwidth(a:users_value), a:key))
line 60:   endif
<SNR>127_check_users_value returning #0

continuing in <SNR>127_extend_local

line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
calling <SNR>127_update_key({'nested_syntaxes': {}, 'auto_tags': 0...ion_level': 0, 'auto_generate_tags': 0}, 'path', '/Users/christopher.griffith/vimwiki/', '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Helper: Treat special variables
line 2:   " Set list margin
line 3:   if a:key ==# 'list_margin'
line 4:     let s:margin_set_by_user = 1
line 5:     let a:output_dic[a:key] = a:new
line 6:     return
line 7:   " Extend Tag format
line 8:   elseif a:key ==# 'tag_format'
line 9:     let a:output_dic[a:key] = {}
line 10:     call extend(a:output_dic[a:key], a:old)
line 11:     call extend(a:output_dic[a:key], a:new)
line 12:     return
line 13:   else
line 14:     let a:output_dic[a:key] = a:new
line 15:     return
<SNR>127_update_key returning #0

continuing in <SNR>127_extend_local

line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 4:   for key in keys(a:default_dic)
line 5:     " Key present
line 6:     if has_key(a:user_dic, key)
line 7:       call s:check_users_value(key, a:user_dic[key], a:default_dic[key], 0)
line 8:       call s:update_key(a:output_dic, key, a:global_dic[key], a:user_dic[key])
line 9:     else
line 10:       let a:output_dic[key] = a:global_dic[key]
line 11:     endif
line 12:   endfor
line 13:   return a:output_dic
<SNR>127_extend_local returning {'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'}

continuing in <SNR>127_populate_wikilocal_options

line 18:       let new_wiki_dic.is_temporary_wiki = 0
line 19:       call add(g:vimwiki_wikilocal_vars, new_wiki_dic)
line 20:     endfor
line 16:     for user_dic in g:vimwiki_list
line 17:       let new_wiki_dic = s:extend_local({}, default_dic, global_wiki_dic, user_dic)
line 18:       let new_wiki_dic.is_temporary_wiki = 0
line 19:       call add(g:vimwiki_wikilocal_vars, new_wiki_dic)
line 20:     endfor
line 21:   endif
line 22: 
line 23:   " Set default values for temporary wikis
line 24:   let temp_dic = deepcopy(global_wiki_dic)
line 25:   let temp_dic.is_temporary_wiki = 1
line 26:   call add(g:vimwiki_wikilocal_vars, temp_dic)
line 27: 
line 28:   " Normalize and leave
line 29:   call s:normalize_wikilocal_settings()
calling <SNR>127_normalize_wikilocal_settings()

line 1:   " Normalize local settings
line 2:   for wiki_settings in g:vimwiki_wikilocal_vars
line 3:     " Check some values individually
line 4:     """"""""""""""""""""""""""""""""
line 5:     " Treat lists
line 6:     " TODO remove me: I am syntaxlocal
line 7:     if !has_key(wiki_settings, 'bullet_types') || len(wiki_settings.bullet_types) == 0
line 8:       let wiki_settings.bullet_types = vimwiki#vars#get_syntaxlocal('bullet_types', wiki_settings.syntax)
calling vimwiki#vars#get_syntaxlocal('bullet_types', 'default')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
calling vimwiki#vars#populate_syntax_vars('default')

line 1:   " Populate syntax variable
line 2:   " Exported: syntax/vimwiki.vim
line 3:   " TODO refactor <= too big function
line 4:   " TODO permit user conf in some var like g:vimwiki_syntaxlocal_vars
line 5:   " TODO internalize match and search (header and bold)
line 6:   " Create is not exists
line 7:   if !exists('g:vimwiki_syntaxlocal_vars')
line 8:     let g:vimwiki_syntaxlocal_vars = {}
line 9:   endif
line 10: 
line 11:   " Clause: leave if already filled
line 12:   if has_key(g:vimwiki_syntaxlocal_vars, a:syntax)
line 13:     return
line 14:   endif
line 15: 
line 16:   " Init internal dic
line 17:   let g:vimwiki_syntaxlocal_vars[a:syntax] = {}
line 18:   let syntax_dic = g:vimwiki_syntaxlocal_vars[a:syntax]
line 19: 
line 20:   " Get default dic
line 21:   let default_dic = extend({}, function('s:get_' . a:syntax . '_syntaxlocal')())
calling <SNR>127_get_default_syntaxlocal()

line 1:   " Get default syntaxlocal variable dictionary
line 2:   " type, default, min, max, possible_values, min_length
line 3: 
line 4:   return extend(s:get_common_syntaxlocal(), { 'blockquote_markers': {'type': type([]), 'default': ['>', '::']}, 'bold_match': {'type': type(''), 'default': '\%(^\|\s\|[[:punct:]]\)\@<=\*__Text__\*\%([[:punct:]]\|\s\|$\)\@='}, 'bold_search': {'type': type(''), 'default': '\%(^\|\s\|[[:punct:]]\)\@<=\*\zs\%([^*`[:space:]][^*`]*[^*`[:space:]]\|[^*`[:space:]]\)\ze\*\%([[:punct:]]\|\s\|$\)\@='}, 'bullet_types': {'type': type([]), 'default': ['-', '*', '#']}, 'header_match': {'type': type(''), 'default': '^\s*\(=\{1,6}\)=\@!\s*__Header__\s*\1=\@!\s*$'}, 'header_search': {'type': type(''), 'default': '^\s*\(=\{1,6}\)\([^=].*[^=]\)\1\s*$'}, 'list_markers': {'type': type([]), 'default': ['-', '1.', '*', 'I)', 'a)']}, 'number_types': {'type': type([]), 'default': ['1)', '1.', 'i)', 'I)', 'a)', 'A)']}, 'recurring_bullets': {'type': type(0), 'default': 0}, 'header_symbol': {'type': type(''), 'default': '='}, 'rxHR': {'type': type(''), 'default': '^-----*$'}, 'rxListDefine': {'type': type(''), 'default': '::\(\s\|
calling <SNR>127_get_common_syntaxlocal()

line 1:   let res = {}
line 2: 
line 3:   " Declare helper: a line with only --- or ...
line 4:   let rx_yaml_start_pre = '\%(^\%(\%1l\|^$\n\)\@<=\)'
line 5:   let rx_yaml_start_post = '\%(\%(\n^$\)\@!$\)'
line 6:   let rx_yaml_start = rx_yaml_start_pre . '---' . rx_yaml_start_post
line 7:   let rx_yaml_end = '^\%(---\|\.\.\.\)\s*$'
line 8: 
line 9:   let res.nested_extended = {'type': type(''), 'default': 'VimwikiError,VimwikiPre,VimwikiCode,VimwikiEqIn,VimwikiSuperScript,VimwikiSubScript,textSnipTEX'}
line 10:   let res.nested_typeface = {'type': type(''), 'default': 'VimwikiBold,VimwikiItalic,VimwikiUnderline,VimwikiDelText'}
line 11:   let res.nested = {'type': type(''), 'default': res.nested_extended.default . ',' . res.nested_typeface.default}
line 12:   let res.rxTableSep = {'type': type(''), 'default': '|'}
line 13:   " See issue #1287
line 14:   let res.yaml_metadata_block = {'type': type([]), 'default': [[rx_yaml_start, rx_yaml_end]]}
line 15: 
line 16:   " Declare helper for inline math nested variable
line 17:   let s:rx_inline_math_start = '\%(^\|[^$\\]\)\@<=\$\%($\|[^$[:space:]]\)\@='
line 18:   let s:rx_inline_math_end   = '\%(^\|[^$\\[:space:]]\)\@<=\$\%($\|[^$0-9]\)\@='
line 19: 
line 20:   " Blockquote marker (#1274)
line 21:   " -- it should not be changed but let's avoid hardcoding
line 22:   let res.blockquote_markers = {'type': type([]), 'default': ['>']}
line 23: 
line 24:   " HTML comment
line 25:   let res.comment_regex = {'type': type(''), 'default': '\%(^\s*%%.*$\|<!--\%([^>]\|\n\)*-->\)'}
line 26: 
line 27:   return res
<SNR>127_get_common_syntaxlocal returning {'nested': {'type': 1, 'default': 'Vim...arkers': {'type': 3, 'default': ['>']}}

continuing in <SNR>127_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([['\*', '\*', '[*]', 0]])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning [['\%(\%(^\|\%(\\\|\\\@<![*]\)\@<!\)\z...()+,-./:;<=>?@\[\\\]^`{}|~]\)\@=\)\)']]

continuing in <SNR>127_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([['_', '_', '[_]', 0]])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning [['\%(\%(^\|\%(\\\|\\\@<![_]\)\@<!\)\z...()+,-./:;<=>?@\[\\\]^`{}|~]\)\@=\)\)']]

continuing in <SNR>127_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning []

continuing in <SNR>127_get_default_syntaxlocal

calling vimwiki#u#hi_expand_regex([['\*_', '_\*', '[*_]', 1], ['_\*', '\*_', '[*_]', 1]])

line 1:   " Helper: Expand regex from reduced typeface delimiters
line 2:   " :param: list<list<delimiters>> with reduced regex
line 3:   "   1: Left delimiter (regex)
line 4:   "   2: Right delimiter (regex)
line 5:   "   3: Possible characters to ignore (regex: default '$^' => never match)
line 6:   "   4: Can multiply delimiter (boolean: default 0 => do not repeat)
line 7:   " Return: list with extended regex delimiters (not inside a word)
line 8:   "   -- [['\*_', '_\*']] -> [['\*_\S\@=', '\S\@<=_\*\%(\s\|$\)\@=']]
line 9:   " Note: For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.
line 10:   " See: https://github.github.com/gfm/#left-flanking-delimiter-run
line 11:   let res = []
line 12:   let punctuation = vimwiki#u#get_punctuation_string()
calling vimwiki#u#get_punctuation_string()

line 1:   " Faster
line 2:   " See: https://github.github.com/gfm/#ascii-punctuation-character
line 3:   " res = '!"#$%&''()*+,-./:;<=>?@\[\\\]^`{}|~'
line 4:   " But I removed the * as it is treated as a special case
line 5:   return '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'
vimwiki#u#get_punctuation_string returning '!"#$%&''()+,-./:;<=>?@\[\\\]^`{}|~'

continuing in vimwiki#u#hi_expand_regex

line 13: 
line 14:   " Iterate on (left delimiter, right delimiter pair)
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 15:   for a_delimiter in a:lst
line 16:     let r_left_del = a_delimiter[0]
line 17:     let r_right_del = a_delimiter[1]
line 18:     let r_repeat_del = len(a_delimiter) >= 3 ? a_delimiter[2] : '$^'
line 19:     let b_can_mult = len(a_delimiter) >= 4 ? a_delimiter[3] : 0
line 20: 
line 21:     " Craft the repeatable middle
line 22:     let r_mult = b_can_mult ? '\+' : ''
line 23:     let r_left_repeat = '\%(\%(' . r_left_del . '\)' . r_mult . '\)'
line 24:     let r_right_repeat = '\%(\%(' . r_right_del . '\)' . r_mult . '\)'
line 25:     let r_unescaped_repeat = '\%(\\\|\\\@<!' . r_repeat_del . '\)'
line 26: 
line 27:     " Regex Start:
line 28:     " Left-Flanking is not followed by space (or need of line)
line 29: 
line 30:     " Left Case1: not followed by punctuation, start with blacklist
line 31:     " -- Can escape the leftflank
line 32:     let r_left_prefix1 = '\%(^\|' . r_unescaped_repeat . '\@<!\)'
line 33:     let r_left_suffix1 = '\%(\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@!\)'
line 34: 
line 35:     " Left Case2: followed by punctuation so must be preceded by whitelisted Unicode whitespace or start of line or a punctuation character.
line 36:     let r_left_prefix2 = '\%(\%(^\|[[:space:]\n' . punctuation . ']\)\@<=\)'
line 37:     let r_left_suffix2 = '\%([' . punctuation . ']\@=\)'
line 38: 
line 39:     " Left Concatenate
line 40:     let r_start = '\%(' . r_left_prefix1 . '\zs' . r_left_repeat . '\ze' . r_left_suffix1
line 41:     let r_start .= '\|' . r_left_prefix2 . '\zs' . r_left_repeat . '\ze' . r_left_suffix2 . '\)'
line 42: 
line 43:     " Regex End:
line 44:     " not preceded by Unicode whitespace
line 45:     let r_right_prefix = '\(^\|[^[:space:]]\@<=\)'
line 46: 
line 47:     " Right Case1: not preceded by a punctuation character (or start of line)
line 48:     let r_right_prefix1 = '\%(^\|\%([[:space:]\n' . punctuation . ']\|' . r_unescaped_repeat . '\)\@<!\)'
line 49:     let r_right_suffix1 = '\%($\|' . r_unescaped_repeat . '\@!\)'
line 50: 
line 51:     " Right Case2: preceded by a punctuation character and followed by Unicode whitespace or end of line or a punctuation character
line 52:     let r_right_prefix2 = '\%([' . punctuation . ']\@<=\)'
line 53:     let r_right_suffix2 = '\%(\%($\|[[:space:]\n' . punctuation . ']\)\@=\)'
line 54: 
line 55:     " Right Concatenate
line 56:     let r_end = '\%(' . r_right_prefix1 . r_right_repeat . r_right_suffix1
line 57:     let r_end .= '\|' . r_right_prefix2 . r_right_repeat . r_right_suffix2 . '\)'
line 58: 
line 59:     call add(res, [r_start, r_end])
line 60:   endfor
line 61: 
line 62:   return res
vimwiki#u#hi_expand_regex returning [['\%(\%(^\|\%(\\\|\\\@<![*_]\)\@<!\)\...()+,-./:;<=>?@\[\\\]^`{}|~]\)\@=\)\)']]

continuing in <SNR>127_get_default_syntaxlocal

<SNR>127_get_default_syntaxlocal returning {'header_search': {'type': 1, 'default...': {'type': 3, 'default': ['>', '::']}}

continuing in vimwiki#vars#populate_syntax_vars

line 22: 
line 23:   " Extend <- default <- user global
line 24:   call s:extend_global(syntax_dic, default_dic)
calling <SNR>127_extend_global({}, {'header_search': {'type': 1, 'default... {'type': 1, 'default': '::\(\s\|$\)'}})

line 1:   " Extend global dictionary <- default <- user
line 2:   " Note: user_dic is unused here because it comes from g:vimwiki_* vars
line 3:   " Copy the user's settings from variables of the form g:vimwiki_<option> into the dict
line 4:   " g:vimwiki_global_vars (or set a default value)
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 5:   for key in keys(a:default_dic)
line 6:     let value_infos = a:default_dic[key]
line 7:     if exists('g:vimwiki_'.key)
line 8:       let user_value = g:vimwiki_{key}
line 9: 
line 10:       call s:check_users_value(key, user_value, value_infos, 1)
line 11: 
line 12:       call s:update_key(a:output_dic, key, value_infos.default, user_value)
line 13:       " Remove user_value to prevent type mismatch (E706) errors in vim <7.4.1546
line 14:       unlet user_value
line 15:     else
line 16:       let a:output_dic[key] = value_infos.default
line 17:     endif
line 18:   endfor
line 19:   return a:output_dic
<SNR>127_extend_global returning {'header_search': '^\s*\(=\{1,6}\)\([^...^$\)\@!$\)', '^\%(---\|\.\.\.\)\s*$']]}

continuing in vimwiki#vars#populate_syntax_vars

line 25:   " Extend <- user wikilocal
line 26:   let wikilocal = g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
line 10:   elseif a:key ==# 'wiki_nr'
line 11:     call setbufvar(buffer, 'vimwiki_wiki_nr', vimwiki#base#find_wiki(expand('%:p')))
Searching for "autoload/vimwiki/base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Desc: Basic functionality
line 4: " Called by plugin/vimwiki.vim and ftplugin/vimwiki.vim
line 5: " by global and vimwiki local map and commands
line 6: " Home: https://github.com/vimwiki/vimwiki/
line 7: 
line 8: " Clause: load only once
line 9: if exists('g:loaded_vimwiki_auto') || &compatible
line 10:   finish
line 11: endif
line 12: let g:loaded_vimwiki_auto = 1
line 13: 
line 14: 
line 15: let g:vimwiki_max_scan_for_caption = 5
line 16: 
line 17: 
line 18: function! s:safesubstitute(text, search, replace, mode) abort
line 23: 
line 24: 
line 25: function! s:vimwiki_get_known_syntaxes() abort
line 40: 
line 41: 
line 42: function! vimwiki#base#file_pattern(files) abort
line 51: 
line 52: 
line 53: function! vimwiki#base#subdir(path, filename) abort
line 83: 
line 84: 
line 85: function! vimwiki#base#current_subdir() abort
line 89: 
line 90: 
line 91: function! vimwiki#base#invsubdir(subdir) abort
line 95: 
line 96: 
line 97: function! vimwiki#base#find_wiki(path) abort
line 118: 
line 119: 
line 120: function! s:is_wiki_link(link_infos) abort
line 124: 
line 125: 
line 126: function! vimwiki#base#resolve_link(link_text, ...) abort
line 298: 
line 299: 
line 300: function! vimwiki#base#system_open_link(url) abort
line 352: 
line 353: 
line 354: function! vimwiki#base#open_link(cmd, link, ...) abort
line 395: 
line 396: 
line 397: function! vimwiki#base#nop1(stg) abort
line 401: 
line 402: 
line 403: function! vimwiki#base#get_globlinks_escaped(...) abort
line 409: 
line 410: 
line 411: function! vimwiki#base#get_globlinks_raw(...) abort
line 417: 
line 418: 
line 419: function! vimwiki#base#get_globlinks_callback(callback, ...) abort
line 446: 
line 447: 
line 448: function! vimwiki#base#generate_links(create, ...) abort
line 514: 
line 515: 
line 516: function! vimwiki#base#goto(...) abort
line 538: 
line 539: 
line 540: function! vimwiki#base#backlinks() abort
line 572: 
line 573: 
line 574: function! vimwiki#base#find_files(wiki_nr, directories_only, ...) abort
line 613: 
line 614: 
line 615: function! vimwiki#base#get_wikilinks(wiki_nr, also_absolute_links, pattern) abort
line 649: 
line 650: 
line 651: function! vimwiki#base#get_wiki_directories(wiki_nr) abort
line 671: 
line 672: 
line 673: function! vimwiki#base#get_anchors(filename, syntax) abort
line 752: 
line 753: 
line 754: function! vimwiki#base#normalize_anchor(anchor, ...) abort
line 799: 
line 800: 
line 801: function! vimwiki#base#unnormalize_anchor(anchor) abort
line 876: 
line 877: 
line 878: function! s:jump_to_anchor(anchor) abort
line 902: 
line 903: 
line 904: function! s:jump_to_segment(segment, segment_norm_re, segment_nb) abort
line 968: 
line 969: 
line 970: function! s:get_links(wikifile, idx) abort
line 1015: 
line 1016: 
line 1017: function! vimwiki#base#check_links(range, line1, line2) abort
line 1128: 
line 1129: 
line 1130: function! vimwiki#base#edit_file(command, filename, anchor, ...) abort
line 1184: 
line 1185: 
line 1186: function! vimwiki#base#search_word(wikiRX, flags) abort
line 1194: 
line 1195: 
line 1196: function! vimwiki#base#matchstr_at_cursor(wikiRX) abort
line 1218: 
line 1219: 
line 1220: function! vimwiki#base#replacestr_at_cursor(wikiRX, sub) abort
line 1247: 
line 1248: 
line 1249: function! s:print_wiki_list() abort
line 1283: 
line 1284: 
line 1285: function! s:update_wiki_link(fname, old, new) abort
line 1307: 
line 1308: 
line 1309: function! s:update_wiki_links(wiki_nr, dir, old_url, new_url) abort
line 1390: 
line 1391: 
line 1392: function! s:tail_name(fname) abort
line 1400: 
line 1401: 
line 1402: function! s:get_wiki_buffers() abort
line 1421: 
line 1422: 
line 1423: function! s:open_wiki_buffer(item) abort
line 1431: 
line 1432: 
line 1433: function! vimwiki#base#nested_syntax(filetype, start, end, textSnipHl) abort
line 1498: 
line 1499: 
line 1500: function! vimwiki#base#update_listing_in_buffer(Generator, start_header, content_regex, default_lnum, header_level, create) abort
line 1632: 
line 1633: 
line 1634: function! vimwiki#base#find_next_task() abort
line 1640: 
line 1641: 
line 1642: function! vimwiki#base#find_next_link() abort
line 1646: 
line 1647: 
line 1648: function! vimwiki#base#find_prev_link() abort
line 1657: 
line 1658: 
line 1659: function! vimwiki#base#follow_link(split, ...) abort
line 1761: 
line 1762: 
line 1763: function! vimwiki#base#go_back_link() abort
line 1790: 
line 1791: 
line 1792: function! vimwiki#base#goto_index(wnum, ...) abort
line 1827: 
line 1828: 
line 1829: function! vimwiki#base#delete_link() abort
line 1852: 
line 1853: 
line 1854: function! s:input_rename_file() abort
line 1885: 
line 1886: 
line 1887: function! vimwiki#base#rename_file(...) abort
line 2008: 
line 2009: 
line 2010: function! vimwiki#base#ui_select() abort
line 2024: 
line 2025: 
line 2026: function! vimwiki#base#TO_header(inner, including_subheaders, count) abort
line 2078: 
line 2079: 
line 2080: function! vimwiki#base#TO_table_cell(inner, visual) abort
line 2144: 
line 2145: 
line 2146: function! vimwiki#base#TO_table_col(inner, visual) abort
line 2260: 
line 2261: 
line 2262: function! vimwiki#base#AddHeaderLevel(...) abort
line 2294: 
line 2295: 
line 2296: function! vimwiki#base#RemoveHeaderLevel(...) abort
line 2333: 
line 2334: 
line 2335: function! vimwiki#base#collect_headers() abort
line 2392: 
line 2393: 
line 2394: function! s:current_header(headers, line_number) abort
line 2411: 
line 2412: 
line 2413: function! s:clean_header_text(h_text) abort
line 2427: 
line 2428: 
line 2429: function! s:get_another_header(headers, current_index, direction, operation) abort
line 2448: 
line 2449: 
line 2450: function! vimwiki#base#goto_parent_header() abort
line 2461: 
line 2462: 
line 2463: function! vimwiki#base#goto_next_header() abort
line 2475: 
line 2476: 
line 2477: function! vimwiki#base#goto_prev_header() abort
line 2491: 
line 2492: 
line 2493: function! vimwiki#base#goto_sibling(direction) abort
line 2506: 
line 2507: 
line 2508: function! vimwiki#base#table_of_contents(create) abort
line 2614: 
line 2615: 
line 2616: function! vimwiki#base#apply_template(template, rxUrl, rxDesc, rxStyle, rxExtension) abort
line 2638: 
line 2639: 
line 2640: function! s:clean_url(url) abort
line 2668: 
line 2669: 
line 2670: function! vimwiki#base#is_among_diary_files(filename, diary_file_paths) abort
line 2680: 
line 2681: 
line 2682: function! vimwiki#base#is_diary_file(filename, ...) abort
line 2706: 
line 2707: 
line 2708: function! vimwiki#base#normalize_link_helper(str, rxUrl, rxDesc, template) abort
line 2729: 
line 2730: 
line 2731: function! vimwiki#base#normalize_imagelink_helper(str, rxUrl, rxDesc, rxStyle, template) abort
line 2738: 
line 2739: 
line 2740: function! vimwiki#base#normalize_link_in_diary(lnk) abort
line 2776: 
line 2777: 
line 2778: function! s:normalize_link_syntax_n() abort
line 2825: 
line 2826: 
line 2827: function! s:normalize_link_syntax_v() abort
line 2860: 
line 2861: 
line 2862: function! vimwiki#base#normalize_link(is_visual_mode) abort
line 2877: 
line 2878: 
line 2879: function! vimwiki#base#detect_nested_syntax() abort
line 2891: 
line 2892: 
line 2893: function! vimwiki#base#complete_links_escaped(ArgLead, CmdLine, CursorPos) abort
line 2897: 
line 2898: 
line 2899: function! vimwiki#base#complete_links_raw(ArgLead, CmdLine, CursorPos) abort
line 2903: 
line 2904: 
line 2905: function! vimwiki#base#complete_file(ArgLead, CmdLine, CursorPos) abort
line 2920: 
line 2921: 
line 2922: function! vimwiki#base#read_caption(file) abort
line 2937: 
line 2938: 
line 2939: function! vimwiki#base#search(search_pattern) abort
line 2967: 
line 2968: function! s:get_title(match) abort
line 2992: 
line 2993: function! vimwiki#base#linkify() abort
line 3045: 
line 3046: 
line 3047: function! vimwiki#base#complete_colorize(ArgLead, CmdLine, CursorPos) abort
line 3053: 
line 3054: function! vimwiki#base#get_user_color(...) abort
line 3073: 
line 3074: function! vimwiki#base#colorize(...) range abort
line 3138: 
line 3139: " -------------------------------------------------------------------------
line 3140: " Load syntax-specific Wiki functionality
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
calling <SNR>129_vimwiki_get_known_syntaxes()

line 1:   " Get all vimwiki known syntaxes
line 2:   " Getting all syntaxes that different wikis could have
line 3:   let syntaxes = {}
line 4:   let syntaxes['default'] = 1
line 5:   for wiki_nr in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in <SNR>129_vimwiki_get_known_syntaxes

line 6:     let wiki_syntax = vimwiki#vars#get_wikilocal('syntax', wiki_nr)
calling vimwiki#vars#get_wikilocal('syntax', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning 'default'

continuing in <SNR>129_vimwiki_get_known_syntaxes

line 7:     let syntaxes[wiki_syntax] = 1
line 8:   endfor
line 5:   for wiki_nr in range(vimwiki#vars#number_of_wikis())
line 6:     let wiki_syntax = vimwiki#vars#get_wikilocal('syntax', wiki_nr)
line 7:     let syntaxes[wiki_syntax] = 1
line 8:   endfor
line 9:   " also consider the syntaxes from g:vimwiki_ext2syntax
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
calling vimwiki#vars#get_global('ext2syntax')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning {'.markdown': 'markdown', '.md': 'mark...kdn': 'markdown', '.mdown': 'markdown'}

continuing in <SNR>129_vimwiki_get_known_syntaxes

line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 10:   for syn in values(vimwiki#vars#get_global('ext2syntax'))
line 11:     let syntaxes[syn] = 1
line 12:   endfor
line 13:   return keys(syntaxes)
<SNR>129_vimwiki_get_known_syntaxes returning ['media', 'markdown', 'default']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim

line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3142: runtime! autoload/vimwiki/media_base.vim
Searching for "autoload/vimwiki/media_base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/vimwiki/media_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/vimwiki/media_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/autoload/vimwiki/media_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/autoload/vimwiki/media_base.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/autoload/vimwiki/media_base.vim"
not found in runtime path: "autoload/vimwiki/media_base.vim"
line 3143: endfor
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3142: runtime! autoload/vimwiki/markdown_base.vim
Searching for "autoload/vimwiki/markdown_base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/markdown_base.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 3142: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/markdown_base.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Description: Link functions for markdown syntax
line 4: " Home: https://github.com/vimwiki/vimwiki/
line 5: 
line 6: 
line 7: function! s:safesubstitute(text, search, replace, mode) abort
line 12: 
line 13: 
line 14: function! vimwiki#markdown_base#scan_reflinks() abort
line 35: 
line 36: 
line 37: function! vimwiki#markdown_base#open_reflink(link) abort
line 49: 
line 50: 
line 51: function! s:normalize_link_syntax_n() abort
line 110: 
line 111: 
line 112: function! vimwiki#markdown_base#normalize_link() abort
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/markdown_base.vim
continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/vimwiki/markdown_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/vimwiki/markdown_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/autoload/vimwiki/markdown_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/autoload/vimwiki/markdown_base.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/autoload/vimwiki/markdown_base.vim"
line 3143: endfor
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3142: runtime! autoload/vimwiki/default_base.vim
Searching for "autoload/vimwiki/default_base.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/autoload/vimwiki/default_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/vimwiki/default_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/autoload/vimwiki/default_base.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/autoload/vimwiki/default_base.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/autoload/vimwiki/default_base.vim"
not found in runtime path: "autoload/vimwiki/default_base.vim"
line 3143: endfor
line 3141: for s:syn in s:vimwiki_get_known_syntaxes()
line 3142:   execute 'runtime! autoload/vimwiki/'.s:syn.'_base.vim'
line 3143: endfor
line 3144: " -------------------------------------------------------------------------
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/base.vim
continuing in vimwiki#vars#get_bufferlocal
calling vimwiki#base#find_wiki('')

line 1:   " Returns: the number of the wiki a file belongs to or -1 if it doesn't belong
line 2:   " to any registered wiki.
line 3:   " The path can be the full path or just the directory of the file
line 4:   let bestmatch = -1
line 5:   let bestlen = 0
line 6:   let path = vimwiki#path#path_norm(vimwiki#path#chomp_slash(a:path))
Searching for "autoload/vimwiki/path.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/vimwiki/path.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/vimwiki/path.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/vimwiki/path.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 6: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim"
line 1: " vim:tabstop=2:shiftwidth=2:expandtab:textwidth=99
line 2: " Vimwiki autoload plugin file
line 3: " Description: Path manipulation functions
line 4: " Home: https://github.com/vimwiki/vimwiki/
line 5: 
line 6: 
line 7: 
line 8: function! s:unixify(path) abort
line 12: 
line 13: 
line 14: function! s:windowsify(path) abort
line 18: 
line 19: 
line 20: " Define: os specific path conversion
line 21: if vimwiki#u#is_windows()
calling vimwiki#u#is_windows()

line 1:   " Check if OS is windows
line 2:   return has('win32') || has('win64') || has('win95') || has('win16')
vimwiki#u#is_windows returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim

line 22:   function! s:osxify(path) abort
line 25: else
line 26:   function! s:osxify(path) abort
line 29: endif
line 30: 
line 31: 
line 32: function! vimwiki#path#chomp_slash(str) abort
line 36: 
line 37: 
line 38: " Define: path-compare function, either case-sensitive or not, depending on OS.
line 39: if vimwiki#u#is_windows()
calling vimwiki#u#is_windows()

line 1:   " Check if OS is windows
line 2:   return has('win32') || has('win64') || has('win95') || has('win16')
vimwiki#u#is_windows returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim

line 40:   function! vimwiki#path#is_equal(p1, p2) abort
line 43: else
line 44:   function! vimwiki#path#is_equal(p1, p2) abort
line 47: endif
line 48: 
line 49: 
line 50: function! vimwiki#path#normalize(path) abort
line 63: 
line 64: 
line 65: function! vimwiki#path#path_norm(path) abort
line 76: 
line 77: 
line 78: function! vimwiki#path#is_link_to_dir(link) abort
line 83: 
line 84: 
line 85: function! vimwiki#path#abs_path_of_link(link) abort
line 89: 
line 90: 
line 91: function! vimwiki#path#path_common_pfx(path1, path2) abort
line 108: 
line 109: 
line 110: function! vimwiki#path#wikify_path(path) abort
line 119: 
line 120: 
line 121: function! vimwiki#path#current_wiki_file() abort
line 125: 
line 126: 
line 127: function! vimwiki#path#relpath(dir, file) abort
line 169: 
line 170: 
line 171: function! vimwiki#path#mkdir(path, ...) abort
line 203: 
line 204: 
line 205: function! vimwiki#path#is_absolute(path) abort
line 222: 
line 223: 
line 224: 
line 225: function! s:get_wikifile_link(wikifile) abort
line 229: 
line 230: function! vimwiki#path#PasteLink(wikifile) abort
line 233: 
line 234: 
line 235: if vimwiki#u#is_windows()
calling vimwiki#u#is_windows()

line 1:   " Check if OS is windows
line 2:   return has('win32') || has('win64') || has('win95') || has('win16')
vimwiki#u#is_windows returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim

line 236:   " Combine: a directory and a file into one path, doesn't generate duplicate
line 237:   " path separator in case the directory is also having an ending / or \. This
line 238:   " is because on windows ~\vimwiki//.tags is invalid but ~\vimwiki/.tags is a
line 239:   " valid path.
line 240:   function! vimwiki#path#join_path(directory, file) abort
line 245: else
line 246:   function! vimwiki#path#join_path(directory, file) abort
line 251: endif
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/vimwiki/path.vim
continuing in vimwiki#base#find_wiki
calling vimwiki#path#chomp_slash('')

line 1:   " Remove Delimiter: of last path (slash or backslash)
line 2:   return substitute(a:str, '[/\\]\+$', '', '')
vimwiki#path#chomp_slash returning ''

continuing in vimwiki#base#find_wiki

calling vimwiki#path#path_norm('')

line 1:   " Normalize Path: \ -> / &&  /// -> / && resolve(symlinks)
line 2:   " return if scp
line 3:   if a:path =~# '^scp:' | return a:path | endif
line 3:  return a:path | endif
line 3:  endif
line 4:   " convert backslash to slash
line 5:   let path = substitute(a:path, '\', '/', 'g')
line 6:   " treat multiple consecutive slashes as one path separator
line 7:   let path = substitute(path, '/\+', '/', 'g')
line 8:   " ensure that we are not fooled by a symbolic link
line 9:   return resolve(path)
vimwiki#path#path_norm returning ''

continuing in vimwiki#base#find_wiki

line 7:   for idx in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in vimwiki#base#find_wiki

line 8:     let idx_path = expand(vimwiki#vars#get_wikilocal('path', idx))
calling vimwiki#vars#get_wikilocal('path', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki'

continuing in vimwiki#base#find_wiki

line 9:     let idx_path = vimwiki#path#path_norm(vimwiki#path#chomp_slash(idx_path))
calling vimwiki#path#chomp_slash('/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Remove Delimiter: of last path (slash or backslash)
line 2:   return substitute(a:str, '[/\\]\+$', '', '')
vimwiki#path#chomp_slash returning '/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki'

continuing in vimwiki#base#find_wiki

calling vimwiki#path#path_norm('/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Normalize Path: \ -> / &&  /// -> / && resolve(symlinks)
line 2:   " return if scp
line 3:   if a:path =~# '^scp:' | return a:path | endif
line 3:  return a:path | endif
line 3:  endif
line 4:   " convert backslash to slash
line 5:   let path = substitute(a:path, '\', '/', 'g')
line 6:   " treat multiple consecutive slashes as one path separator
line 7:   let path = substitute(path, '/\+', '/', 'g')
line 8:   " ensure that we are not fooled by a symbolic link
line 9:   return resolve(path)
vimwiki#path#path_norm returning '/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki'

continuing in vimwiki#base#find_wiki

line 10:     let common_pfx = vimwiki#path#path_common_pfx(idx_path, path)
calling vimwiki#path#path_common_pfx('/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki', '')

line 1:   " Returns: longest common path prefix of 2 given paths.
line 2:   " Ex: '~/home/usrname/wiki', '~/home/usrname/wiki/shmiki' => '~/home/usrname/wiki'
line 3:   let p1 = split(a:path1, '[/\\]', 1)
line 4:   let p2 = split(a:path2, '[/\\]', 1)
line 5: 
line 6:   let idx = 0
line 7:   let minlen = min([len(p1), len(p2)])
line 8:   while (idx < minlen) && vimwiki#path#is_equal(p1[idx], p2[idx])
calling vimwiki#path#is_equal('', '')

line 1:     return a:p1 ==# a:p2
vimwiki#path#is_equal returning #1

continuing in vimwiki#path#path_common_pfx

line 9:     let idx = idx + 1
line 10:   endwhile
line 8:   while (idx < minlen) && vimwiki#path#is_equal(p1[idx], p2[idx])
line 9:     let idx = idx + 1
line 10:   endwhile
line 11:   if idx == 0
line 12:     return ''
line 13:   else
line 14:     return join(p1[: idx-1], '/')
vimwiki#path#path_common_pfx returning ''

continuing in vimwiki#base#find_wiki

line 11:     if vimwiki#path#is_equal(common_pfx, idx_path)
calling vimwiki#path#is_equal('', '/Users/christopher.griffith/Library/M.../com~apple~CloudDocs/Documents/vimwiki')

line 1:     return a:p1 ==# a:p2
vimwiki#path#is_equal returning #0

continuing in vimwiki#base#find_wiki

line 12:       if len(common_pfx) > bestlen
line 13:         let bestlen = len(common_pfx)
line 14:         let bestmatch = idx
line 15:       endif
line 16:     endif
line 17:   endfor
line 7:   for idx in range(vimwiki#vars#number_of_wikis())
line 8:     let idx_path = expand(vimwiki#vars#get_wikilocal('path', idx))
line 9:     let idx_path = vimwiki#path#path_norm(vimwiki#path#chomp_slash(idx_path))
line 10:     let common_pfx = vimwiki#path#path_common_pfx(idx_path, path)
line 11:     if vimwiki#path#is_equal(common_pfx, idx_path)
line 12:       if len(common_pfx) > bestlen
line 13:         let bestlen = len(common_pfx)
line 14:         let bestmatch = idx
line 15:       endif
line 16:     endif
line 17:   endfor
line 18: 
line 19:   return bestmatch
vimwiki#base#find_wiki returning #-1

continuing in vimwiki#vars#get_bufferlocal

line 12:   elseif a:key ==# 'subdir'
line 13:     call setbufvar(buffer, 'vimwiki_subdir', vimwiki#base#current_subdir())
line 14:   elseif a:key ==# 'invsubdir'
line 15:     let subdir = vimwiki#vars#get_bufferlocal('subdir')
line 16:     call setbufvar(buffer, 'vimwiki_invsubdir', vimwiki#base#invsubdir(subdir))
line 17:   elseif a:key ==# 'existing_wikifiles'
line 18:     call setbufvar(buffer, 'vimwiki_existing_wikifiles', vimwiki#base#get_wikilinks(vimwiki#vars#get_bufferlocal('wiki_nr'), 1, ''))
line 20:   elseif a:key ==# 'existing_wikidirs'
line 21:     call setbufvar(buffer, 'vimwiki_existing_wikidirs', vimwiki#base#get_wiki_directories(vimwiki#vars#get_bufferlocal('wiki_nr')))
line 23:   elseif a:key ==# 'prev_links'
line 24:     call setbufvar(buffer, 'vimwiki_prev_links', [])
line 25:   elseif a:key ==# 'markdown_refs'
line 26:     call setbufvar(buffer, 'vimwiki_markdown_refs', vimwiki#markdown_base#scan_reflinks())
line 27:   else
line 28:     call vimwiki#u#echo('unknown buffer variable ' . string(a:key))
line 29:   endif
line 30: 
line 31:   return getbufvar(buffer, 'vimwiki_'.a:key)
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#populate_syntax_vars

line 27:   " TODO remake tests
line 28:   "call s:extend_local(syntax_dic, default_dic, syntax_dic, wikilocal)
line 29:   " Extend <- user syntaxlocal
line 30:   if exists('g:vimwiki_syntax_list') && has_key(g:vimwiki_syntax_list, a:syntax)
line 31:     call s:extend_local(syntax_dic, default_dic, syntax_dic, g:vimwiki_syntax_list[a:syntax])
line 32:   endif
line 33: 
line 34:   " TODO make that clean (i.e clarify what is local to syntax or to buffer)
line 35:   " Get from local vars
line 36:   let bullet_types = vimwiki#vars#get_wikilocal('bullet_types')
calling vimwiki#vars#get_wikilocal('bullet_types')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning []

continuing in vimwiki#vars#populate_syntax_vars

line 37:   if !empty(bullet_types)
line 38:     let syntax_dic['bullet_types'] = bullet_types
line 39:   endif
line 40:   let syntax_dic['cycle_bullets'] = vimwiki#vars#get_wikilocal('cycle_bullets')
calling vimwiki#vars#get_wikilocal('cycle_bullets')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning #0

continuing in vimwiki#vars#populate_syntax_vars

line 42: 
line 43:   " Tag: get var
line 44:   " TODO rename for internal
line 45:   let syntax_dic.tag_format = {}
line 46:   let tf = syntax_dic.tag_format
line 47:   call extend(tf, vimwiki#vars#get_wikilocal('tag_format'))
calling vimwiki#vars#get_wikilocal('tag_format')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning {'pre_mark': ':', 'sep': ':', 'conceal...': '[^:''[:space:]]\+', 'pre': '^\|\s'}

continuing in vimwiki#vars#populate_syntax_vars

line 48: 
line 49:   " Tag: Close regex
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 50:   for key in ['pre', 'pre_mark', 'in', 'sep', 'post_mark', 'post']
line 51:     let tf[key] = '\%(' . tf[key] . '\)'
line 52:   endfor
line 53: 
line 54:   " Match \s<tag[:tag:tag:tag...]>\s
line 55:   " Tag: highlighting
line 56:   " Used: syntax/vimwiki.vim
line 57:   let syntax_dic.rxTags =   tf.pre . '\@<=' . tf.pre_mark . tf.in . '\%(' . tf.sep . tf.in . '\)*' . tf.post_mark . tf.post . '\@='
line 61: 
line 62:   " Tag: searching for all
line 63:   " Used: vimwiki#base#get_anchors <- GenerateTagLinks
line 64:   let syntax_dic.tag_search =   tf.pre . tf.pre_mark . '\zs' . tf.in . '\%(' . tf.sep . tf.in . '\)*' . '\ze' . tf.post_mark . tf.post
line 68: 
line 69:   " Tag: matching a specific: when goto tag
line 70:   " Used: tags.vim->s:scan_tags
line 71:   " Match <[tag:tag:...tag:]__TAG__[:tag...:tag]>
line 72:   let syntax_dic.tag_match =   tf.pre . tf.pre_mark . '\%(' . tf.in . tf.sep . '\)*' . '__Tag__' . '\%(' . tf.sep . tf.in . '\)*' . tf.post_mark . tf.post
line 78: 
line 79: 
line 80:   " Populate generic stuff
line 81:   let header_symbol = syntax_dic.header_symbol
line 82:   if syntax_dic.symH
line 83:     " symmetric headers
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 84:     for i in range(1,6)
line 85:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__ '.repeat(header_symbol, i)
line 87:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 90:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze' .header_symbol.'\{'.i.'}\s*$'
line 93:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{'.i.'}\s*$'
line 96:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*[^'.header_symbol.']' .header_symbol.'\{1,'.i.'}\s*$\|\%$'
line 99:     endfor
line 100:     let syntax_dic.rxHeader = '^\s*\('.header_symbol.'\{1,6}\)\zs[^'.header_symbol.'].*[^'.header_symbol.']\ze\1\s*$'
line 102:   else
line 103:     " asymmetric
line 104:     " Note: For markdown rxH=# and asymmetric
line 105:     for i in range(1,6)
line 106:       let syntax_dic['rxH'.i.'_Template'] = repeat(header_symbol, i).' __Header__'
line 108:       let syntax_dic['rxH'.i] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*$'
line 110:       let syntax_dic['rxH'.i.'_Text'] = '^\s*'.header_symbol.'\{'.i.'}\zs[^'.header_symbol.'].*\ze$'
line 112:       let syntax_dic['rxH'.i.'_Start'] = '^\s*'.header_symbol.'\{'.i.'}[^'.header_symbol.'].*$'
line 114:       let syntax_dic['rxH'.i.'_End'] = '^\s*'.header_symbol.'\{1,'.i.'}[^'.header_symbol.'].*$\|\%$'
line 116:     endfor
line 117:     " Define header regex
line 118:     " -- ATX heading := preceded by #*
line 119:     let atx_heading = '^\s*\%('.header_symbol.'\{1,6}\)'
line 120:     let atx_heading .= '\zs[^'.header_symbol.'].*\ze$'
line 121:     let syntax_dic.rxHeader = atx_heading
line 122:   endif
line 123: 
line 124:   let syntax_dic.rxPreStart = '^\s*'.syntax_dic.pre_format.pre_mark
line 126:   let syntax_dic.rxPreEnd = '^\s*'.syntax_dic.pre_format.post_mark.'\s*$'
line 128: 
line 129:   let syntax_dic.rxMathStart = '^\s*'.syntax_dic.math_format.pre_mark
line 131:   let syntax_dic.rxMathEnd = '^\s*'.syntax_dic.math_format.post_mark.'\s*$'
line 133: 
line 134:   let syntax_dic.number_kinds = []
line 135:   let syntax_dic.number_divisors = ''
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape('.')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\.'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 139:   endfor
line 136:   for i in syntax_dic.number_types
line 137:     call add(syntax_dic.number_kinds, i[0])
line 138:     let syntax_dic.number_divisors .= vimwiki#u#escape(i[1])
line 139:   endfor
line 140: 
line 141:   let char_to_rx = {'1': '\d\+', 'i': '[ivxlcdm]\+', 'I': '[IVXLCDM]\+', 'a': '\l\{1,2}', 'A': '\u\{1,2}'}
line 143: 
line 144:   " Create regexp for bulleted list items
line 145:   if !empty(syntax_dic.bullet_types)
line 146:     let syntax_dic.rxListBullet = join( map(copy(syntax_dic.bullet_types),'vimwiki#u#escape(v:val).' .'repeat("\\+", syntax_dic.recurring_bullets)' ) , '\|')
calling vimwiki#u#escape('-')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '-'

continuing in vimwiki#vars#populate_syntax_vars

calling vimwiki#u#escape('*')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\*'

continuing in vimwiki#vars#populate_syntax_vars

calling vimwiki#u#escape('#')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '#'

continuing in vimwiki#vars#populate_syntax_vars

line 151:   else
line 152:     "regex that matches nothing
line 153:     let syntax_dic.rxListBullet = '$^'
line 154:   endif
line 155: 
line 156:   " Create regex for numbered list items
line 157:   if !empty(syntax_dic.number_types)
line 158:     let syntax_dic.rxListNumber = '\C\%('
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape('.')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\.'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 162:     endfor
line 159:     for type in syntax_dic.number_types[:-2]
line 160:       let syntax_dic.rxListNumber .= char_to_rx[type[0]] . vimwiki#u#escape(type[1]) . '\|'
line 162:     endfor
line 163:     let syntax_dic.rxListNumber .= char_to_rx[syntax_dic.number_types[-1][0]]. vimwiki#u#escape(syntax_dic.number_types[-1][1]) . '\)'
calling vimwiki#u#escape(')')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning ')'

continuing in vimwiki#vars#populate_syntax_vars

line 166:   else
line 167:     "regex that matches nothing
line 168:     let syntax_dic.rxListNumber = '$^'
line 169:   endif
line 170: 
line 171:   " 0. URL : free-standing links: keep URL UR(L) strip trailing punct: URL; URL) UR(L))
line 172:   " let g:vimwiki_rxWeblink = '[\["(|]\@<!'. g:vimwiki_rxWeblinkUrl .
line 173:   " \ '\%([),:;.!?]\=\%([ \t]\|$\)\)\@='
line 174:   let syntax_dic.rxWeblink = '\<'. g:vimwiki_global_vars.rxWeblinkUrl . '[^[:space:]><]*'
line 176:   " 0a) match URL within URL
line 177:   let syntax_dic.rxWeblinkMatchUrl = syntax_dic.rxWeblink
line 179:   " 0b) match DESCRIPTION within URL
line 180:   let syntax_dic.rxWeblinkMatchDescr = ''
line 181: 
line 182:   " template for matching all wiki links with a given target file
line 183:   let syntax_dic.WikiLinkMatchUrlTemplate = g:vimwiki_global_vars.rx_wikilink_prefix . '\zs__LinkUrl__\ze\%(#.*\)\?' . g:vimwiki_global_vars.rx_wikilink_suffix . '\|' . g:vimwiki_global_vars.rx_wikilink_prefix . '\zs__LinkUrl__\ze\%(#.*\)\?' . g:vimwiki_global_vars.rx_wikilink_separator . '.*' . g:vimwiki_global_vars.rx_wikilink_suffix
line 193: 
line 194:   " a) match [[URL|DESCRIPTION]]
line 195:   let syntax_dic.rxWikiLink = g:vimwiki_global_vars.rx_wikilink_prefix. g:vimwiki_global_vars.rxWikiLinkUrl.'\%('.g:vimwiki_global_vars.rx_wikilink_separator. g:vimwiki_global_vars.rxWikiLinkDescr.'\)\?'.g:vimwiki_global_vars.rx_wikilink_suffix
line 198:   let syntax_dic.rxAnyLink = syntax_dic.rxWikiLink.'\|'. g:vimwiki_global_vars.rxWikiIncl.'\|'.syntax_dic.rxWeblink
line 201:   " b) match URL within [[URL|DESCRIPTION]]
line 202:   let syntax_dic.rxWikiLinkMatchUrl = g:vimwiki_global_vars.rx_wikilink_prefix . '\zs'. g:vimwiki_global_vars.rxWikiLinkUrl .'\ze\%('. g:vimwiki_global_vars.rx_wikilink_separator . g:vimwiki_global_vars.rxWikiLinkDescr.'\)\?'.g:vimwiki_global_vars.rx_wikilink_suffix
line 206:   " c) match DESCRIPTION within [[URL|DESCRIPTION]]
line 207:   let syntax_dic.rxWikiLinkMatchDescr = g:vimwiki_global_vars.rx_wikilink_prefix . g:vimwiki_global_vars.rxWikiLinkUrl . g:vimwiki_global_vars.rx_wikilink_separator.'\%(\zs' . g:vimwiki_global_vars.rxWikiLinkDescr. '\ze\)\?' . g:vimwiki_global_vars.rx_wikilink_suffix
line 212: 
line 213:   " Work more if markdown
line 214:   if a:syntax ==# 'markdown'
line 215:     call s:populate_extra_markdown_vars()
line 216:   endif
line 217: 
line 218:   call s:normalize_syntax_settings(a:syntax)
calling <SNR>127_normalize_syntax_settings('default')

line 1:   " Normalize syntax setting
line 2:   "   so that we dont have to branch for the syntax at each operation
line 3:   " Called: populate_syntax_vars
line 4:   let syntax_dic = g:vimwiki_syntaxlocal_vars[a:syntax]
line 5: 
line 6:   " Link1: used when:
line 7:   "   user press enter on a non-link (normalize_link)
line 8:   "   command generate link form file name (generate_link)
line 9:   if a:syntax ==# 'markdown'
line 10:     let syntax_dic.Link1 = syntax_dic.Weblink1Template
line 11:     let syntax_dic.Link2 = syntax_dic.Weblink1Template
line 12:   else
line 13:     let syntax_dic.Link1 = vimwiki#vars#get_global('WikiLinkTemplate1')
calling vimwiki#vars#get_global('WikiLinkTemplate1')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '[[__LinkUrl__]]'

continuing in <SNR>127_normalize_syntax_settings

line 14:     let syntax_dic.Link2 = vimwiki#vars#get_global('WikiLinkTemplate2')
calling vimwiki#vars#get_global('WikiLinkTemplate2')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '[[__LinkUrl__|__LinkDescription__]]'

continuing in <SNR>127_normalize_syntax_settings

line 15:   endif
<SNR>127_normalize_syntax_settings returning #0

continuing in vimwiki#vars#populate_syntax_vars

vimwiki#vars#populate_syntax_vars returning #0

continuing in vimwiki#vars#get_syntaxlocal

line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['-', '*', '#']

continuing in <SNR>127_normalize_wikilocal_settings

line 9:     endif
line 10:     call s:populate_list_vars(wiki_settings)
calling <SNR>127_populate_list_vars({'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate list variable
line 2:   " or how to search and treat list (ex: *,-, 1.)
line 3:   " TODO this should be syntax_local
line 4:   let syntax = a:wiki.syntax
line 5: 
line 6:   let a:wiki.rx_bullet_char = '['.escape(join(a:wiki.bullet_types, ''), ']^-\').']'
line 7:   let a:wiki.rx_bullet_chars = a:wiki.rx_bullet_char.'\+'
line 8: 
line 9:   let recurring_bullets = vimwiki#vars#get_syntaxlocal('recurring_bullets')
calling vimwiki#vars#get_syntaxlocal('recurring_bullets')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning #0

continuing in <SNR>127_populate_list_vars

line 10:   let rxListNumber = vimwiki#vars#get_syntaxlocal('rxListNumber')
calling vimwiki#vars#get_syntaxlocal('rxListNumber')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning '\C\%(\d\+)\|\d\+\.\|[ivxlcdm]\+)\|[IVXLCDM]\+)\|\l\{1,2})\|\u\{1,2})\)'

continuing in <SNR>127_populate_list_vars

line 11: 
line 12:   let a:wiki.multiple_bullet_chars = recurring_bullets ? a:wiki.bullet_types : []
line 15: 
line 16:   " Create regexp for bulleted list items
line 17:   if !empty(a:wiki.bullet_types)
line 18:     let rxListBullet = join( map(copy(a:wiki.bullet_types),'vimwiki#u#escape(v:val).' .'repeat("\\+", recurring_bullets)' ) , '\|')
calling vimwiki#u#escape('-')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '-'

continuing in <SNR>127_populate_list_vars

calling vimwiki#u#escape('*')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\*'

continuing in <SNR>127_populate_list_vars

calling vimwiki#u#escape('#')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '#'

continuing in <SNR>127_populate_list_vars

line 23:   else
line 24:     "regex that matches nothing
line 25:     let rxListBullet = '$^'
line 26:   endif
line 27: 
line 28:   " the user can set the listsyms as string, but vimwiki needs a list
line 29:   let a:wiki.listsyms_list = split(a:wiki.listsyms, '\zs')
line 30: 
line 31:   " Guard: Check if listym_rejected is in listsyms
line 32:   if match(a:wiki.listsyms, '[' . a:wiki.listsym_rejected . ']') != -1
line 33:     call vimwiki#u#warn('the value of listsym_rejected (''' . a:wiki.listsym_rejected . ''') must not be a part of listsyms (''' . a:wiki.listsyms . ''')')
line 36:   endif
line 37: 
line 38:   let a:wiki.rxListItemWithoutCB = '^\s*\%(\('.rxListBullet.'\)\|\(' .rxListNumber.'\)\)\s'
line 41:   let a:wiki.rxListItem = a:wiki.rxListItemWithoutCB . '\+\%(\[\(['.a:wiki.listsyms . a:wiki.listsym_rejected.']\)\]\s\)\?'
line 45:   if recurring_bullets
line 46:     let a:wiki.rxListItemAndChildren = '^\('.rxListBullet.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\%(' .rxListBullet.'\).*\|^$\|\s.*\)\)*'
line 51:   else
line 52:     let a:wiki.rxListItemAndChildren = '^\(\s*\)\%('.rxListBullet.'\|' . rxListNumber.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\s.*\|^$\)\)*'
line 57:   endif
<SNR>127_populate_list_vars returning #0

continuing in <SNR>127_normalize_wikilocal_settings

line 11: 
line 12:     call s:populate_blockquote_vars(wiki_settings)
calling <SNR>127_populate_blockquote_vars({'rxListItem': '^\s*\%(\(-\|\*\|#\)\|\...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate blockquote variable
line 2:   " Start being more intelligent on blockquote line continuation
line 3:   " See: issue #1274
line 4: 
line 5:   " Start of line and spaces
line 6:   let a:wiki.rxBlockquoteItem = '^\s*\('
line 7: 
line 8:   " Content
line 9:   let blockquote_markers =  vimwiki#vars#get_syntaxlocal('blockquote_markers')
calling vimwiki#vars#get_syntaxlocal('blockquote_markers')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['>', '::']

continuing in <SNR>127_populate_blockquote_vars

line 10:   let a:wiki.rxBlockquoteItem .= join(blockquote_markers, '\|')
line 11: 
line 12:   let a:wiki.rxBlockquoteItem .= '\)'
<SNR>127_populate_blockquote_vars returning #0

continuing in <SNR>127_normalize_wikilocal_settings

line 13: 
line 14:     " Check nested syntax
line 15:     for keyword in keys(wiki_settings.nested_syntaxes)
line 16:       if type(keyword) != type('') || empty(keyword) || type(wiki_settings.nested_syntaxes[keyword]) != type('') || empty(wiki_settings.nested_syntaxes[keyword])
line 18:         call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(wiki_settings.nested_syntaxes), 'nested_syntaxes', 'nested_syntaxes'))
line 20:         break
line 21:       endif
line 22:     endfor
line 23: 
line 24:     " Normalize
line 25:     """"""""""""""""""""""""""""""""
line 26:     let wiki_settings['path'] = s:normalize_path(wiki_settings['path'])
calling <SNR>127_normalize_path('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/vimwiki')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning '/Users/christopher.griffith/Library/M...com~apple~CloudDocs/Documents/vimwiki/'

continuing in <SNR>127_normalize_wikilocal_settings

line 27: 
line 28:     let path_html = wiki_settings['path_html']
line 29:     if !empty(path_html)
line 30:       let wiki_settings['path_html'] = s:normalize_path(path_html)
line 31:     else
line 32:       let wiki_settings['path_html'] = s:normalize_path( substitute(wiki_settings['path'], '[/\\]\+$', '', '').'_html/')
calling <SNR>127_normalize_path('/Users/christopher.griffith/Library/M...pple~CloudDocs/Documents/vimwiki_html/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning '/Users/christopher.griffith/Library/M...pple~CloudDocs/Documents/vimwiki_html/'

continuing in <SNR>127_normalize_wikilocal_settings

line 34:     endif
line 35: 
line 36:     let wiki_settings['template_path'] = s:normalize_path(wiki_settings['template_path'])
calling <SNR>127_normalize_path('/Users/christopher.griffith/vimwiki/templates/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning '/Users/christopher.griffith/vimwiki/templates/'

continuing in <SNR>127_normalize_wikilocal_settings

line 37:     let wiki_settings['diary_rel_path'] = s:normalize_path(wiki_settings['diary_rel_path'])
calling <SNR>127_normalize_path('diary/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning 'diary/'

continuing in <SNR>127_normalize_wikilocal_settings

line 38: 
line 39:     let ext = wiki_settings['ext']
line 40:     if !empty(ext) && ext[0] !=# '.'
line 41:       let wiki_settings['ext'] = '.' . ext
line 42:     endif
line 43: 
line 44:     " for convenience, we also allow the term 'mediawiki'
line 45:     if wiki_settings.syntax ==# 'mediawiki'
line 46:       let wiki_settings.syntax = 'media'
line 47:     endif
line 48: 
line 49:     if wiki_settings.syntax ==# 'markdown' && !s:margin_set_by_user
line 50:       " default list margin to 0
line 51:       let wiki_settings.list_margin = 0
line 52:     endif
line 53:   endfor
line 2:   for wiki_settings in g:vimwiki_wikilocal_vars
line 3:     " Check some values individually
line 4:     """"""""""""""""""""""""""""""""
line 5:     " Treat lists
line 6:     " TODO remove me: I am syntaxlocal
line 7:     if !has_key(wiki_settings, 'bullet_types') || len(wiki_settings.bullet_types) == 0
line 8:       let wiki_settings.bullet_types = vimwiki#vars#get_syntaxlocal('bullet_types', wiki_settings.syntax)
calling vimwiki#vars#get_syntaxlocal('bullet_types', 'default')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['-', '*', '#']

continuing in <SNR>127_normalize_wikilocal_settings

line 9:     endif
line 10:     call s:populate_list_vars(wiki_settings)
calling <SNR>127_populate_list_vars({'auto_tags': 0, 'css_name': 'style.cs...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate list variable
line 2:   " or how to search and treat list (ex: *,-, 1.)
line 3:   " TODO this should be syntax_local
line 4:   let syntax = a:wiki.syntax
line 5: 
line 6:   let a:wiki.rx_bullet_char = '['.escape(join(a:wiki.bullet_types, ''), ']^-\').']'
line 7:   let a:wiki.rx_bullet_chars = a:wiki.rx_bullet_char.'\+'
line 8: 
line 9:   let recurring_bullets = vimwiki#vars#get_syntaxlocal('recurring_bullets')
calling vimwiki#vars#get_syntaxlocal('recurring_bullets')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning #0

continuing in <SNR>127_populate_list_vars

line 10:   let rxListNumber = vimwiki#vars#get_syntaxlocal('rxListNumber')
calling vimwiki#vars#get_syntaxlocal('rxListNumber')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning '\C\%(\d\+)\|\d\+\.\|[ivxlcdm]\+)\|[IVXLCDM]\+)\|\l\{1,2})\|\u\{1,2})\)'

continuing in <SNR>127_populate_list_vars

line 11: 
line 12:   let a:wiki.multiple_bullet_chars = recurring_bullets ? a:wiki.bullet_types : []
line 15: 
line 16:   " Create regexp for bulleted list items
line 17:   if !empty(a:wiki.bullet_types)
line 18:     let rxListBullet = join( map(copy(a:wiki.bullet_types),'vimwiki#u#escape(v:val).' .'repeat("\\+", recurring_bullets)' ) , '\|')
calling vimwiki#u#escape('-')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '-'

continuing in <SNR>127_populate_list_vars

calling vimwiki#u#escape('*')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '\*'

continuing in <SNR>127_populate_list_vars

calling vimwiki#u#escape('#')

line 1:   " Escape string for literal magic regex match
line 2:   return escape(a:string, '~.*[]\^$')
vimwiki#u#escape returning '#'

continuing in <SNR>127_populate_list_vars

line 23:   else
line 24:     "regex that matches nothing
line 25:     let rxListBullet = '$^'
line 26:   endif
line 27: 
line 28:   " the user can set the listsyms as string, but vimwiki needs a list
line 29:   let a:wiki.listsyms_list = split(a:wiki.listsyms, '\zs')
line 30: 
line 31:   " Guard: Check if listym_rejected is in listsyms
line 32:   if match(a:wiki.listsyms, '[' . a:wiki.listsym_rejected . ']') != -1
line 33:     call vimwiki#u#warn('the value of listsym_rejected (''' . a:wiki.listsym_rejected . ''') must not be a part of listsyms (''' . a:wiki.listsyms . ''')')
line 36:   endif
line 37: 
line 38:   let a:wiki.rxListItemWithoutCB = '^\s*\%(\('.rxListBullet.'\)\|\(' .rxListNumber.'\)\)\s'
line 41:   let a:wiki.rxListItem = a:wiki.rxListItemWithoutCB . '\+\%(\[\(['.a:wiki.listsyms . a:wiki.listsym_rejected.']\)\]\s\)\?'
line 45:   if recurring_bullets
line 46:     let a:wiki.rxListItemAndChildren = '^\('.rxListBullet.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\%(' .rxListBullet.'\).*\|^$\|\s.*\)\)*'
line 51:   else
line 52:     let a:wiki.rxListItemAndChildren = '^\(\s*\)\%('.rxListBullet.'\|' . rxListNumber.'\)\s\+\[[' . a:wiki.listsyms_list[-1] . a:wiki.listsym_rejected . ']\]\s.*\%(\n\%(\1\s.*\|^$\)\)*'
line 57:   endif
<SNR>127_populate_list_vars returning #0

continuing in <SNR>127_normalize_wikilocal_settings

line 11: 
line 12:     call s:populate_blockquote_vars(wiki_settings)
calling <SNR>127_populate_blockquote_vars({'rxListItem': '^\s*\%(\(-\|\*\|#\)\|\...\s'}, 'diary_start_week_day': 'monday'})

line 1:   " Populate blockquote variable
line 2:   " Start being more intelligent on blockquote line continuation
line 3:   " See: issue #1274
line 4: 
line 5:   " Start of line and spaces
line 6:   let a:wiki.rxBlockquoteItem = '^\s*\('
line 7: 
line 8:   " Content
line 9:   let blockquote_markers =  vimwiki#vars#get_syntaxlocal('blockquote_markers')
calling vimwiki#vars#get_syntaxlocal('blockquote_markers')

line 1:   " Get syntax variable
line 2:   " Param: 1: key (<string>)
line 3:   " Param: (2): syntax name (<string> ex:'markdown')
line 4:   " Retrieve desired syntax name
line 5:   if a:0
line 6:     let syntax = a:1
line 7:   else
line 8:     let syntax = vimwiki#vars#get_wikilocal('syntax')
calling vimwiki#vars#get_wikilocal('syntax')

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
line 7:   else
line 8:     return g:vimwiki_wikilocal_vars[vimwiki#vars#get_bufferlocal('wiki_nr')][a:key]
calling vimwiki#vars#get_bufferlocal('wiki_nr')

line 1:   " Return: buffer local variable
line 2:   " for the buffer we are currently in or for the given buffer (number or name).
line 3:   " Populate the variable, if it doesn't exist.
line 4:   let buffer = a:0 ? a:1 : '%'
line 5: 
line 6:   " 'get(getbufvar(...' handles vim < v7.3.831 that didn't allow a default value for getbufvar
line 7:   let value = get(getbufvar(buffer, ''), 'vimwiki_'.a:key, '/\/\')
line 8:   if type(value) != 1 || value !=# '/\/\'
line 9:     return value
vimwiki#vars#get_bufferlocal returning #-1

continuing in vimwiki#vars#get_wikilocal

vimwiki#vars#get_wikilocal returning 'default'

continuing in vimwiki#vars#get_syntaxlocal

line 9:   endif
line 10: 
line 11:   " Create syntax variable dict if not exists (lazy)
line 12:   if !exists('g:vimwiki_syntaxlocal_vars') || !has_key(g:vimwiki_syntaxlocal_vars, syntax)
line 13:     call vimwiki#vars#populate_syntax_vars(syntax)
line 14:   endif
line 15: 
line 16:   " Return d_syntax[a:key]
line 17:   return g:vimwiki_syntaxlocal_vars[syntax][a:key]
vimwiki#vars#get_syntaxlocal returning ['>', '::']

continuing in <SNR>127_populate_blockquote_vars

line 10:   let a:wiki.rxBlockquoteItem .= join(blockquote_markers, '\|')
line 11: 
line 12:   let a:wiki.rxBlockquoteItem .= '\)'
<SNR>127_populate_blockquote_vars returning #0

continuing in <SNR>127_normalize_wikilocal_settings

line 13: 
line 14:     " Check nested syntax
line 15:     for keyword in keys(wiki_settings.nested_syntaxes)
line 16:       if type(keyword) != type('') || empty(keyword) || type(wiki_settings.nested_syntaxes[keyword]) != type('') || empty(wiki_settings.nested_syntaxes[keyword])
line 18:         call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(wiki_settings.nested_syntaxes), 'nested_syntaxes', 'nested_syntaxes'))
line 20:         break
line 21:       endif
line 22:     endfor
line 23: 
line 24:     " Normalize
line 25:     """"""""""""""""""""""""""""""""
line 26:     let wiki_settings['path'] = s:normalize_path(wiki_settings['path'])
calling <SNR>127_normalize_path('/Users/christopher.griffith/vimwiki/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning '/Users/christopher.griffith/vimwiki/'

continuing in <SNR>127_normalize_wikilocal_settings

line 27: 
line 28:     let path_html = wiki_settings['path_html']
line 29:     if !empty(path_html)
line 30:       let wiki_settings['path_html'] = s:normalize_path(path_html)
line 31:     else
line 32:       let wiki_settings['path_html'] = s:normalize_path( substitute(wiki_settings['path'], '[/\\]\+$', '', '').'_html/')
calling <SNR>127_normalize_path('/Users/christopher.griffith/vimwiki_html/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning '/Users/christopher.griffith/vimwiki_html/'

continuing in <SNR>127_normalize_wikilocal_settings

line 34:     endif
line 35: 
line 36:     let wiki_settings['template_path'] = s:normalize_path(wiki_settings['template_path'])
calling <SNR>127_normalize_path('/Users/christopher.griffith/vimwiki/templates/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning '/Users/christopher.griffith/vimwiki/templates/'

continuing in <SNR>127_normalize_wikilocal_settings

line 37:     let wiki_settings['diary_rel_path'] = s:normalize_path(wiki_settings['diary_rel_path'])
calling <SNR>127_normalize_path('diary/')

line 1:   " Helper path
line 2:   " TODO move to path: Conflict with: vimwiki#path#path_norm && vimwiki#path#normalize
line 3:   " trim trailing / and \ because otherwise resolve() doesn't work quite right
line 4:   let path = substitute(a:path, '[/\\]\+$', '', '')
line 5:   if path !~# '^scp:'
line 6:     return resolve(expand(path)).'/'
<SNR>127_normalize_path returning 'diary/'

continuing in <SNR>127_normalize_wikilocal_settings

line 38: 
line 39:     let ext = wiki_settings['ext']
line 40:     if !empty(ext) && ext[0] !=# '.'
line 41:       let wiki_settings['ext'] = '.' . ext
line 42:     endif
line 43: 
line 44:     " for convenience, we also allow the term 'mediawiki'
line 45:     if wiki_settings.syntax ==# 'mediawiki'
line 46:       let wiki_settings.syntax = 'media'
line 47:     endif
line 48: 
line 49:     if wiki_settings.syntax ==# 'markdown' && !s:margin_set_by_user
line 50:       " default list margin to 0
line 51:       let wiki_settings.list_margin = 0
line 52:     endif
line 53:   endfor
line 2:   for wiki_settings in g:vimwiki_wikilocal_vars
line 3:     " Check some values individually
line 4:     """"""""""""""""""""""""""""""""
line 5:     " Treat lists
line 6:     " TODO remove me: I am syntaxlocal
line 7:     if !has_key(wiki_settings, 'bullet_types') || len(wiki_settings.bullet_types) == 0
line 8:       let wiki_settings.bullet_types = vimwiki#vars#get_syntaxlocal('bullet_types', wiki_settings.syntax)
line 9:     endif
line 10:     call s:populate_list_vars(wiki_settings)
line 11: 
line 12:     call s:populate_blockquote_vars(wiki_settings)
line 13: 
line 14:     " Check nested syntax
line 15:     for keyword in keys(wiki_settings.nested_syntaxes)
line 16:       if type(keyword) != type('') || empty(keyword) || type(wiki_settings.nested_syntaxes[keyword]) != type('') || empty(wiki_settings.nested_syntaxes[keyword])
line 18:         call vimwiki#u#error(printf('The provided value ''%s'' of the option ''g:vimwiki_%s'' is' . ' invalid. See '':h g:vimwiki_%s''.', string(wiki_settings.nested_syntaxes), 'nested_syntaxes', 'nested_syntaxes'))
line 20:         break
line 21:       endif
line 22:     endfor
line 23: 
line 24:     " Normalize
line 25:     """"""""""""""""""""""""""""""""
line 26:     let wiki_settings['path'] = s:normalize_path(wiki_settings['path'])
line 27: 
line 28:     let path_html = wiki_settings['path_html']
line 29:     if !empty(path_html)
line 30:       let wiki_settings['path_html'] = s:normalize_path(path_html)
line 31:     else
line 32:       let wiki_settings['path_html'] = s:normalize_path( substitute(wiki_settings['path'], '[/\\]\+$', '', '').'_html/')
line 34:     endif
line 35: 
line 36:     let wiki_settings['template_path'] = s:normalize_path(wiki_settings['template_path'])
line 37:     let wiki_settings['diary_rel_path'] = s:normalize_path(wiki_settings['diary_rel_path'])
line 38: 
line 39:     let ext = wiki_settings['ext']
line 40:     if !empty(ext) && ext[0] !=# '.'
line 41:       let wiki_settings['ext'] = '.' . ext
line 42:     endif
line 43: 
line 44:     " for convenience, we also allow the term 'mediawiki'
line 45:     if wiki_settings.syntax ==# 'mediawiki'
line 46:       let wiki_settings.syntax = 'media'
line 47:     endif
line 48: 
line 49:     if wiki_settings.syntax ==# 'markdown' && !s:margin_set_by_user
line 50:       " default list margin to 0
line 51:       let wiki_settings.list_margin = 0
line 52:     endif
line 53:   endfor
<SNR>127_normalize_wikilocal_settings returning #0

continuing in <SNR>127_populate_wikilocal_options

<SNR>127_populate_wikilocal_options returning #0

continuing in vimwiki#vars#init

vimwiki#vars#init returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 233: 
line 234: 
line 235: " Define callback functions which the user can redefine
line 236: if !exists('*VimwikiLinkHandler')
line 237:   function VimwikiLinkHandler(url)
line 240: endif
line 241: 
line 242: if !exists('*VimwikiLinkConverter')
line 243:   function VimwikiLinkConverter(url, source, target)
line 247: endif
line 248: 
line 249: if !exists('*VimwikiWikiIncludeHandler')
line 250:   function! VimwikiWikiIncludeHandler(value)
line 253: endif
line 254: 
line 255: 
line 256: " Write a level 1 header to new wiki files
line 257: " a:fname should be an absolute filepath
line 258: function! s:create_h1(fname) abort
line 302: 
line 303: " Define autocommands for all known wiki extensions
line 304: let s:known_extensions = s:vimwiki_get_known_extensions()
calling <SNR>126_vimwiki_get_known_extensions()

line 1:   " Getting all extensions that different wikis could have
line 2:   let extensions = {}
line 3:   for idx in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in <SNR>126_vimwiki_get_known_extensions

line 4:     let ext = vimwiki#vars#get_wikilocal('ext', idx)
calling vimwiki#vars#get_wikilocal('ext', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning '.wiki'

continuing in <SNR>126_vimwiki_get_known_extensions

line 5:     let extensions[ext] = 1
line 6:   endfor
line 3:   for idx in range(vimwiki#vars#number_of_wikis())
line 4:     let ext = vimwiki#vars#get_wikilocal('ext', idx)
line 5:     let extensions[ext] = 1
line 6:   endfor
line 7:   " append extensions from g:vimwiki_ext2syntax
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
calling vimwiki#vars#get_global('ext2syntax')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning {'.markdown': 'markdown', '.md': 'mark...kdn': 'markdown', '.mdown': 'markdown'}

continuing in <SNR>126_vimwiki_get_known_extensions

line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 8:   for ext in keys(vimwiki#vars#get_global('ext2syntax'))
line 9:     let extensions[ext] = 1
line 10:   endfor
line 11:   return keys(extensions)
<SNR>126_vimwiki_get_known_extensions returning ['.markdown', '.md', '.mw', '.mkdn', '.wiki', '.mdwn', '.mdown']

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 305: 
line 306: if index(s:known_extensions, '.wiki') > -1
line 307:   augroup filetypedetect
line 308:     " Clear FlexWiki's stuff
line 309:     au! * *.wiki
line 310:   augroup end
line 311: endif
line 312: 
line 313: augroup vimwiki
line 314:   autocmd!
line 315:   autocmd ColorScheme * call s:setup_cleared_syntax()
line 316: 
line 317:   " ['.md', '.mdown'] => *.md,*.mdown
line 318:   let pat = join(map(s:known_extensions, '"*" . v:val'), ',')
line 319:   exe 'autocmd BufNewFile,BufRead '.pat.' call s:setup_new_wiki_buffer()'
line 319: autocmd BufNewFile,BufRead *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_new_wiki_buffer()
line 320:   exe 'autocmd BufEnter '.pat.' call s:setup_buffer_enter()'
line 320: autocmd BufEnter *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_enter()
line 321:   exe 'autocmd BufLeave '.pat.' call s:setup_buffer_leave()'
line 321: autocmd BufLeave *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_leave()
line 322:   exe 'autocmd BufWinEnter '.pat.' call s:setup_buffer_win_enter()'
line 322: autocmd BufWinEnter *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_win_enter()
line 323:   if exists('##DiffUpdated')
line 324:     exe 'autocmd DiffUpdated '.pat.' call s:setup_buffer_win_enter()'
line 324: autocmd DiffUpdated *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:setup_buffer_win_enter()
line 325:   endif
line 326:   " automatically generate a level 1 header for new files
line 327:   exe 'autocmd BufNewFile '.pat.' call s:create_h1(expand("%:p"))'
line 327: autocmd BufNewFile *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call s:create_h1(expand("%:p"))
line 328:   " Format tables when exit from insert mode. Do not use textwidth to
line 329:   " autowrap tables.
line 330:   if vimwiki#vars#get_global('table_auto_fmt')
calling vimwiki#vars#get_global('table_auto_fmt')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning #1

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 331:     exe 'autocmd InsertLeave '.pat.' call vimwiki#tbl#format(line("."), 2)'
line 331: autocmd InsertLeave *.markdown,*.md,*.mw,*.mkdn,*.wiki,*.mdwn,*.mdown call vimwiki#tbl#format(line("."), 2)
line 332:   endif
line 333:   if vimwiki#vars#get_global('folding') =~? ':quick$'
calling vimwiki#vars#get_global('folding')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 334:     " from http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
line 335:     " Don't screw up folds when inserting text that might affect them, until
line 336:     " leaving insert mode. Foldmethod is local to the window. Protect against
line 337:     " screwing up folding when switching between windows.
line 338:     exe 'autocmd InsertEnter '.pat.' if !exists("w:last_fdm") | let w:last_fdm=&foldmethod'. ' | setlocal foldmethod=manual | endif'
line 340:     exe 'autocmd InsertLeave,WinLeave '.pat.' if exists("w:last_fdm") |'. 'let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif'
line 342:   endif
line 343: augroup END
line 344: 
line 345: 
line 346: " Declare global commands
line 347: command! VimwikiUISelect call vimwiki#base#ui_select()
line 348: 
line 349: " these commands take a count e.g. :VimwikiIndex 2
line 350: " the default behavior is to open the index, diary etc.
line 351: " for the CURRENT wiki if no count is given
line 352: command! -count=0 VimwikiIndex call vimwiki#base#goto_index(<count>)
line 354: 
line 355: command! -count=0 VimwikiTabIndex call vimwiki#base#goto_index(<count>, 1)
line 357: 
line 358: command! -count=0 VimwikiDiaryIndex call vimwiki#diary#goto_diary_index(<count>)
line 360: 
line 361: command! -count=0 VimwikiMakeDiaryNote call vimwiki#diary#make_note(<count>, 5)
line 363: 
line 364: command! -count=0 VimwikiTabMakeDiaryNote call vimwiki#diary#make_note(<count>, 1)
line 366: 
line 367: command! -count=0 VimwikiMakeYesterdayDiaryNote call vimwiki#diary#make_note(<count>, 0, vimwiki#diary#diary_date_link(localtime(), -1, <count>))
line 370: 
line 371: command! -count=0 VimwikiMakeTomorrowDiaryNote call vimwiki#diary#make_note(<count>, 0, vimwiki#diary#diary_date_link(localtime(), 1, <count>))
line 374: 
line 375: command! VimwikiDiaryGenerateLinks call vimwiki#diary#generate_diary_section()
line 377: 
line 378: command! VimwikiShowVersion call s:get_version()
line 379: 
line 380: command! -nargs=* -complete=customlist,vimwiki#vars#complete VimwikiVar call vimwiki#vars#cmd(<q-args>)
line 382: 
line 383: 
line 384: " Declare global maps
line 385: " <Plug> global definitions
line 386: nnoremap <silent><script> <Plug>VimwikiIndex :<C-U>call vimwiki#base#goto_index(v:count)<CR>
line 388: nnoremap <silent><script> <Plug>VimwikiTabIndex :<C-U>call vimwiki#base#goto_index(v:count, 1)<CR>
line 390: nnoremap <silent><script> <Plug>VimwikiUISelect :VimwikiUISelect<CR>
line 392: nnoremap <silent><script> <Plug>VimwikiDiaryIndex :<C-U>call vimwiki#diary#goto_diary_index(v:count)<CR>
line 394: nnoremap <silent><script> <Plug>VimwikiDiaryGenerateLinks :VimwikiDiaryGenerateLinks<CR>
line 396: nnoremap <silent><script> <Plug>VimwikiMakeDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 5)<CR>
line 398: nnoremap <silent><script> <Plug>VimwikiTabMakeDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 1)<CR>
line 400: nnoremap <silent><script> <Plug>VimwikiMakeYesterdayDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 0, vimwiki#diary#diary_date_link(localtime(), -1, v:count))<CR>
line 403: nnoremap <silent><script> <Plug>VimwikiMakeTomorrowDiaryNote :<C-U>call vimwiki#diary#make_note(v:count, 0, vimwiki#diary#diary_date_link(localtime(), 1, v:count))<CR>
line 406: 
line 407: 
line 408: " Set default global key mappings
line 409: if str2nr(vimwiki#vars#get_global('key_mappings').global)
calling vimwiki#vars#get_global('key_mappings')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning {'headers': 1, 'table_format': 1, 'lis...se': 0, 'table_mappings': 1, 'html': 1}

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 410:   " Get the user defined prefix (default <leader>w)
line 411:   let s:map_prefix = vimwiki#vars#get_global('map_prefix')
calling vimwiki#vars#get_global('map_prefix')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning '<Leader>w'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 412: 
line 413:   call vimwiki#u#map_key('n', s:map_prefix . 'w', '<Plug>VimwikiIndex', 2)
calling vimwiki#u#map_key('n', '<Leader>ww', '<Plug>VimwikiIndex', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>ww <Plug>VimwikiIndex
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 414:   call vimwiki#u#map_key('n', s:map_prefix . 't', '<Plug>VimwikiTabIndex', 2)
calling vimwiki#u#map_key('n', '<Leader>wt', '<Plug>VimwikiTabIndex', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>wt <Plug>VimwikiTabIndex
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 415:   call vimwiki#u#map_key('n', s:map_prefix . 's', '<Plug>VimwikiUISelect', 2)
calling vimwiki#u#map_key('n', '<Leader>ws', '<Plug>VimwikiUISelect', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>ws <Plug>VimwikiUISelect
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 416:   call vimwiki#u#map_key('n', s:map_prefix . 'i', '<Plug>VimwikiDiaryIndex', 2)
calling vimwiki#u#map_key('n', '<Leader>wi', '<Plug>VimwikiDiaryIndex', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>wi <Plug>VimwikiDiaryIndex
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 417:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>i', '<Plug>VimwikiDiaryGenerateLinks', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>i', '<Plug>VimwikiDiaryGenerateLinks', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>i <Plug>VimwikiDiaryGenerateLinks
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 418:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>w', '<Plug>VimwikiMakeDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>w', '<Plug>VimwikiMakeDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>w <Plug>VimwikiMakeDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 419:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>t', '<Plug>VimwikiTabMakeDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>t', '<Plug>VimwikiTabMakeDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>t <Plug>VimwikiTabMakeDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 420:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>y', '<Plug>VimwikiMakeYesterdayDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>y', '<Plug>VimwikiMakeYesterdayDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>y <Plug>VimwikiMakeYesterdayDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 421:   call vimwiki#u#map_key('n', s:map_prefix . '<Leader>m', '<Plug>VimwikiMakeTomorrowDiaryNote', 2)
calling vimwiki#u#map_key('n', '<Leader>w<Leader>m', '<Plug>VimwikiMakeTomorrowDiaryNote', 2)

line 1:   " a:mode single character indicating the mode as defined by :h maparg
line 2:   " a:key the key sequence to map
line 3:   " a:plug the plug command the key sequence should be mapped to
line 4:   " a:1 optional argument with the following functionality:
line 5:   "   if a:1==1 then the hasmapto(<Plug>) check is skipped.
line 6:   "     this can be used to map different keys to the same <Plug> definition
line 7:   "   if a:1==2 then the mapping is not <buffer> specific i.e. it is global
line 8:   if a:0 && a:1 == 2
line 9:     " global mappings
line 10:     if !hasmapto(a:plug, a:mode) && maparg(a:key, a:mode) ==# ''
line 11:       exe a:mode . 'map ' . a:key . ' ' . a:plug
line 11: nmap <Leader>w<Leader>m <Plug>VimwikiMakeTomorrowDiaryNote
line 12:     endif
line 13:   elseif a:0 && a:1 == 1
line 14:       " vimwiki buffer mappings, repeat mapping to the same <Plug> definition
line 15:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 16:   else
line 17:     " vimwiki buffer mappings
line 18:     if !hasmapto(a:plug, a:mode)
line 19:       exe a:mode . 'map <buffer> ' . a:key . ' ' . a:plug
line 20:     endif
line 21:   endif
vimwiki#u#map_key returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 422: endif
line 423: 
line 424: 
line 425: " Build global wiki menu (GUI)
line 426: function! s:build_menu(topmenu) abort
line 453: 
line 454: 
line 455: " Build global table menu (GUI)
line 456: function! s:build_table_menu(topmenu) abort
line 465: 
line 466: 
line 467: " Build Menus now
line 468: if !empty(vimwiki#vars#get_global('menu'))
calling vimwiki#vars#get_global('menu')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning 'Vimwiki'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 469:   call s:build_menu(vimwiki#vars#get_global('menu'))
calling vimwiki#vars#get_global('menu')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning 'Vimwiki'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

calling <SNR>126_build_menu('Vimwiki')

line 1:   let wnamelist = []
line 2:   for idx in range(vimwiki#vars#number_of_wikis())
calling vimwiki#vars#number_of_wikis()

line 1:   " Return: number of registered wikis + temporary
line 2:   return len(g:vimwiki_wikilocal_vars) - 1
vimwiki#vars#number_of_wikis returning #1

continuing in <SNR>126_build_menu

line 3:     let wname = vimwiki#vars#get_wikilocal('name', idx)
calling vimwiki#vars#get_wikilocal('name', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning ''

continuing in <SNR>126_build_menu

line 4:     if wname ==? ''
line 5:       " fall back to the path if wiki isn't named
line 6:       let wname = fnamemodify(vimwiki#vars#get_wikilocal('path', idx), ':h:t')
calling vimwiki#vars#get_wikilocal('path', 0)

line 1:   " Return: wiki local named variable
line 2:   " Param: (1): variable name (alias key, <string>)
line 3:   " Param: (2): wiki number (<int>). When absent, the wiki of the currently active buffer is
line 4:   " used
line 5:   if a:0
line 6:     return g:vimwiki_wikilocal_vars[a:1][a:key]
vimwiki#vars#get_wikilocal returning '/Users/christopher.griffith/Library/M...com~apple~CloudDocs/Documents/vimwiki/'

continuing in <SNR>126_build_menu

line 7:     endif
line 8: 
line 9:     if index(wnamelist, wname) != -1
line 10:       " append wiki index number to duplicate entries
line 11:       let wname = wname . ' ' . string(idx + 1)
line 12:     endif
line 13: 
line 14:     " add entry to the list of names for duplicate checks
line 15:     call add(wnamelist, wname)
line 16: 
line 17:     " escape spaces and periods
line 18:     let wname = escape(wname, '\ \.')
line 19: 
line 20:     " build the menu
line 21:     execute 'menu '.a:topmenu.'.Open\ index.'.wname. ' :call vimwiki#base#goto_index('.(idx+1).')<CR>'
line 21: menu Vimwiki.Open\ index.vimwiki :call vimwiki#base#goto_index(1)<CR>
line 23:     execute 'menu '.a:topmenu.'.Open/Create\ diary\ note.'.wname. ' :call vimwiki#diary#make_note('.(idx+1).')<CR>'
line 23: menu Vimwiki.Open/Create\ diary\ note.vimwiki :call vimwiki#diary#make_note(1)<CR>
line 25:   endfor
line 2:   for idx in range(vimwiki#vars#number_of_wikis())
line 3:     let wname = vimwiki#vars#get_wikilocal('name', idx)
line 4:     if wname ==? ''
line 5:       " fall back to the path if wiki isn't named
line 6:       let wname = fnamemodify(vimwiki#vars#get_wikilocal('path', idx), ':h:t')
line 7:     endif
line 8: 
line 9:     if index(wnamelist, wname) != -1
line 10:       " append wiki index number to duplicate entries
line 11:       let wname = wname . ' ' . string(idx + 1)
line 12:     endif
line 13: 
line 14:     " add entry to the list of names for duplicate checks
line 15:     call add(wnamelist, wname)
line 16: 
line 17:     " escape spaces and periods
line 18:     let wname = escape(wname, '\ \.')
line 19: 
line 20:     " build the menu
line 21:     execute 'menu '.a:topmenu.'.Open\ index.'.wname. ' :call vimwiki#base#goto_index('.(idx+1).')<CR>'
line 23:     execute 'menu '.a:topmenu.'.Open/Create\ diary\ note.'.wname. ' :call vimwiki#diary#make_note('.(idx+1).')<CR>'
line 25:   endfor
<SNR>126_build_menu returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 470:   call s:build_table_menu(vimwiki#vars#get_global('menu'))
calling vimwiki#vars#get_global('menu')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning 'Vimwiki'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

calling <SNR>126_build_table_menu('Vimwiki')

line 1:   exe 'menu '.a:topmenu.'.-Sep- :'
line 1: menu Vimwiki.-Sep- :
line 2:   exe 'menu '.a:topmenu.'.Table.Create\ (enter\ cols\ rows) :VimwikiTable '
line 2: menu Vimwiki.Table.Create\ (enter\ cols\ rows) :VimwikiTable 
line 3:   exe 'nmenu '.a:topmenu.'.Table.Format<tab>gqq gqq'
line 3: nmenu Vimwiki.Table.Format<tab>gqq gqq
line 4:   exe 'nmenu '.a:topmenu.'.Table.Move\ column\ left<tab><A-Left> :VimwikiTableMoveColumnLeft<CR>'
line 4: nmenu Vimwiki.Table.Move\ column\ left<tab><A-Left> :VimwikiTableMoveColumnLeft<CR>
line 5:   exe 'nmenu '.a:topmenu. '.Table.Move\ column\ right<tab><A-Right> :VimwikiTableMoveColumnRight<CR>'
line 5: nmenu Vimwiki.Table.Move\ column\ right<tab><A-Right> :VimwikiTableMoveColumnRight<CR>
line 7:   exe 'nmenu disable '.a:topmenu.'.Table'
line 7: nmenu disable Vimwiki.Table
<SNR>126_build_table_menu returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 471: endif
line 472: 
line 473: 
line 474: " Hook for calendar.vim
line 475: if vimwiki#vars#get_global('use_calendar')
calling vimwiki#vars#get_global('use_calendar')

line 1:   " Return: wiki global variable
line 2:   return g:vimwiki_global_vars[a:key]
vimwiki#vars#get_global returning #1

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim

line 476:   let g:calendar_action = 'vimwiki#diary#calendar_action'
line 477:   let g:calendar_sign = 'vimwiki#diary#calendar_sign'
line 478: endif
line 479: 
line 480: 
line 481: " Restore peace in the galaxy
line 482: let &cpoptions = s:old_cpo
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/plugin/vimwiki.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim"
line 1: " unimpaired.vim - Pairs of handy bracket mappings
line 2: " Maintainer:   Tim Pope <http://tpo.pe/>
line 3: " Version:      2.1
line 4: " GetLatestVimScripts: 1590 1 :AutoInstall: unimpaired.vim
line 5: 
line 6: if exists("g:loaded_unimpaired") || &cp || v:version < 700
line 7:   finish
line 8: endif
line 9: let g:loaded_unimpaired = 1
line 10: 
line 11: function! s:Map(...) abort
line 34: 
line 35: " Section: Next and previous
line 36: 
line 37: function! s:MapNextFamily(map, cmd, current) abort
line 71: 
line 72: call s:MapNextFamily('a', '' , 'argument')
calling <SNR>132_MapNextFamily('a', '', 'argument')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-previous) :<C-U>exe "".(v:count ? v:count : "")."previous"<CR>
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-next)     :<C-U>exe "".(v:count ? v:count : "")."next"<CR>
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-first)    :<C-U><C-R>=v:count ? v:count . "argument" : "first"<CR><CR>
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-last)     :<C-U><C-R>=v:count ? v:count . "argument" : "last"<CR><CR>
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedAPrevious :<C-U>exe "".(v:count ? v:count : "")."previous"<CR>
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedANext     :<C-U>exe "".(v:count ? v:count : "")."next"<CR>
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedAFirst    :<C-U>exe "".(v:count ? v:count : "")."first"<CR>
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedALast     :<C-U>exe "".(v:count ? v:count : "")."last"<CR>
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>132_Map('n', '[a', '<Plug>(unimpaired-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [a <Plug>(unimpaired-previous)'

continuing in <SNR>132_MapNextFamily

line 14: nmap  [a <Plug>(unimpaired-previous)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>132_Map('n', ']a', '<Plug>(unimpaired-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]a <Plug>(unimpaired-next)'

continuing in <SNR>132_MapNextFamily

line 15: nmap  ]a <Plug>(unimpaired-next)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>132_Map('n', '[A', '<Plug>(unimpaired-first)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [A <Plug>(unimpaired-first)'

continuing in <SNR>132_MapNextFamily

line 16: nmap  [A <Plug>(unimpaired-first)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>132_Map('n', ']A', '<Plug>(unimpaired-last)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]A <Plug>(unimpaired-last)'

continuing in <SNR>132_MapNextFamily

line 17: nmap  ]A <Plug>(unimpaired-last)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>132_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 73: call s:MapNextFamily('b', 'b', 'buffer')
calling <SNR>132_MapNextFamily('b', 'b', 'buffer')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-bprevious) :<C-U>exe "".(v:count ? v:count : "")."bprevious"<CR>
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-bnext)     :<C-U>exe "".(v:count ? v:count : "")."bnext"<CR>
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-bfirst)    :<C-U><C-R>=v:count ? v:count . "buffer" : "bfirst"<CR><CR>
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-blast)     :<C-U><C-R>=v:count ? v:count . "buffer" : "blast"<CR><CR>
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedBPrevious :<C-U>exe "".(v:count ? v:count : "")."bprevious"<CR>
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedBNext     :<C-U>exe "".(v:count ? v:count : "")."bnext"<CR>
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedBFirst    :<C-U>exe "".(v:count ? v:count : "")."bfirst"<CR>
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedBLast     :<C-U>exe "".(v:count ? v:count : "")."blast"<CR>
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>132_Map('n', '[b', '<Plug>(unimpaired-bprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [b <Plug>(unimpaired-bprevious)'

continuing in <SNR>132_MapNextFamily

line 14: nmap  [b <Plug>(unimpaired-bprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>132_Map('n', ']b', '<Plug>(unimpaired-bnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]b <Plug>(unimpaired-bnext)'

continuing in <SNR>132_MapNextFamily

line 15: nmap  ]b <Plug>(unimpaired-bnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>132_Map('n', '[B', '<Plug>(unimpaired-bfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [B <Plug>(unimpaired-bfirst)'

continuing in <SNR>132_MapNextFamily

line 16: nmap  [B <Plug>(unimpaired-bfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>132_Map('n', ']B', '<Plug>(unimpaired-blast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]B <Plug>(unimpaired-blast)'

continuing in <SNR>132_MapNextFamily

line 17: nmap  ]B <Plug>(unimpaired-blast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>132_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 74: call s:MapNextFamily('l', 'l', 'll')
calling <SNR>132_MapNextFamily('l', 'l', 'll')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-lprevious) :<C-U>exe "".(v:count ? v:count : "")."lprevious"<CR>zv
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-lnext)     :<C-U>exe "".(v:count ? v:count : "")."lnext"<CR>zv
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-lfirst)    :<C-U><C-R>=v:count ? v:count . "ll" : "lfirst"<CR><CR>zv
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-llast)     :<C-U><C-R>=v:count ? v:count . "ll" : "llast"<CR><CR>zv
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedLPrevious :<C-U>exe "".(v:count ? v:count : "")."lprevious"<CR>zv
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedLNext     :<C-U>exe "".(v:count ? v:count : "")."lnext"<CR>zv
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedLFirst    :<C-U>exe "".(v:count ? v:count : "")."lfirst"<CR>zv
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedLLast     :<C-U>exe "".(v:count ? v:count : "")."llast"<CR>zv
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>132_Map('n', '[l', '<Plug>(unimpaired-lprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [l <Plug>(unimpaired-lprevious)'

continuing in <SNR>132_MapNextFamily

line 14: nmap  [l <Plug>(unimpaired-lprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>132_Map('n', ']l', '<Plug>(unimpaired-lnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]l <Plug>(unimpaired-lnext)'

continuing in <SNR>132_MapNextFamily

line 15: nmap  ]l <Plug>(unimpaired-lnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>132_Map('n', '[L', '<Plug>(unimpaired-lfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [L <Plug>(unimpaired-lfirst)'

continuing in <SNR>132_MapNextFamily

line 16: nmap  [L <Plug>(unimpaired-lfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>132_Map('n', ']L', '<Plug>(unimpaired-llast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]L <Plug>(unimpaired-llast)'

continuing in <SNR>132_MapNextFamily

line 17: nmap  ]L <Plug>(unimpaired-llast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 19: nnoremap <silent> <Plug>(unimpaired-lpfile)  :<C-U>exe "".(v:count ? v:count : "")."lpfile"<CR>zv
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 20: nnoremap <silent> <Plug>(unimpaired-lnfile)  :<C-U>exe "".(v:count ? v:count : "")."lnfile"<CR>zv
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 21: nnoremap <silent> <Plug>unimpairedLPFile :<C-U>exe "".(v:count ? v:count : "")."lpfile"<CR>zv
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 22: nnoremap <silent> <Plug>unimpairedLNFile :<C-U>exe "".(v:count ? v:count : "")."lnfile"<CR>zv
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
calling <SNR>132_Map('n', '[<C-L>', '<Plug>(unimpaired-lpfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [<C-L> <Plug>(unimpaired-lpfile)'

continuing in <SNR>132_MapNextFamily

line 23: nmap  [<C-L> <Plug>(unimpaired-lpfile)
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
calling <SNR>132_Map('n', ']<C-L>', '<Plug>(unimpaired-lnfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]<C-L> <Plug>(unimpaired-lnfile)'

continuing in <SNR>132_MapNextFamily

line 24: nmap  ]<C-L> <Plug>(unimpaired-lnfile)
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>132_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 75: call s:MapNextFamily('q', 'c', 'cc')
calling <SNR>132_MapNextFamily('q', 'c', 'cc')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-cprevious) :<C-U>exe "".(v:count ? v:count : "")."cprevious"<CR>zv
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-cnext)     :<C-U>exe "".(v:count ? v:count : "")."cnext"<CR>zv
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-cfirst)    :<C-U><C-R>=v:count ? v:count . "cc" : "cfirst"<CR><CR>zv
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-clast)     :<C-U><C-R>=v:count ? v:count . "cc" : "clast"<CR><CR>zv
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedQPrevious :<C-U>exe "".(v:count ? v:count : "")."cprevious"<CR>zv
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedQNext     :<C-U>exe "".(v:count ? v:count : "")."cnext"<CR>zv
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedQFirst    :<C-U>exe "".(v:count ? v:count : "")."cfirst"<CR>zv
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedQLast     :<C-U>exe "".(v:count ? v:count : "")."clast"<CR>zv
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>132_Map('n', '[q', '<Plug>(unimpaired-cprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [q <Plug>(unimpaired-cprevious)'

continuing in <SNR>132_MapNextFamily

line 14: nmap  [q <Plug>(unimpaired-cprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>132_Map('n', ']q', '<Plug>(unimpaired-cnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]q <Plug>(unimpaired-cnext)'

continuing in <SNR>132_MapNextFamily

line 15: nmap  ]q <Plug>(unimpaired-cnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>132_Map('n', '[Q', '<Plug>(unimpaired-cfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [Q <Plug>(unimpaired-cfirst)'

continuing in <SNR>132_MapNextFamily

line 16: nmap  [Q <Plug>(unimpaired-cfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>132_Map('n', ']Q', '<Plug>(unimpaired-clast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]Q <Plug>(unimpaired-clast)'

continuing in <SNR>132_MapNextFamily

line 17: nmap  ]Q <Plug>(unimpaired-clast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 19: nnoremap <silent> <Plug>(unimpaired-cpfile)  :<C-U>exe "".(v:count ? v:count : "")."cpfile"<CR>zv
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 20: nnoremap <silent> <Plug>(unimpaired-cnfile)  :<C-U>exe "".(v:count ? v:count : "")."cnfile"<CR>zv
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 21: nnoremap <silent> <Plug>unimpairedQPFile :<C-U>exe "".(v:count ? v:count : "")."cpfile"<CR>zv
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 22: nnoremap <silent> <Plug>unimpairedQNFile :<C-U>exe "".(v:count ? v:count : "")."cnfile"<CR>zv
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
calling <SNR>132_Map('n', '[<C-Q>', '<Plug>(unimpaired-cpfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [<C-Q> <Plug>(unimpaired-cpfile)'

continuing in <SNR>132_MapNextFamily

line 23: nmap  [<C-Q> <Plug>(unimpaired-cpfile)
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
calling <SNR>132_Map('n', ']<C-Q>', '<Plug>(unimpaired-cnfile)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]<C-Q> <Plug>(unimpaired-cnfile)'

continuing in <SNR>132_MapNextFamily

line 24: nmap  ]<C-Q> <Plug>(unimpaired-cnfile)
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
line 32:   endif
<SNR>132_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 76: call s:MapNextFamily('t', 't', 'trewind')
calling <SNR>132_MapNextFamily('t', 't', 'trewind')

line 1:   let prefix = '<Plug>(unimpaired-' . a:cmd
line 2:   let map = '<Plug>unimpaired'.toupper(a:map)
line 3:   let cmd = '".(v:count ? v:count : "")."'.a:cmd
line 4:   let zv = (a:cmd ==# 'l' || a:cmd ==# 'c' ? 'zv' : '')
line 5:   let end = '"<CR>'.zv
line 6:   execute 'nnoremap <silent> '.prefix.'previous) :<C-U>exe "'.cmd.'previous'.end
line 6: nnoremap <silent> <Plug>(unimpaired-tprevious) :<C-U>exe "".(v:count ? v:count : "")."tprevious"<CR>
line 7:   execute 'nnoremap <silent> '.prefix.'next)     :<C-U>exe "'.cmd.'next'.end
line 7: nnoremap <silent> <Plug>(unimpaired-tnext)     :<C-U>exe "".(v:count ? v:count : "")."tnext"<CR>
line 8:   execute 'nnoremap '.prefix.'first)    :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'first"<CR><CR>' . zv
line 8: nnoremap <Plug>(unimpaired-tfirst)    :<C-U><C-R>=v:count ? v:count . "trewind" : "tfirst"<CR><CR>
line 9:   execute 'nnoremap '.prefix.'last)     :<C-U><C-R>=v:count ? v:count . "' . a:current . '" : "' . a:cmd . 'last"<CR><CR>' . zv
line 9: nnoremap <Plug>(unimpaired-tlast)     :<C-U><C-R>=v:count ? v:count . "trewind" : "tlast"<CR><CR>
line 10:   execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
line 10: nnoremap <silent> <Plug>unimpairedTPrevious :<C-U>exe "".(v:count ? v:count : "")."tprevious"<CR>
line 11:   execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
line 11: nnoremap <silent> <Plug>unimpairedTNext     :<C-U>exe "".(v:count ? v:count : "")."tnext"<CR>
line 12:   execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
line 12: nnoremap <silent> <Plug>unimpairedTFirst    :<C-U>exe "".(v:count ? v:count : "")."tfirst"<CR>
line 13:   execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
line 13: nnoremap <silent> <Plug>unimpairedTLast     :<C-U>exe "".(v:count ? v:count : "")."tlast"<CR>
line 14:   exe s:Map('n', '['.        a:map , prefix.'previous)')
calling <SNR>132_Map('n', '[t', '<Plug>(unimpaired-tprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [t <Plug>(unimpaired-tprevious)'

continuing in <SNR>132_MapNextFamily

line 14: nmap  [t <Plug>(unimpaired-tprevious)
line 15:   exe s:Map('n', ']'.        a:map , prefix.'next)')
calling <SNR>132_Map('n', ']t', '<Plug>(unimpaired-tnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]t <Plug>(unimpaired-tnext)'

continuing in <SNR>132_MapNextFamily

line 15: nmap  ]t <Plug>(unimpaired-tnext)
line 16:   exe s:Map('n', '['.toupper(a:map), prefix.'first)')
calling <SNR>132_Map('n', '[T', '<Plug>(unimpaired-tfirst)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [T <Plug>(unimpaired-tfirst)'

continuing in <SNR>132_MapNextFamily

line 16: nmap  [T <Plug>(unimpaired-tfirst)
line 17:   exe s:Map('n', ']'.toupper(a:map), prefix.'last)')
calling <SNR>132_Map('n', ']T', '<Plug>(unimpaired-tlast)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]T <Plug>(unimpaired-tlast)'

continuing in <SNR>132_MapNextFamily

line 17: nmap  ]T <Plug>(unimpaired-tlast)
line 18:   if a:cmd ==# 'c' || a:cmd ==# 'l'
line 19:     execute 'nnoremap <silent> '.prefix.'pfile)  :<C-U>exe "'.cmd.'pfile'.end
line 20:     execute 'nnoremap <silent> '.prefix.'nfile)  :<C-U>exe "'.cmd.'nfile'.end
line 21:     execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
line 22:     execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
line 23:     exe s:Map('n', '[<C-'.toupper(a:map).'>', prefix.'pfile)')
line 24:     exe s:Map('n', ']<C-'.toupper(a:map).'>', prefix.'nfile)')
line 25:   elseif a:cmd ==# 't'
line 26:     nnoremap <silent> <Plug>(unimpaired-ptprevious) :<C-U>exe v:count1 . "ptprevious"<CR>
line 27:     nnoremap <silent> <Plug>(unimpaired-ptnext) :<C-U>exe v:count1 . "ptnext"<CR>
line 28:     execute 'nnoremap <silent> '.map.'PPrevious :<C-U>exe "p'.cmd.'previous'.end
line 28: nnoremap <silent> <Plug>unimpairedTPPrevious :<C-U>exe "p".(v:count ? v:count : "")."tprevious"<CR>
line 29:     execute 'nnoremap <silent> '.map.'PNext :<C-U>exe "p'.cmd.'next'.end
line 29: nnoremap <silent> <Plug>unimpairedTPNext :<C-U>exe "p".(v:count ? v:count : "")."tnext"<CR>
line 30:     exe s:Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')
calling <SNR>132_Map('n', '[<C-T>', '<Plug>(unimpaired-ptprevious)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [<C-T> <Plug>(unimpaired-ptprevious)'

continuing in <SNR>132_MapNextFamily

line 30: nmap  [<C-T> <Plug>(unimpaired-ptprevious)
line 31:     exe s:Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')
calling <SNR>132_Map('n', ']<C-T>', '<Plug>(unimpaired-ptnext)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]<C-T> <Plug>(unimpaired-ptnext)'

continuing in <SNR>132_MapNextFamily

line 31: nmap  ]<C-T> <Plug>(unimpaired-ptnext)
line 32:   endif
<SNR>132_MapNextFamily returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 77: 
line 78: function! s:entries(path) abort
line 91: 
line 92: function! s:FileByOffset(num) abort
line 124: 
line 125: function! s:fnameescape(file) abort
line 132: 
line 133: function! s:GetWindow() abort
line 140: 
line 141: function! s:PreviousFileEntry(count) abort
line 152: 
line 153: function! s:NextFileEntry(count) abort
line 164: 
line 165: nnoremap <silent> <Plug>(unimpaired-directory-next)     :<C-U>execute <SID>NextFileEntry(v:count1)<CR>
line 166: nnoremap <silent> <Plug>(unimpaired-directory-previous) :<C-U>execute <SID>PreviousFileEntry(v:count1)<CR>
line 167: nnoremap <silent> <Plug>unimpairedDirectoryNext     :<C-U>execute <SID>NextFileEntry(v:count1)<CR>
line 168: nnoremap <silent> <Plug>unimpairedDirectoryPrevious :<C-U>execute <SID>PreviousFileEntry(v:count1)<CR>
line 169: exe s:Map('n', ']f', '<Plug>(unimpaired-directory-next)')
calling <SNR>132_Map('n', ']f', '<Plug>(unimpaired-directory-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]f <Plug>(unimpaired-directory-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 169: nmap  ]f <Plug>(unimpaired-directory-next)
line 170: exe s:Map('n', '[f', '<Plug>(unimpaired-directory-previous)')
calling <SNR>132_Map('n', '[f', '<Plug>(unimpaired-directory-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [f <Plug>(unimpaired-directory-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 170: nmap  [f <Plug>(unimpaired-directory-previous)
line 171: 
line 172: " Section: Diff
line 173: 
line 174: nnoremap <silent> <Plug>(unimpaired-context-previous) :<C-U>call <SID>Context(1)<CR>
line 175: nnoremap <silent> <Plug>(unimpaired-context-next)     :<C-U>call <SID>Context(0)<CR>
line 176: vnoremap <silent> <Plug>(unimpaired-context-previous) :<C-U>exe 'normal! gv'<Bar>call <SID>Context(1)<CR>
line 177: vnoremap <silent> <Plug>(unimpaired-context-next)     :<C-U>exe 'normal! gv'<Bar>call <SID>Context(0)<CR>
line 178: onoremap <silent> <Plug>(unimpaired-context-previous) :<C-U>call <SID>ContextMotion(1)<CR>
line 179: onoremap <silent> <Plug>(unimpaired-context-next)     :<C-U>call <SID>ContextMotion(0)<CR>
line 180: 
line 181: exe s:Map('n', '[n', '<Plug>(unimpaired-context-previous)')
calling <SNR>132_Map('n', '[n', '<Plug>(unimpaired-context-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [n <Plug>(unimpaired-context-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 181: nmap  [n <Plug>(unimpaired-context-previous)
line 182: exe s:Map('n', ']n', '<Plug>(unimpaired-context-next)')
calling <SNR>132_Map('n', ']n', '<Plug>(unimpaired-context-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]n <Plug>(unimpaired-context-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 182: nmap  ]n <Plug>(unimpaired-context-next)
line 183: exe s:Map('x', '[n', '<Plug>(unimpaired-context-previous)')
calling <SNR>132_Map('x', '[n', '<Plug>(unimpaired-context-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  [n <Plug>(unimpaired-context-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 183: xmap  [n <Plug>(unimpaired-context-previous)
line 184: exe s:Map('x', ']n', '<Plug>(unimpaired-context-next)')
calling <SNR>132_Map('x', ']n', '<Plug>(unimpaired-context-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  ]n <Plug>(unimpaired-context-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 184: xmap  ]n <Plug>(unimpaired-context-next)
line 185: exe s:Map('o', '[n', '<Plug>(unimpaired-context-previous)')
calling <SNR>132_Map('o', '[n', '<Plug>(unimpaired-context-previous)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'omap  [n <Plug>(unimpaired-context-previous)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 185: omap  [n <Plug>(unimpaired-context-previous)
line 186: exe s:Map('o', ']n', '<Plug>(unimpaired-context-next)')
calling <SNR>132_Map('o', ']n', '<Plug>(unimpaired-context-next)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'omap  ]n <Plug>(unimpaired-context-next)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 186: omap  ]n <Plug>(unimpaired-context-next)
line 187: 
line 188: nnoremap <silent> <Plug>unimpairedContextPrevious :<C-U>call <SID>Context(1)<CR>
line 189: nnoremap <silent> <Plug>unimpairedContextNext     :<C-U>call <SID>Context(0)<CR>
line 190: xnoremap <silent> <Plug>unimpairedContextPrevious :<C-U>exe 'normal! gv'<Bar>call <SID>Context(1)<CR>
line 191: xnoremap <silent> <Plug>unimpairedContextNext     :<C-U>exe 'normal! gv'<Bar>call <SID>Context(0)<CR>
line 192: onoremap <silent> <Plug>unimpairedContextPrevious :<C-U>call <SID>ContextMotion(1)<CR>
line 193: onoremap <silent> <Plug>unimpairedContextNext     :<C-U>call <SID>ContextMotion(0)<CR>
line 194: 
line 195: function! s:Context(reverse) abort
line 198: 
line 199: function! s:ContextMotion(reverse) abort
line 228: 
line 229: " Section: Line operations
line 230: 
line 231: function! s:BlankUp() abort
line 238: 
line 239: function! s:BlankDown() abort
line 246: 
line 247: nnoremap <silent> <Plug>(unimpaired-blank-up)   :<C-U>exe <SID>BlankUp()<CR>
line 248: nnoremap <silent> <Plug>(unimpaired-blank-down) :<C-U>exe <SID>BlankDown()<CR>
line 249: 
line 250: nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>exe <SID>BlankUp()<CR>
line 251: nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>exe <SID>BlankDown()<CR>
line 252: 
line 253: exe s:Map('n', '[<Space>', '<Plug>(unimpaired-blank-up)')
calling <SNR>132_Map('n', '[<Space>', '<Plug>(unimpaired-blank-up)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [<Space> <Plug>(unimpaired-blank-up)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 253: nmap  [<Space> <Plug>(unimpaired-blank-up)
line 254: exe s:Map('n', ']<Space>', '<Plug>(unimpaired-blank-down)')
calling <SNR>132_Map('n', ']<Space>', '<Plug>(unimpaired-blank-down)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]<Space> <Plug>(unimpaired-blank-down)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 254: nmap  ]<Space> <Plug>(unimpaired-blank-down)
line 255: 
line 256: function! s:ExecMove(cmd) abort
line 268: 
line 269: function! s:Move(cmd, count, map) abort
line 273: 
line 274: function! s:MoveSelectionUp(count) abort
line 278: 
line 279: function! s:MoveSelectionDown(count) abort
line 283: 
line 284: nnoremap <silent> <Plug>(unimpaired-move-up)            :<C-U>call <SID>Move('--',v:count1,'up')<CR>
line 285: nnoremap <silent> <Plug>(unimpaired-move-down)          :<C-U>call <SID>Move('+',v:count1,'down')<CR>
line 286: noremap  <silent> <Plug>(unimpaired-move-selection-up)   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR>
line 287: noremap  <silent> <Plug>(unimpaired-move-selection-down) :<C-U>call <SID>MoveSelectionDown(v:count1)<CR>
line 288: nnoremap <silent> <Plug>unimpairedMoveUp            :<C-U>call <SID>Move('--',v:count1,'up')<CR>
line 289: nnoremap <silent> <Plug>unimpairedMoveDown          :<C-U>call <SID>Move('+',v:count1,'down')<CR>
line 290: noremap  <silent> <Plug>unimpairedMoveSelectionUp   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR>
line 291: noremap  <silent> <Plug>unimpairedMoveSelectionDown :<C-U>call <SID>MoveSelectionDown(v:count1)<CR>
line 292: 
line 293: exe s:Map('n', '[e', '<Plug>(unimpaired-move-up)')
calling <SNR>132_Map('n', '[e', '<Plug>(unimpaired-move-up)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [e <Plug>(unimpaired-move-up)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 293: nmap  [e <Plug>(unimpaired-move-up)
line 294: exe s:Map('n', ']e', '<Plug>(unimpaired-move-down)')
calling <SNR>132_Map('n', ']e', '<Plug>(unimpaired-move-down)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]e <Plug>(unimpaired-move-down)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 294: nmap  ]e <Plug>(unimpaired-move-down)
line 295: exe s:Map('x', '[e', '<Plug>(unimpaired-move-selection-up)')
calling <SNR>132_Map('x', '[e', '<Plug>(unimpaired-move-selection-up)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  [e <Plug>(unimpaired-move-selection-up)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 295: xmap  [e <Plug>(unimpaired-move-selection-up)
line 296: exe s:Map('x', ']e', '<Plug>(unimpaired-move-selection-down)')
calling <SNR>132_Map('x', ']e', '<Plug>(unimpaired-move-selection-down)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  ]e <Plug>(unimpaired-move-selection-down)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 296: xmap  ]e <Plug>(unimpaired-move-selection-down)
line 297: 
line 298: " Section: Option toggling
line 299: 
line 300: function! s:StatuslineRefresh() abort
line 304: 
line 305: function! s:Toggle(op) abort
line 309: 
line 310: function! s:CursorOptions() abort
line 313: 
line 314: function! s:option_map(letter, option, mode) abort
line 319: 
line 320: nmap <script> <Plug>(unimpaired-enable)b  :<C-U>set background=light<CR>
line 321: nmap <script> <Plug>(unimpaired-disable)b :<C-U>set background=dark<CR>
line 322: nmap <script> <Plug>(unimpaired-toggle)b  :<C-U>set background=<C-R>=&background == "dark" ? "light" : "dark"<CR><CR>
line 323: call s:option_map('c', 'cursorline', 'setlocal')
calling <SNR>132_option_map('c', 'cursorline', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)c :<C-U>setlocal cursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)c :<C-U>setlocal nocursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)c :<C-U>setlocal <C-R>=<SID>Toggle("cursorline")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 324: call s:option_map('-', 'cursorline', 'setlocal')
calling <SNR>132_option_map('-', 'cursorline', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)- :<C-U>setlocal cursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)- :<C-U>setlocal nocursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)- :<C-U>setlocal <C-R>=<SID>Toggle("cursorline")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 325: call s:option_map('_', 'cursorline', 'setlocal')
calling <SNR>132_option_map('_', 'cursorline', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)_ :<C-U>setlocal cursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)_ :<C-U>setlocal nocursorline<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)_ :<C-U>setlocal <C-R>=<SID>Toggle("cursorline")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 326: call s:option_map('u', 'cursorcolumn', 'setlocal')
calling <SNR>132_option_map('u', 'cursorcolumn', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)u :<C-U>setlocal cursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)u :<C-U>setlocal nocursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)u :<C-U>setlocal <C-R>=<SID>Toggle("cursorcolumn")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 327: call s:option_map('<Bar>', 'cursorcolumn', 'setlocal')
calling <SNR>132_option_map('<Bar>', 'cursorcolumn', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)<Bar> :<C-U>setlocal cursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)<Bar> :<C-U>setlocal nocursorcolumn<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)<Bar> :<C-U>setlocal <C-R>=<SID>Toggle("cursorcolumn")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 328: nmap <script> <Plug>(unimpaired-enable)d  :<C-U>diffthis<CR>
line 329: nmap <script> <Plug>(unimpaired-disable)d :<C-U>diffoff<CR>
line 330: nmap <script> <Plug>(unimpaired-toggle)d  :<C-U><C-R>=&diff ? "diffoff" : "diffthis"<CR><CR>
line 331: call s:option_map('h', 'hlsearch', 'set')
calling <SNR>132_option_map('h', 'hlsearch', 'set')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)h :<C-U>set hlsearch<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)h :<C-U>set nohlsearch<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)h :<C-U>set <C-R>=<SID>Toggle("hlsearch")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 332: call s:option_map('i', 'ignorecase', 'set')
calling <SNR>132_option_map('i', 'ignorecase', 'set')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)i :<C-U>set ignorecase<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)i :<C-U>set noignorecase<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)i :<C-U>set <C-R>=<SID>Toggle("ignorecase")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 333: call s:option_map('l', 'list', 'setlocal')
calling <SNR>132_option_map('l', 'list', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)l :<C-U>setlocal list<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)l :<C-U>setlocal nolist<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)l :<C-U>setlocal <C-R>=<SID>Toggle("list")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 334: call s:option_map('n', 'number', 'setlocal')
calling <SNR>132_option_map('n', 'number', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)n :<C-U>setlocal number<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)n :<C-U>setlocal nonumber<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)n :<C-U>setlocal <C-R>=<SID>Toggle("number")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 335: call s:option_map('r', 'relativenumber', 'setlocal')
calling <SNR>132_option_map('r', 'relativenumber', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)r :<C-U>setlocal relativenumber<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)r :<C-U>setlocal norelativenumber<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)r :<C-U>setlocal <C-R>=<SID>Toggle("relativenumber")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 336: call s:option_map('s', 'spell', 'setlocal')
calling <SNR>132_option_map('s', 'spell', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)s :<C-U>setlocal spell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)s :<C-U>setlocal nospell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)s :<C-U>setlocal <C-R>=<SID>Toggle("spell")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 337: call s:option_map('w', 'wrap', 'setlocal')
calling <SNR>132_option_map('w', 'wrap', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)w :<C-U>setlocal wrap<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)w :<C-U>setlocal nowrap<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)w :<C-U>setlocal <C-R>=<SID>Toggle("wrap")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 338: if empty(maparg('<Plug>(unimpaired-toggle)z', 'n'))
line 339:   call s:option_map('z', 'spell', 'setlocal')
calling <SNR>132_option_map('z', 'spell', 'setlocal')

line 1:   exe 'nmap <script> <Plug>(unimpaired-enable)' .a:letter ':<C-U>'.a:mode.' '.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 1: nmap <script> <Plug>(unimpaired-enable)z :<C-U>setlocal spell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 2:   exe 'nmap <script> <Plug>(unimpaired-disable)'.a:letter ':<C-U>'.a:mode.' no'.a:option.'<C-R>=<SID>StatuslineRefresh()<CR><CR>'
line 2: nmap <script> <Plug>(unimpaired-disable)z :<C-U>setlocal nospell<C-R>=<SID>StatuslineRefresh()<CR><CR>
line 3:   exe 'nmap <script> <Plug>(unimpaired-toggle)' .a:letter ':<C-U>'.a:mode.' <C-R>=<SID>Toggle("'.a:option.'")<CR><CR>'
line 3: nmap <script> <Plug>(unimpaired-toggle)z :<C-U>setlocal <C-R>=<SID>Toggle("spell")<CR><CR>
<SNR>132_option_map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 340: endif
line 341: nmap <script> <Plug>(unimpaired-enable)v  :<C-U>set virtualedit+=all<CR>
line 342: nmap <script> <Plug>(unimpaired-disable)v :<C-U>set virtualedit-=all<CR>
line 343: nmap <script> <Plug>(unimpaired-toggle)v  :<C-U>set <C-R>=(&virtualedit =~# "all") ? "virtualedit-=all" : "virtualedit+=all"<CR><CR>
line 344: nmap <script> <Plug>(unimpaired-enable)x  :<C-U>set cursorline cursorcolumn<CR>
line 345: nmap <script> <Plug>(unimpaired-disable)x :<C-U>set nocursorline nocursorcolumn<CR>
line 346: nmap <script> <Plug>(unimpaired-toggle)x  :<C-U>set <C-R>=<SID>CursorOptions()<CR><CR>
line 347: nmap <script> <Plug>(unimpaired-enable)+  :<C-U>set cursorline cursorcolumn<CR>
line 348: nmap <script> <Plug>(unimpaired-disable)+ :<C-U>set nocursorline nocursorcolumn<CR>
line 349: nmap <script> <Plug>(unimpaired-toggle)+  :<C-U>set <C-R>=<SID>CursorOptions()<CR><CR>
line 350: 
line 351: function! s:ColorColumn(should_clear) abort
line 357: nmap <script> <Plug>(unimpaired-enable)t  :<C-U>set colorcolumn=<C-R>=<SID>ColorColumn(0)<CR><CR>
line 358: nmap <script> <Plug>(unimpaired-disable)t :<C-U>set colorcolumn=<C-R>=<SID>ColorColumn(1)<CR><CR>
line 359: nmap <script> <Plug>(unimpaired-toggle)t  :<C-U>set colorcolumn=<C-R>=<SID>ColorColumn(!empty(&cc))<CR><CR>
line 360: 
line 361: exe s:Map('n', 'yo', '<Plug>(unimpaired-toggle)')
calling <SNR>132_Map('n', 'yo', '<Plug>(unimpaired-toggle)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  yo <Plug>(unimpaired-toggle)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 361: nmap  yo <Plug>(unimpaired-toggle)
line 362: exe s:Map('n', '[o', '<Plug>(unimpaired-enable)')
calling <SNR>132_Map('n', '[o', '<Plug>(unimpaired-enable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [o <Plug>(unimpaired-enable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 362: nmap  [o <Plug>(unimpaired-enable)
line 363: exe s:Map('n', ']o', '<Plug>(unimpaired-disable)')
calling <SNR>132_Map('n', ']o', '<Plug>(unimpaired-disable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]o <Plug>(unimpaired-disable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 363: nmap  ]o <Plug>(unimpaired-disable)
line 364: exe s:Map('n', 'yo<Esc>', '<Nop>')
calling <SNR>132_Map('n', 'yo<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap <script> yo<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 364: nmap <script> yo<Esc> <Nop>
line 365: exe s:Map('n', '[o<Esc>', '<Nop>')
calling <SNR>132_Map('n', '[o<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap <script> [o<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 365: nmap <script> [o<Esc> <Nop>
line 366: exe s:Map('n', ']o<Esc>', '<Nop>')
calling <SNR>132_Map('n', ']o<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap <script> ]o<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 366: nmap <script> ]o<Esc> <Nop>
line 367: exe s:Map('n', '=s', '<Plug>(unimpaired-toggle)')
calling <SNR>132_Map('n', '=s', '<Plug>(unimpaired-toggle)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  =s <Plug>(unimpaired-toggle)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 367: nmap  =s <Plug>(unimpaired-toggle)
line 368: exe s:Map('n', '<s', '<Plug>(unimpaired-enable)')
calling <SNR>132_Map('n', '<s', '<Plug>(unimpaired-enable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  <s <Plug>(unimpaired-enable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 368: nmap  <s <Plug>(unimpaired-enable)
line 369: exe s:Map('n', '>s', '<Plug>(unimpaired-disable)')
calling <SNR>132_Map('n', '>s', '<Plug>(unimpaired-disable)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  >s <Plug>(unimpaired-disable)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 369: nmap  >s <Plug>(unimpaired-disable)
line 370: exe s:Map('n', '=s<Esc>', '<Nop>')
calling <SNR>132_Map('n', '=s<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap <script> =s<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 370: nmap <script> =s<Esc> <Nop>
line 371: exe s:Map('n', '<s<Esc>', '<Nop>')
calling <SNR>132_Map('n', '<s<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap <script> <s<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 371: nmap <script> <s<Esc> <Nop>
line 372: exe s:Map('n', '>s<Esc>', '<Nop>')
calling <SNR>132_Map('n', '>s<Esc>', '<Nop>')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap <script> >s<Esc> <Nop>'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 372: nmap <script> >s<Esc> <Nop>
line 373: 
line 374: function! s:RestorePaste() abort
line 383: 
line 384: function! s:SetupPaste() abort
line 399: 
line 400: nnoremap <silent> <Plug>unimpairedPaste :call <SID>SetupPaste()<CR>
line 401: nmap <script><silent> <Plug>(unimpaired-paste) :<C-U>call <SID>SetupPaste()<CR>
line 402: 
line 403: nmap <script><silent> <Plug>(unimpaired-enable)p  :<C-U>call <SID>SetupPaste()<CR>O
line 404: nmap <script><silent> <Plug>(unimpaired-disable)p :<C-U>call <SID>SetupPaste()<CR>o
line 405: nmap <script><silent> <Plug>(unimpaired-toggle)p  :<C-U>call <SID>SetupPaste()<CR>0C
line 406: 
line 407: " Section: Put
line 408: 
line 409: function! s:putline(how, map) abort
line 420: 
line 421: nnoremap <silent> <Plug>(unimpaired-put-above) :call <SID>putline('[p', 'above')<CR>
line 422: nnoremap <silent> <Plug>(unimpaired-put-below) :call <SID>putline(']p', 'below')<CR>
line 423: nnoremap <silent> <Plug>(unimpaired-put-above-rightward) :<C-U>call <SID>putline(v:count1 . '[p', 'Above')<CR>>']
line 424: nnoremap <silent> <Plug>(unimpaired-put-below-rightward) :<C-U>call <SID>putline(v:count1 . ']p', 'Below')<CR>>']
line 425: nnoremap <silent> <Plug>(unimpaired-put-above-leftward)  :<C-U>call <SID>putline(v:count1 . '[p', 'Above')<CR><']
line 426: nnoremap <silent> <Plug>(unimpaired-put-below-leftward)  :<C-U>call <SID>putline(v:count1 . ']p', 'Below')<CR><']
line 427: nnoremap <silent> <Plug>(unimpaired-put-above-reformat)  :<C-U>call <SID>putline(v:count1 . '[p', 'Above')<CR>=']
line 428: nnoremap <silent> <Plug>(unimpaired-put-below-reformat)  :<C-U>call <SID>putline(v:count1 . ']p', 'Below')<CR>=']
line 429: nnoremap <silent> <Plug>unimpairedPutAbove :call <SID>putline('[p', 'above')<CR>
line 430: nnoremap <silent> <Plug>unimpairedPutBelow :call <SID>putline(']p', 'below')<CR>
line 431: 
line 432: exe s:Map('n', '[p', '<Plug>(unimpaired-put-above)')
calling <SNR>132_Map('n', '[p', '<Plug>(unimpaired-put-above)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [p <Plug>(unimpaired-put-above)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 432: nmap  [p <Plug>(unimpaired-put-above)
line 433: exe s:Map('n', ']p', '<Plug>(unimpaired-put-below)')
calling <SNR>132_Map('n', ']p', '<Plug>(unimpaired-put-below)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]p <Plug>(unimpaired-put-below)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 433: nmap  ]p <Plug>(unimpaired-put-below)
line 434: exe s:Map('n', '[P', '<Plug>(unimpaired-put-above)')
calling <SNR>132_Map('n', '[P', '<Plug>(unimpaired-put-above)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [P <Plug>(unimpaired-put-above)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 434: nmap  [P <Plug>(unimpaired-put-above)
line 435: exe s:Map('n', ']P', '<Plug>(unimpaired-put-below)')
calling <SNR>132_Map('n', ']P', '<Plug>(unimpaired-put-below)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]P <Plug>(unimpaired-put-below)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 435: nmap  ]P <Plug>(unimpaired-put-below)
line 436: 
line 437: exe s:Map('n', '>P', "<Plug>(unimpaired-put-above-rightward)")
calling <SNR>132_Map('n', '>P', '<Plug>(unimpaired-put-above-rightward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  >P <Plug>(unimpaired-put-above-rightward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 437: nmap  >P <Plug>(unimpaired-put-above-rightward)
line 438: exe s:Map('n', '>p', "<Plug>(unimpaired-put-below-rightward)")
calling <SNR>132_Map('n', '>p', '<Plug>(unimpaired-put-below-rightward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  >p <Plug>(unimpaired-put-below-rightward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 438: nmap  >p <Plug>(unimpaired-put-below-rightward)
line 439: exe s:Map('n', '<P', "<Plug>(unimpaired-put-above-leftward)")
calling <SNR>132_Map('n', '<P', '<Plug>(unimpaired-put-above-leftward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  <P <Plug>(unimpaired-put-above-leftward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 439: nmap  <P <Plug>(unimpaired-put-above-leftward)
line 440: exe s:Map('n', '<p', "<Plug>(unimpaired-put-below-leftward)")
calling <SNR>132_Map('n', '<p', '<Plug>(unimpaired-put-below-leftward)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  <p <Plug>(unimpaired-put-below-leftward)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 440: nmap  <p <Plug>(unimpaired-put-below-leftward)
line 441: exe s:Map('n', '=P', "<Plug>(unimpaired-put-above-reformat)")
calling <SNR>132_Map('n', '=P', '<Plug>(unimpaired-put-above-reformat)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  =P <Plug>(unimpaired-put-above-reformat)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 441: nmap  =P <Plug>(unimpaired-put-above-reformat)
line 442: exe s:Map('n', '=p', "<Plug>(unimpaired-put-below-reformat)")
calling <SNR>132_Map('n', '=p', '<Plug>(unimpaired-put-below-reformat)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  =p <Plug>(unimpaired-put-below-reformat)'

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 442: nmap  =p <Plug>(unimpaired-put-below-reformat)
line 443: 
line 444: " Section: Encoding and decoding
line 445: 
line 446: function! s:string_encode(str) abort
line 450: 
line 451: function! s:string_decode(str) abort
line 459: 
line 460: function! s:url_encode(str) abort
line 464: 
line 465: function! s:url_decode(str) abort
line 469: 
line 470: " HTML entities {{{2
line 471: 
line 472: let g:unimpaired_html_entities = { 'nbsp':     160, 'iexcl':    161, 'cent':     162, 'pound':    163, 'curren':   164, 'yen':      165, 'brvbar':   166, 'sect':     167, 'uml':      168, 'copy':     169, 'ordf':     170, 'laquo':    171, 'not':      172, 'shy':      173, 'reg':      174, 'macr':     175, 'deg':      176, 'plusmn':   177, 'sup2':     178, 'sup3':     179, 'acute':    180, 'micro':    181, 'para':     182, 'middot':   183, 'cedil':    184, 'sup1':     185, 'ordm':     186, 'raquo':    187, 'frac14':   188, 'frac12':   189, 'frac34':   190, 'iquest':   191, 'Agrave':   192, 'Aacute':   193, 'Acirc':    194, 'Atilde':   195, 'Auml':     196, 'Aring':    197, 'AElig':    198, 'Ccedil':   199, 'Egrave':   200, 'Eacute':   201, 'Ecirc':    202, 'Euml':     203, 'Igrave':   204, 'Iacute':   205, 'Icirc':    206, 'Iuml':     207, 'ETH':      208, 'Ntilde':   209, 'Ograve':   210, 'Oacute':   211, 'Ocirc':    212, 'Otilde':   213, 'Ouml':     214, 'times':    215, 'Oslash':   216, 'Ugrave': 
line 536: 
line 537: " }}}2
line 538: 
line 539: function! s:xml_encode(str) abort
line 548: 
line 549: function! s:xml_entity_decode(str) abort
line 560: 
line 561: function! s:xml_decode(str) abort
line 565: 
line 566: function! s:Transform(algorithm,type) abort
line 589: 
line 590: function! s:TransformOpfunc(type) abort
line 593: 
line 594: function! s:TransformSetup(algorithm) abort
line 599: 
line 600: function! UnimpairedMapTransform(algorithm, key) abort
line 613: 
line 614: exe UnimpairedMapTransform('string_encode','[y')
calling UnimpairedMapTransform('string_encode', '[y')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_encode <SID>TransformSetup("string_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-encode-line) <SID>TransformSetup("string_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', '[y', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [y <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [y <Plug>(unimpaired-string-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', '[y', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  [y <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [y <Plug>(unimpaired-string-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', '[yy', '<Plug>(unimpaired-string-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [yy <Plug>(unimpaired-string-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [yy <Plug>(unimpaired-string-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 614: 
line 615: exe UnimpairedMapTransform('string_decode',']y')
calling UnimpairedMapTransform('string_decode', ']y')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_decode <SID>TransformSetup("string_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-decode-line) <SID>TransformSetup("string_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', ']y', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]y <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]y <Plug>(unimpaired-string-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', ']y', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  ]y <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]y <Plug>(unimpaired-string-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', ']yy', '<Plug>(unimpaired-string-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]yy <Plug>(unimpaired-string-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]yy <Plug>(unimpaired-string-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 615: 
line 616: exe UnimpairedMapTransform('string_encode','[C')
calling UnimpairedMapTransform('string_encode', '[C')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_encode <SID>TransformSetup("string_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_encode <SID>TransformSetup("string_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-encode) <SID>TransformSetup("string_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-encode-line) <SID>TransformSetup("string_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', '[C', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [C <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [C <Plug>(unimpaired-string-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', '[C', '<Plug>(unimpaired-string-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  [C <Plug>(unimpaired-string-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [C <Plug>(unimpaired-string-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', '[CC', '<Plug>(unimpaired-string-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [CC <Plug>(unimpaired-string-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [CC <Plug>(unimpaired-string-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 616: 
line 617: exe UnimpairedMapTransform('string_decode',']C')
calling UnimpairedMapTransform('string_decode', ']C')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_string_decode <SID>TransformSetup("string_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_string_decode <SID>TransformSetup("string_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-string-decode) <SID>TransformSetup("string_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-string-decode-line) <SID>TransformSetup("string_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', ']C', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]C <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]C <Plug>(unimpaired-string-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', ']C', '<Plug>(unimpaired-string-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  ]C <Plug>(unimpaired-string-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]C <Plug>(unimpaired-string-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', ']CC', '<Plug>(unimpaired-string-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]CC <Plug>(unimpaired-string-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]CC <Plug>(unimpaired-string-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 617: 
line 618: exe UnimpairedMapTransform('url_encode','[u')
calling UnimpairedMapTransform('url_encode', '[u')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_url_encode <SID>TransformSetup("url_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_url_encode <SID>TransformSetup("url_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_url_encode <SID>TransformSetup("url_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-url-encode) <SID>TransformSetup("url_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-url-encode) <SID>TransformSetup("url_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-url-encode-line) <SID>TransformSetup("url_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', '[u', '<Plug>(unimpaired-url-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [u <Plug>(unimpaired-url-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [u <Plug>(unimpaired-url-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', '[u', '<Plug>(unimpaired-url-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  [u <Plug>(unimpaired-url-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [u <Plug>(unimpaired-url-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', '[uu', '<Plug>(unimpaired-url-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [uu <Plug>(unimpaired-url-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [uu <Plug>(unimpaired-url-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 618: 
line 619: exe UnimpairedMapTransform('url_decode',']u')
calling UnimpairedMapTransform('url_decode', ']u')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_url_decode <SID>TransformSetup("url_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_url_decode <SID>TransformSetup("url_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_url_decode <SID>TransformSetup("url_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-url-decode) <SID>TransformSetup("url_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-url-decode) <SID>TransformSetup("url_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-url-decode-line) <SID>TransformSetup("url_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', ']u', '<Plug>(unimpaired-url-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]u <Plug>(unimpaired-url-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]u <Plug>(unimpaired-url-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', ']u', '<Plug>(unimpaired-url-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  ]u <Plug>(unimpaired-url-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]u <Plug>(unimpaired-url-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', ']uu', '<Plug>(unimpaired-url-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]uu <Plug>(unimpaired-url-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]uu <Plug>(unimpaired-url-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 619: 
line 620: exe UnimpairedMapTransform('xml_encode','[x')
calling UnimpairedMapTransform('xml_encode', '[x')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_xml_encode <SID>TransformSetup("xml_encode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_xml_encode <SID>TransformSetup("xml_encode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_xml_encode <SID>TransformSetup("xml_encode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-xml-encode) <SID>TransformSetup("xml_encode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-xml-encode) <SID>TransformSetup("xml_encode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-xml-encode-line) <SID>TransformSetup("xml_encode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', '[x', '<Plug>(unimpaired-xml-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [x <Plug>(unimpaired-xml-encode)'

continuing in UnimpairedMapTransform

line 8: nmap  [x <Plug>(unimpaired-xml-encode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', '[x', '<Plug>(unimpaired-xml-encode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  [x <Plug>(unimpaired-xml-encode)'

continuing in UnimpairedMapTransform

line 9: xmap  [x <Plug>(unimpaired-xml-encode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', '[xx', '<Plug>(unimpaired-xml-encode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  [xx <Plug>(unimpaired-xml-encode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  [xx <Plug>(unimpaired-xml-encode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 620: 
line 621: exe UnimpairedMapTransform('xml_decode',']x')
calling UnimpairedMapTransform('xml_decode', ']x')

line 1:   let name = tr(a:algorithm, '_', '-')
line 2:   exe 'nnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 2: nnoremap <expr> <Plug>unimpaired_xml_decode <SID>TransformSetup("xml_decode")
line 3:   exe 'xnoremap <expr> <Plug>unimpaired_'    .a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")'
line 3: xnoremap <expr> <Plug>unimpaired_xml_decode <SID>TransformSetup("xml_decode")
line 4:   exe 'nnoremap <expr> <Plug>unimpaired_line_'.a:algorithm.' <SID>TransformSetup("'.a:algorithm.'")."_"'
line 4: nnoremap <expr> <Plug>unimpaired_line_xml_decode <SID>TransformSetup("xml_decode")."_"
line 5:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 5: nnoremap <expr> <Plug>(unimpaired-xml-decode) <SID>TransformSetup("xml_decode")
line 6:   exe 'xnoremap <expr> <Plug>(unimpaired-' . name . ') <SID>TransformSetup("'.a:algorithm.'")'
line 6: xnoremap <expr> <Plug>(unimpaired-xml-decode) <SID>TransformSetup("xml_decode")
line 7:   exe 'nnoremap <expr> <Plug>(unimpaired-' . name . '-line) <SID>TransformSetup("'.a:algorithm.'")."_"'
line 7: nnoremap <expr> <Plug>(unimpaired-xml-decode-line) <SID>TransformSetup("xml_decode")."_"
line 8:   exe s:Map('n', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('n', ']x', '<Plug>(unimpaired-xml-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]x <Plug>(unimpaired-xml-decode)'

continuing in UnimpairedMapTransform

line 8: nmap  ]x <Plug>(unimpaired-xml-decode)
line 9:   exe s:Map('x', a:key, '<Plug>(unimpaired-' . name . ')')
calling <SNR>132_Map('x', ']x', '<Plug>(unimpaired-xml-decode)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'xmap  ]x <Plug>(unimpaired-xml-decode)'

continuing in UnimpairedMapTransform

line 9: xmap  ]x <Plug>(unimpaired-xml-decode)
line 10:   exe s:Map('n', a:key.a:key[strlen(a:key)-1], '<Plug>(unimpaired-' . name . '-line)')
calling <SNR>132_Map('n', ']xx', '<Plug>(unimpaired-xml-decode-line)')

line 1:   let [mode, head, rhs; rest] = a:000
line 2:   let flags = get(rest, 0, '') . (rhs =~# '^<Plug>' ? '' : '<script>')
line 3:   let tail = ''
line 4:   let keys = get(g:, mode.'remap', {})
line 5:   if type(keys) == type({}) && !empty(keys)
line 6:     while !empty(head) && len(keys)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           let head = '<skip>'
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if head !=# '<skip>' && empty(maparg(head.tail, mode))
line 19:     return mode.'map ' . flags . ' ' . head.tail . ' ' . rhs
<SNR>132_Map returning 'nmap  ]xx <Plug>(unimpaired-xml-decode-line)'

continuing in UnimpairedMapTransform

line 10: nmap  ]xx <Plug>(unimpaired-xml-decode-line)
line 11:   return ''
UnimpairedMapTransform returning ''

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim

line 621: 
line 622: 
line 623: " vim:set sw=2 sts=2:
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/plugin/unimpaired.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.vim"
line 1: command! -nargs=* WhichKey lua require('which-key').show_command(<f-args>)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/lua/which-key/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/sort_motion.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/sort_motion.vim"
line 1: " sort-motion.vim - Sort based on linewise motions
line 2: " Maintainer:   Chris Toomey <http://ctoomey.com/>
line 3: " Version:      0.1
line 4: " Source:       http://github.com/christoomey/vim-sort-motion
line 5: 
line 6: if exists('g:loaded_sort_motion') || &cp || v:version < 700
line 7:   finish
line 8: endif
line 9: let g:loaded_sort_motion = 1
line 10: 
line 11: nnoremap <silent> <Plug>SortMotion :<C-U>set opfunc=sort_motion#sort_motion<CR>g@
line 13: xnoremap <silent> <Plug>SortMotionVisual :<C-U>call sort_motion#sort_motion(visualmode())<CR>
line 15: nnoremap <silent> <Plug>SortLines :<C-U>call sort_motion#sort_lines()<CR>
line 17: 
line 18: if !hasmapto('<Plug>SortMotion', 'n') && maparg('gs', 'n') ==# ''
line 19:   nmap gs <Plug>SortMotion
line 20: endif
line 21: if !hasmapto('<Plug>SortMotionVisual', 'x') && maparg('gs', 'x') ==# ''
line 22:   xmap gs <Plug>SortMotionVisual
line 23: endif
line 24: if !hasmapto('<Plug>SortLines', 'n') && maparg('gss', 'n') ==# ''
line 25:   nmap gss <Plug>SortLines
line 26: endif
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/plugin/sort_motion.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim"
line 1: " fugitive.vim - A Git wrapper so awesome, it should be illegal
line 2: " Maintainer:   Tim Pope <http://tpo.pe/>
line 3: " Version:      3.7
line 4: " GetLatestVimScripts: 2975 1 :AutoInstall: fugitive.vim
line 5: 
line 6: if exists('g:loaded_fugitive')
line 7:   finish
line 8: endif
line 9: let g:loaded_fugitive = 1
line 10: 
line 11: let s:bad_git_dir = '/$\|^fugitive:'
line 12: 
line 13: " FugitiveGitDir() returns the detected Git dir for the given buffer number,
line 14: " or the current buffer if no argument is passed.  This will be an empty
line 15: " string if no Git dir was found.  Use !empty(FugitiveGitDir()) to check if
line 16: " Fugitive is active in the current buffer.  Do not rely on this for direct
line 17: " filesystem access; use FugitiveFind('.git/whatever') instead.
line 18: function! FugitiveGitDir(...) abort
line 47: 
line 48: " FugitiveReal() takes a fugitive:// URL and returns the corresponding path in
line 49: " the work tree.  This may be useful to get a cleaner path for inclusion in
line 50: " the statusline, for example.  Note that the file and its parent directories
line 51: " are not guaranteed to exist.
line 52: "
line 53: " This is intended as an abstract API to be used on any "virtual" path.  For a
line 54: " buffer named foo://bar, check for a function named FooReal(), and if it
line 55: " exists, call FooReal("foo://bar").
line 56: function! FugitiveReal(...) abort
line 70: 
line 71: " FugitiveFind() takes a Fugitive object and returns the appropriate Vim
line 72: " buffer name.  You can use this to generate Fugitive URLs ("HEAD:README") or
line 73: " to get the absolute path to a file in the Git dir (".git/HEAD"), the common
line 74: " dir (".git/config"), or the work tree (":(top)Makefile").
line 75: "
line 76: " An optional second argument provides the Git dir, or the buffer number of a
line 77: " buffer with a Git dir.  The default is the current buffer.
line 78: function! FugitiveFind(...) abort
line 85: 
line 86: " FugitiveParse() takes a fugitive:// URL and returns a 2 element list
line 87: " containing an object name ("commit:file") and the Git dir.  It's effectively
line 88: " the inverse of FugitiveFind().
line 89: function! FugitiveParse(...) abort
line 100: 
line 101: " FugitiveGitVersion() queries the version of Git in use.  Pass up to 3
line 102: " arguments to return a Boolean of whether a certain minimum version is
line 103: " available (FugitiveGitVersion(2,3,4) checks for 2.3.4 or higher) or no
line 104: " arguments to get a raw string.
line 105: function! FugitiveGitVersion(...) abort
line 108: 
line 109: " FugitiveResult() returns an object encapsulating the result of the most
line 110: " recent :Git command.  Will be empty if no result is available.  During a
line 111: " User FugitiveChanged event, this is guaranteed to correspond to the :Git
line 112: " command that triggered the event, or be empty if :Git was not the trigger.
line 113: " Pass in the name of a temp buffer to get the result object for that command
line 114: " instead.  Contains the following keys:
line 115: "
line 116: " * "args": List of command arguments, starting with the subcommand.  Will be
line 117: "   empty for usages like :Git --help.
line 118: " * "git_dir": Git dir of the relevant repository.
line 119: " * "exit_status": The integer exit code of the process.
line 120: " * "flags": Flags passed directly to Git, like -c and --help.
line 121: " * "file": Path to file containing command output.  Not guaranteed to exist,
line 122: "   so verify with filereadable() before trying to access it.
line 123: function! FugitiveResult(...) abort
line 126: 
line 127: " FugitiveExecute() runs Git with a list of arguments and returns a dictionary
line 128: " with the following keys:
line 129: "
line 130: " * "exit_status": The integer exit code of the process.
line 131: " * "stdout": The stdout produced by the process, as a list of lines.
line 132: " * "stderr": The stdout produced by the process, as a list of lines.
line 133: "
line 134: " An optional second argument provides the Git dir, or the buffer number of a
line 135: " buffer with a Git dir.  The default is the current buffer.
line 136: "
line 137: " An optional final argument is a callback Funcref, for asynchronous
line 138: " execution.
line 139: function! FugitiveExecute(args, ...) abort
line 142: 
line 143: " FugitiveShellCommand() turns an array of arguments into a Git command string
line 144: " which can be executed with functions like system() and commands like :!.
line 145: " Integer arguments will be treated as buffer numbers, and the appropriate
line 146: " relative path inserted in their place.
line 147: "
line 148: " An optional second argument provides the Git dir, or the buffer number of a
line 149: " buffer with a Git dir.  The default is the current buffer.
line 150: function! FugitiveShellCommand(...) abort
line 153: 
line 154: " FugitiveConfig() get returns an opaque structure that can be passed to other
line 155: " FugitiveConfig functions in lieu of a Git directory.  This can be faster
line 156: " when performing multiple config queries.  Do not rely on the internal
line 157: " structure of the return value as it is not guaranteed.  If you want a full
line 158: " dictionary of every config value, use FugitiveConfigGetRegexp('.*').
line 159: "
line 160: " An optional argument provides the Git dir, or the buffer number of a
line 161: " buffer with a Git dir.  The default is the current buffer.  Pass a blank
line 162: " string to limit to the global config.
line 163: function! FugitiveConfig(...) abort
line 166: 
line 167: " FugitiveConfigGet() retrieves a Git configuration value.  An optional second
line 168: " argument can be either the object returned by FugitiveConfig(), or a Git
line 169: " dir or buffer number to be passed along to FugitiveConfig().
line 170: function! FugitiveConfigGet(name, ...) abort
line 173: 
line 174: " FugitiveConfigGetAll() is like FugitiveConfigGet() but returns a list of
line 175: " all values.
line 176: function! FugitiveConfigGetAll(name, ...) abort
line 179: 
line 180: " FugitiveConfigGetRegexp() retrieves a dictionary of all configuration values
line 181: " with a key matching the given pattern.  Like git config --get-regexp, but
line 182: " using a Vim regexp.  Second argument has same semantics as
line 183: " FugitiveConfigGet().
line 184: function! FugitiveConfigGetRegexp(pattern, ...) abort
line 187: 
line 188: " FugitiveRemoteUrl() retrieves the remote URL for the given remote name,
line 189: " defaulting to the current branch's remote or "origin" if no argument is
line 190: " given.  Similar to `git remote get-url`, but also attempts to resolve HTTP
line 191: " redirects and SSH host aliases.
line 192: "
line 193: " An optional second argument provides the Git dir, or the buffer number of a
line 194: " buffer with a Git dir.  The default is the current buffer.
line 195: function! FugitiveRemoteUrl(...) abort
line 198: 
line 199: " FugitiveRemote() returns a data structure parsed from the remote URL.
line 200: " For example, for remote URL "https://me@example.com:1234/repo.git", the
line 201: " returned dictionary will contain the following:
line 202: "
line 203: " * "scheme": "https"
line 204: " * "authority": "user@example.com:1234"
line 205: " * "path": "/repo.git" (for SSH URLs this may be a relative path)
line 206: " * "pathname": "/repo.git" (always coerced to absolute path)
line 207: " * "host": "example.com:1234"
line 208: " * "hostname": "example.com"
line 209: " * "port": "1234"
line 210: " * "user": "me"
line 211: " * "path": "/repo.git"
line 212: " * "url": "https://me@example.com:1234/repo.git"
line 213: function! FugitiveRemote(...) abort
line 216: 
line 217: " FugitiveDidChange() triggers a FugitiveChanged event and reloads the summary
line 218: " buffer for the current or given buffer number's repository.  You can also
line 219: " give the result of a FugitiveExecute() and that context will be made
line 220: " available inside the FugitiveChanged() event.
line 221: "
line 222: " Passing the special argument 0 (the number zero) softly expires summary
line 223: " buffers for all repositories.  This can be used after a call to system()
line 224: " with unclear implications.
line 225: function! FugitiveDidChange(...) abort
line 228: 
line 229: " FugitiveHead() retrieves the name of the current branch. If the current HEAD
line 230: " is detached, FugitiveHead() will return the empty string, unless the
line 231: " optional argument is given, in which case the hash of the current commit
line 232: " will be truncated to the given number of characters.
line 233: "
line 234: " An optional second argument provides the Git dir, or the buffer number of a
line 235: " buffer with a Git dir.  The default is the current buffer.
line 236: function! FugitiveHead(...) abort
line 252: 
line 253: function! FugitivePath(...) abort
line 264: 
line 265: function! FugitiveStatusline(...) abort
line 271: 
line 272: let s:resolved_git_dirs = {}
line 273: function! FugitiveActualDir(...) abort
line 283: 
line 284: let s:commondirs = {}
line 285: function! FugitiveCommonDir(...) abort
line 307: 
line 308: function! FugitiveWorkTree(...) abort
line 316: 
line 317: function! FugitiveIsGitDir(...) abort
line 326: 
line 327: function! s:ReadFile(path, line_count) abort
line 337: 
line 338: let s:worktree_for_dir = {}
line 339: let s:dir_for_worktree = {}
line 340: function! s:Tree(path) abort
line 387: 
line 388: function! s:CeilingDirectories() abort
line 404: 
line 405: function! s:ResolveGitDir(git_dir) abort
line 422: 
line 423: function! FugitiveExtractGitDir(path) abort
line 471: 
line 472: function! FugitiveDetect(...) abort
line 484: 
line 485: function! FugitiveGitPath(path) abort
line 488: 
line 489: if exists('+shellslash')
line 490: 
line 491:   function! s:Slash(path) abort
line 494: 
line 495:   function! s:VimSlash(path) abort
line 498: 
line 499:   function FugitiveVimPath(path) abort
line 502: 
line 503: else
line 504: 
line 505:   function! s:Slash(path) abort
line 508: 
line 509:   function! s:VimSlash(path) abort
line 512: 
line 513:   if has('win32unix') && filereadable('/git-bash.exe')
line 514:     function! FugitiveVimPath(path) abort
line 517:   else
line 518:     function! FugitiveVimPath(path) abort
line 521:   endif
line 522: 
line 523: endif
line 524: 
line 525: function! s:ProjectionistDetect() abort
line 542: 
line 543: let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''
line 544: let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''
line 545: let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''
line 546: 
line 547: if exists(':G') != 2
line 548:   command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 549: endif
line 550: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 551: 
line 552: if exists(':Gstatus') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 553:   exe 'command! -bang -bar     -range=-1' s:addr_other 'Gstatus exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gstatus is deprecated in favor of :Git (with no arguments)"|echohl NONE'
line 555: endif
line 556: 
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 562:   endif
line 563: endfor
line 564: unlet s:cmd
line 565: 
line 566: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)"
line 566: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)
line 567: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)"
line 567: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)
line 568: 
line 569: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 569: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 570: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)'
line 570: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)
line 571: 
line 572: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'
line 572: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")
line 573: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'
line 573: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")
line 574: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'
line 574: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")
line 575: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'
line 575: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")
line 576: 
line 577: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'
line 577: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)
line 578: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'
line 578: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)
line 579: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)'
line 579: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)
line 580: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#EditComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)'
line 580: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#EditComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)
line 581: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#EditComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)'
line 581: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#EditComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)
line 582: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_tabs  '-complete=customlist,fugitive#EditComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)'
line 582: command! -bar -bang -nargs=* -range=-1 -addr=tabs -complete=customlist,fugitive#EditComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)
line 583: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gdrop    exe fugitive#DropCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 583: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gdrop    exe fugitive#DropCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 584: 
line 585: if exists(':Gr') != 2
line 586:   exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 586: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 587: endif
line 588: exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 588: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 589: 
line 590: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)'
line 590: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)
line 591: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)'
line 591: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)
line 592: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)'
line 592: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)
line 593: 
line 594: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 594: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 595: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 595: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 596: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 596: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 597: 
line 598: exe 'command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 598: command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 599: exe 'command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 599: command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 600: exe 'command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 600: command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 601: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 601: command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 602: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 602: command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 603: if exists(':Gremove') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 604:   exe 'command! -bar -bang -nargs=0 Gremove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gremove is deprecated in favor of :GRemove"|echohl NONE'
line 606: elseif exists(':Gremove') != 2 && !exists('g:fugitive_legacy_commands')
line 607:   exe 'command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"'
line 607: command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"
line 608: endif
line 609: if exists(':Gdelete') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 610:   exe 'command! -bar -bang -nargs=0 Gdelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gdelete is deprecated in favor of :GDelete"|echohl NONE'
line 612: elseif exists(':Gdelete') != 2 && !exists('g:fugitive_legacy_commands')
line 613:   exe 'command! -bar -bang -nargs=0 Gdelete echoerr ":Gdelete has been removed in favor of :GDelete"'
line 613: command! -bar -bang -nargs=0 Gdelete echoerr ":Gdelete has been removed in favor of :GDelete"
line 614: endif
line 615: if exists(':Gmove') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 616:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject Gmove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gmove is deprecated in favor of :GMove"|echohl NONE'
line 618: elseif exists(':Gmove') != 2 && !exists('g:fugitive_legacy_commands')
line 619:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove' 'echoerr ":Gmove has been removed in favor of :GMove"'
line 619: command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove echoerr ":Gmove has been removed in favor of :GMove"
line 621: endif
line 622: if exists(':Grename') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 623:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete Grename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Grename is deprecated in favor of :GRename"|echohl NONE'
line 625: elseif exists(':Grename') != 2 && !exists('g:fugitive_legacy_commands')
line 626:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename' 'echoerr ":Grename has been removed in favor of :GRename"'
line 626: command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename echoerr ":Grename has been removed in favor of :GRename"
line 628: endif
line 629: 
line 630: exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 630: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 631: if exists(':Gbrowse') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 632:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|if <bang>1|redraw!|endif|echohl WarningMSG|echomsg ":Gbrowse is deprecated in favor of :GBrowse"|echohl NONE'
line 634: elseif exists(':Gbrowse') != 2 && !exists('g:fugitive_legacy_commands')
line 635:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse' 'echoerr ":Gbrowse has been removed in favor of :GBrowse"'
line 635: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse echoerr ":Gbrowse has been removed in favor of :GBrowse"
line 637: endif
line 638: 
line 639: if v:version < 704
line 640:   finish
line 641: endif
line 642: 
line 643: let g:io_fugitive = { 'simplify': function('fugitive#simplify'), 'resolve': function('fugitive#resolve'), 'getftime': function('fugitive#getftime'), 'getfsize': function('fugitive#getfsize'), 'getftype': function('fugitive#getftype'), 'filereadable': function('fugitive#filereadable'), 'filewritable': function('fugitive#filewritable'), 'isdirectory': function('fugitive#isdirectory'), 'getfperm': function('fugitive#getfperm'), 'setfperm': function('fugitive#setfperm'), 'readfile': function('fugitive#readfile'), 'writefile': function('fugitive#writefile'), 'glob': function('fugitive#glob'), 'delete': function('fugitive#delete'), 'Real': function('FugitiveReal')}
line 659: 
line 660: augroup fugitive
line 661:   autocmd!
line 662: 
line 663:   autocmd BufNewFile,BufReadPost * if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif
line 667:   autocmd FileType           netrw if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif
line 671:   autocmd BufFilePost            *  unlet! b:git_dir
line 672: 
line 673:   autocmd FileType git call fugitive#MapCfile()
line 675:   autocmd FileType gitcommit call fugitive#MapCfile('fugitive#MessageCfile()')
line 677:   autocmd FileType git,gitcommit if &foldtext ==# 'foldtext()' |    setlocal foldtext=fugitive#Foldtext() | endif
line 681:   autocmd FileType fugitive call fugitive#MapCfile('fugitive#PorcelainCfile()')
line 683:   autocmd FileType gitrebase let &l:include = '^\%(pick\|squash\|edit\|reword\|fixup\|drop\|[pserfd]\)\>' | if &l:includeexpr !~# 'Fugitive' |   let &l:includeexpr = 'v:fname =~# ''^\x\{4,\}$'' && len(FugitiveGitDir()) ? FugitiveFind(v:fname) : ' .     (len(&l:includeexpr) ? &l:includeexpr : 'v:fname') | endif | let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|setl inex= inc='
line 690: 
line 691:   autocmd BufReadCmd index{,.lock} nested if FugitiveIsGitDir(expand('<amatch>:p:h')) |   let b:git_dir = s:Slash(expand('<amatch>:p:h')) |   exe fugitive#BufReadStatus(v:cmdbang) |   echohl WarningMSG |   echo "fugitive: Direct editing of .git/" . expand('%:t') . " is deprecated" |   echohl NONE | elseif filereadable(expand('<amatch>')) |   silent doautocmd BufReadPre |   keepalt noautocmd read <amatch> |   silent 1delete_ |   silent doautocmd BufReadPost | else |   silent doautocmd BufNewFile | endif
line 706: 
line 707:   autocmd BufReadCmd   fugitive://*          nested exe fugitive#BufReadCmd() | if &path =~# '^\.\%(,\|$\)' |   let &l:path = substitute(&path, '^\.,\=', '', '') | endif
line 711:   autocmd BufWriteCmd  fugitive://*          nested exe fugitive#BufWriteCmd()
line 712:   autocmd FileReadCmd  fugitive://*          nested exe fugitive#FileReadCmd()
line 713:   autocmd FileWriteCmd fugitive://*          nested exe fugitive#FileWriteCmd()
line 714:   if exists('##SourceCmd')
line 715:     autocmd SourceCmd     fugitive://*       nested exe fugitive#SourceCmd()
line 716:   endif
line 717: 
line 718:   autocmd User Flags call Hoist('buffer', function('FugitiveStatusline'))
line 719: 
line 720:   autocmd User ProjectionistDetect call s:ProjectionistDetect()
line 721: augroup END
line 722: 
line 723: nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
line 724: nmap <script> <Plug>fugitive: <Nop>
line 725: 
line 726: if get(g:, 'fugitive_no_maps')
line 727:   finish
line 728: endif
line 729: 
line 730: function! s:Map(mode, lhs, rhs, flags) abort
line 752: 
line 753: call s:Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')
calling <SNR>136_Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'
line 2:   let head = a:lhs
line 3:   let tail = ''
line 4:   let keys = get(g:, a:mode.'remap', {})
line 5:   if len(keys) && type(keys) == type({})
line 6:     while !empty(head)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           return
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if empty(mapcheck(head.tail, a:mode))
line 19:     exe a:mode.'map' flags head.tail a:rhs
line 20:   endif
<SNR>136_Map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim

line 754: call s:Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')
calling <SNR>136_Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'
line 2:   let head = a:lhs
line 3:   let tail = ''
line 4:   let keys = get(g:, a:mode.'remap', {})
line 5:   if len(keys) && type(keys) == type({})
line 6:     while !empty(head)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           return
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if empty(mapcheck(head.tail, a:mode))
line 19:     exe a:mode.'map' flags head.tail a:rhs
line 20:   endif
<SNR>136_Map returning #0

continuing in /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim

finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/fugitive.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/fugitive.vim"
line 1: autocmd BufReadPost *.fugitiveblame setfiletype fugitiveblame
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftdetect/fugitive.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.vim
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.vim"
line 1: lua require "nvim-ts-autotag".init()
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/cmp_zsh.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/cmp_zsh.lua"
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/plugin/cmp_zsh.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: 


--- Terminal info --- {{{
&term: screen-256color
Description: GNU Screen with 256 colors
Aliases: screen-256color
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = false
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = false
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = false
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = false
  back_color_erase          bce        = false
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = true
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = true
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 65536
  no_color_video            ncv        = -1
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = ^[[Z
  bell                      bel        = ^G
  carriage_return           cr         = ^M
  change_scroll_region      csr        = ^[[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = ^[[3g
  clear_screen              clear      = ^[[H^[[J
  clr_eol                   el         = ^[[K
  clr_eos                   ed         = ^[[J
  column_address            hpa        = ^[[%i%p1%dG
  cursor_address            cup        = ^[[%i%p1%d;%p2%dH
  cursor_down               cud1       = ^@
  cursor_home               home       = ^[[H
  cursor_invisible          civis      = ^[[?25l
  cursor_left               cub1       = ^H
  cursor_normal             cnorm      = ^[[34h^[[?25h
  cursor_right              cuf1       = ^[[C
  cursor_up                 cuu1       = ^[M
  cursor_visible            cvvis      = ^[[34l
  delete_character          dch1       = ^[[P
  delete_line               dl1        = ^[[M
  enter_alt_charset_mode    smacs      = ^N
  enter_blink_mode          blink      = ^[[5m
  enter_bold_mode           bold       = ^[[1m
  enter_ca_mode             smcup      = ^[[?1049h
  enter_dim_mode            dim        = ^[[2m
  enter_insert_mode         smir       = ^[[4h
  enter_reverse_mode        rev        = ^[[7m
  enter_standout_mode       smso       = ^[[3m
  enter_underline_mode      smul       = ^[[4m
  exit_alt_charset_mode     rmacs      = ^O
  exit_attribute_mode       sgr0       = ^[[m^O
  exit_ca_mode              rmcup      = ^[[?1049l
  exit_insert_mode          rmir       = ^[[4l
  exit_standout_mode        rmso       = ^[[23m
  exit_underline_mode       rmul       = ^[[24m
  flash_screen              flash      = ^[g
  from_status_line          fsl        = ^[\
  init_2string              is2        = ^[)0
  insert_line               il1        = ^[[L
  key_backspace             kbs        = ^H
  key_dc                    kdch1      = ^[[3~
  key_down                  kcud1      = ^[OB
  key_f1                    kf1        = ^[OP
  key_f10                   kf10       = ^[[21~
  key_f2                    kf2        = ^[OQ
  key_f3                    kf3        = ^[OR
  key_f4                    kf4        = ^[OS
  key_f5                    kf5        = ^[[15~
  key_f6                    kf6        = ^[[17~
  key_f7                    kf7        = ^[[18~
  key_f8                    kf8        = ^[[19~
  key_f9                    kf9        = ^[[20~
  key_home                  khome      = ^[[1~
  key_ic                    kich1      = ^[[2~
  key_left                  kcub1      = ^[OD
  key_npage                 knp        = ^[[6~
  key_ppage                 kpp        = ^[[5~
  key_right                 kcuf1      = ^[OC
  key_up                    kcuu1      = ^[OA
  keypad_local              rmkx       = ^[[?1l^[>
  keypad_xmit               smkx       = ^[[?1h^[=
  newline                   nel        = ^[E
  parm_dch                  dch        = ^[[%p1%dP
  parm_delete_line          dl         = ^[[%p1%dM
  parm_down_cursor          cud        = ^[[%p1%dB
  parm_ich                  ich        = ^[[%p1%d@
  parm_index                indn       = ^[[%p1%dS
  parm_insert_line          il         = ^[[%p1%dL
  parm_left_cursor          cub        = ^[[%p1%dD
  parm_right_cursor         cuf        = ^[[%p1%dC
  parm_rindex               rin        = ^[[%p1%dT
  parm_up_cursor            cuu        = ^[[%p1%dA
  reset_2string             rs2        = ^[c^[[?1000l^[[?25h
  restore_cursor            rc         = ^[8
  row_address               vpa        = ^[[%i%p1%dd
  save_cursor               sc         = ^[7
  scroll_forward            ind        = ^@
  scroll_reverse            ri         = ^[M
  set_attributes            sgr        = ^[[0%?%p6%t;1%;%?%p1%t;3%;%?%p2%t;4%;%?%p3%t;7%;%?%p4%t;5%;%?%p5%t;2%;m%?%p9%t^N%e^O%;
  set_tab                   hts        = ^[H
  tab                       ht         = 	
  to_status_line            tsl        = ^[_
  acs_chars                 acsc       = ++,,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = ^[[Z
  ena_acs                   enacs      = ^[(B^[)0
  key_end                   kend       = ^[[4~
  key_f11                   kf11       = ^[[23~
  key_f12                   kf12       = ^[[24~
  clr_bol                   el1        = ^[[1K
  user6                     u6         = ^[[%i%d;%dR
  user7                     u7         = ^[[6n
  user8                     u8         = ^[[?1;2c
  user9                     u9         = ^[[c
  orig_pair                 op         = ^[[39;49m
  key_mouse                 kmous      = ^[[M
  set_a_foreground          setaf      = ^[[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = ^[[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
Extended boolean capabilities:
  AX                        = true
  G0                        = true
Extended numeric capabilities:
  U8                        = 1
Extended string capabilities:
  E0                        = ^[(B
  S0                        = ^[(%p1%c
  ext.get_bg                = ^[]11;?^G
  ext.get_extkeys           = ^[[?u^[[c
  Ss                        = ^[[%p1%d q
  Se                        = ^[[ q
  ext.enter_altfont_mode    = ^[[11m
  setrgbf                   = ^[[38;2;%p1%d;%p2%d;%p3%dm
  setrgbb                   = ^[[48;2;%p1%d;%p2%d;%p3%dm
  ext.set_cursor_color      = ^[]12;%p1%s^G
  ext.reset_cursor_color    = ^[]112^G
  ext.save_title            = ^[[22;0t
  ext.restore_title         = ^[[23;0t
  ext.enable_lr_margin      = ^[[?69h
  ext.disable_lr_margin     = ^[[?69l
  ext.enable_bpaste         = ^[[?2004h
  ext.disable_bpaste        = ^[[?2004l
  ext.enable_focus          = ^[[?1004h
  ext.disable_focus         = ^[[?1004l
  ext.enable_mouse          = ^[[?1002h^[[?1006h
  ext.disable_mouse         = ^[[?1002l^[[?1006l
  ext.enable_mouse_move     = ^[[?1003h
  ext.disable_mouse_move    = ^[[?1003l
  ext.enable_extended_keys  = ^[[>4;2m
  ext.disable_extended_keys = ^[[>4;0m
}}}

Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 19: runtime! ftplugin/notify.vim ftplugin/notify.lua ftplugin/notify_*.vim ftplugin/notify_*.lua ftplugin/notify/*.vim ftplugin/notify/*.lua
Searching for "ftplugin/notify.vim ftplugin/notify.lua ftplugin/notify_*.vim ftplugin/notify_*.lua ftplugin/notify/*.vim ftplugin/notify/*.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/notify/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/notify/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/notify/*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify_*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify_*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify/*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/notify/*.lua"
not found in runtime path: "ftplugin/notify.vim ftplugin/notify.lua ftplugin/notify_*.vim ftplugin/notify_*.lua ftplugin/notify/*.vim ftplugin/notify/*.lua"
line 23:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 23:       endfor
line 24:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/notify.vim
Searching for "indent/notify.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/notify.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/notify.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/notify.vim"
not found in runtime path: "indent/notify.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/notify.lua
Searching for "indent/notify.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/notify.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/notify.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/notify.lua"
not found in runtime path: "indent/notify.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 22: ~/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua:11>

Searching for "parser/notify.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/notify.*"
not found in runtime path: "parser/notify.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 108: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:74>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 282: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/install.lua:559>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 283: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/notify.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/notify.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/notify.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/notify.*"
not found in runtime path: "parser/notify.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand lua COLORIZER_SETUP_HOOK()

Executing: lua COLORIZER_SETUP_HOOK()
Executing FileType Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:42>

Executing: 
Executing FileType Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand setlocal formatoptions-=c formatoptions-=r formatoptions-=o

Executing: setlocal formatoptions-=c formatoptions-=r formatoptions-=o
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 369: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 312: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 507: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#000000
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#020304
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#010203
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#040404
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#020304
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redraw
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#080a0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#050609
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#0e0e0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#080a0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#0f141c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#090d11
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#1b1b1b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#0f141c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#17202c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#0e141b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#2a2a2a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#17202c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#202c3c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#131b25
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#3a3a3a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#202c3c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#28384d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#19222f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#494a4a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#28384d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)

Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd BufDelete  <buffer=4> ++once ++nested :lua require('plenary.window').try_close(1003, true)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd BufDelete <buffer=4> ++nested ++once :lua require('plenary.window').close_related_win(1003, 1004)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd WinClosed <buffer=4> ++nested ++once :lua require('plenary.window').try_close(1004, true)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd BufDelete  <buffer=6> ++once ++nested :lua require('plenary.window').try_close(1005, true)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd BufDelete <buffer=6> ++nested ++once :lua require('plenary.window').close_related_win(1005, 1006)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd WinClosed <buffer=6> ++nested ++once :lua require('plenary.window').try_close(1006, true)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd BufDelete  <buffer=8> ++once ++nested :lua require('plenary.window').try_close(1007, true)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd BufDelete <buffer=8> ++nested ++once :lua require('plenary.window').close_related_win(1007, 1008)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: autocmd WinClosed <buffer=8> ++nested ++once :lua require('plenary.window').try_close(1008, true)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 433: ~/.config/nvim/lua/autocmds.lua:31>

calling TurnOffRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded'| return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOffRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number norelativenumber
TurnOffRelativeNumber returning #0

continuing in BufLeave Autocommands for "*"

Executing: 
Executing WinLeave Autocommands for "*"
autocommand <Lua 260: vim/_editor.lua:0>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinLeave Autocommands for "*"
autocommand setlocal nocursorline

Executing: setlocal nocursorline
Executing WinEnter Autocommands for "*"
autocommand <Lua 259: vim/_editor.lua:0>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand setlocal cursorline

Executing: setlocal cursorline
Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing: let s:tmux_is_last_pane = 0
Executing BufEnter Autocommands for "*"
autocommand <Lua 105: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 251: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
Executing: 
autocommand <Lua 253: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 316: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:89>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufEnter Autocommands for "*"
autocommand if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif

Executing: if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
Executing:    exe s:persist() | endif
calling <SNR>67_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>67_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.79181.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>67_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>67_persist returning ''

continuing in BufEnter Autocommands for "*"

Executing: 
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 429: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in BufEnter Autocommands for "*"

Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif

Executing: if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif
Executing:  call peekaboo#on() | endif
Searching for "autoload/peekaboo.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/autoload/peekaboo.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/autoload/peekaboo.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/autoload/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 0: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/autoload/peekaboo.vim"
line 1: " The MIT License (MIT)
line 2: "
line 3: " Copyright (c) 2017 Junegunn Choi
line 4: "
line 5: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 6: " of this software and associated documentation files (the "Software"), to deal
line 7: " in the Software without restriction, including without limitation the rights
line 8: " to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
line 9: " copies of the Software, and to permit persons to whom the Software is
line 10: " furnished to do so, subject to the following conditions:
line 11: "
line 12: " The above copyright notice and this permission notice shall be included in
line 13: " all copies or substantial portions of the Software.
line 14: "
line 15: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 16: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 17: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 18: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 19: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
line 20: " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
line 21: " THE SOFTWARE.
line 22: 
line 23: let s:cpo_save = &cpo
line 24: set cpo&vim
line 25: 
line 26: " Default options
line 27: let s:default_delay = 0
line 28: let s:default_window = 'vertical botright 30new'
line 29: let s:default_compact = 0
line 30: 
line 31: let s:QUOTE  = '"'
line 32: let s:REPLAY = '@'
line 33: let s:CTRL_R = "\<c-r>"
line 34: 
line 35: let s:buf_peekaboo = 0
line 36: 
line 37: " Returns true if timed out
line 38: function! s:wait_with_timeout(timeout)
line 51: 
line 52: " Checks if Peekaboo buffer is open
line 53: function! s:is_open()
line 56: 
line 57: " Closes peekaboo buffer
line 58: function! s:close()
line 63: 
line 64: " Appends macro list for the specified group to Peekaboo window
line 65: function! s:append_group(title, regs)
line 84: 
line 85: " Opens peekaboo window
line 86: function! s:open(mode)
line 109: 
line 110: " Checks if the buffer for the position is visible on screen
line 111: function! s:is_visible(pos)
line 114: 
line 115: " Triggers gv to keep visual highlight on
line 116: function! s:gv(visualmode, visible)
line 126: 
line 127: " Feeds the final key sequence
line 128: function! s:feed(count, mode, reg, rest)
line 139: 
line 140: let s:scroll = { "\<up>":     "\<c-y>", "\<down>":     "\<c-e>", "\<c-y>":    "\<c-y>", "\<c-e>":      "\<c-e>", "\<c-u>":    "\<c-u>", "\<c-d>":      "\<c-d>", "\<c-b>":    "\<c-b>", "\<c-f>":      "\<c-f>", "\<pageup>": "\<c-b>", "\<pagedown>": "\<c-f>" }
line 147: 
line 148: " Returns the position of the current buffer as a dictionary
line 149: function! s:getpos()
line 152: 
line 153: function! peekaboo#peek(count, mode, visualmode)
line 163: 
line 164: function! peekaboo#aboo()
line 244: 
line 245: let &cpo = s:cpo_save
line 246: unlet s:cpo_save
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/autoload/peekaboo.vim
continuing in BufEnter Autocommands for "*"
calling peekaboo#on()

line 1:   if get(b:, 'peekaboo_on', 0)
line 2:     return
line 3:   endif
line 4: 
line 5:   let prefix = get(g:, 'peekaboo_prefix', '')
line 6:   let ins_prefix = get(g:, 'peekaboo_ins_prefix', '')
line 7:   execute 'nmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  0)'
line 7: nmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  0)
line 8:   execute 'xmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  1)'
line 8: xmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  1)
line 9:   execute 'nmap <buffer> <expr> '.prefix.    '@     peekaboo#peek(v:count1, ''@'', 0)'
line 9: nmap <buffer> <expr> @     peekaboo#peek(v:count1, '@', 0)
line 10:   execute 'imap <buffer> <expr> '.ins_prefix.'<c-r> peekaboo#peek(1, "\<c-r>",  0)'
line 10: imap <buffer> <expr> <c-r> peekaboo#peek(1, "\<c-r>",  0)
line 11:   let b:peekaboo_on = 1
line 12:   return ''
peekaboo#on returning ''

continuing in BufEnter Autocommands for "*"

Executing:  endif
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 19: runtime! ftplugin/TelescopePrompt.vim ftplugin/TelescopePrompt.lua ftplugin/TelescopePrompt_*.vim ftplugin/TelescopePrompt_*.lua ftplugin/TelescopePrompt/*.vim ftplugin/TelescopePrompt/*.lua
Searching for "ftplugin/TelescopePrompt.vim ftplugin/TelescopePrompt.lua ftplugin/TelescopePrompt_*.vim ftplugin/TelescopePrompt_*.lua ftplugin/TelescopePrompt/*.vim ftplugin/TelescopePrompt/*.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 19: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopePrompt/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopePrompt.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopePrompt.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopePrompt_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopePrompt_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopePrompt/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopePrompt/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopePrompt.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopePrompt.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopePrompt_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopePrompt_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopePrompt/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopePrompt/*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt_*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt_*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt/*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt/*.lua"
line 23:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 23:       endfor
line 24:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/TelescopePrompt.vim
Searching for "indent/TelescopePrompt.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/TelescopePrompt.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/TelescopePrompt.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopePrompt.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/TelescopePrompt.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/TelescopePrompt.vim"
not found in runtime path: "indent/TelescopePrompt.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/TelescopePrompt.lua
Searching for "indent/TelescopePrompt.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/TelescopePrompt.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/TelescopePrompt.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopePrompt.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/TelescopePrompt.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/TelescopePrompt.lua"
not found in runtime path: "indent/TelescopePrompt.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 22: ~/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua:11>

Searching for "parser/TelescopePrompt.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/TelescopePrompt.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/TelescopePrompt.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/TelescopePrompt.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/TelescopePrompt.*"
not found in runtime path: "parser/TelescopePrompt.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 108: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:74>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 282: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/install.lua:559>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 283: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/TelescopePrompt.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/TelescopePrompt.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/TelescopePrompt.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/TelescopePrompt.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/TelescopePrompt.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/TelescopePrompt.*"
not found in runtime path: "parser/TelescopePrompt.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand lua COLORIZER_SETUP_HOOK()

Executing: lua COLORIZER_SETUP_HOOK()
Executing FileType Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:42>

Executing: 
Executing FileType Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand setlocal formatoptions-=c formatoptions-=r formatoptions-=o

Executing: setlocal formatoptions-=c formatoptions-=r formatoptions-=o
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 369: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 312: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 507: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 19: runtime! ftplugin/TelescopeResults.vim ftplugin/TelescopeResults.lua ftplugin/TelescopeResults_*.vim ftplugin/TelescopeResults_*.lua ftplugin/TelescopeResults/*.vim ftplugin/TelescopeResults/*.lua
Searching for "ftplugin/TelescopeResults.vim ftplugin/TelescopeResults.lua ftplugin/TelescopeResults_*.vim ftplugin/TelescopeResults_*.lua ftplugin/TelescopeResults/*.vim ftplugin/TelescopeResults/*.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 19: sourcing "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
finished sourcing /Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/TelescopeResults/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopeResults.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopeResults.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopeResults_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopeResults_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopeResults/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/TelescopeResults/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopeResults.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopeResults.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopeResults_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopeResults_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopeResults/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/TelescopeResults/*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults_*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults_*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults/*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults/*.lua"
line 23:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 23:       endfor
line 24:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/TelescopeResults.vim
Searching for "indent/TelescopeResults.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/TelescopeResults.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/TelescopeResults.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopeResults.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/TelescopeResults.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/TelescopeResults.vim"
not found in runtime path: "indent/TelescopeResults.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/TelescopeResults.lua
Searching for "indent/TelescopeResults.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/TelescopeResults.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/TelescopeResults.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopeResults.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/TelescopeResults.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/TelescopeResults.lua"
not found in runtime path: "indent/TelescopeResults.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 22: ~/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua:11>

Searching for "parser/TelescopeResults.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/TelescopeResults.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/TelescopeResults.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/TelescopeResults.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/TelescopeResults.*"
not found in runtime path: "parser/TelescopeResults.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 108: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:74>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 282: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/install.lua:559>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 283: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/TelescopeResults.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/TelescopeResults.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/TelescopeResults.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/TelescopeResults.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/TelescopeResults.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/TelescopeResults.*"
not found in runtime path: "parser/TelescopeResults.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand lua COLORIZER_SETUP_HOOK()

Executing: lua COLORIZER_SETUP_HOOK()
Executing FileType Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:42>

Executing: 
Executing FileType Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand setlocal formatoptions-=c formatoptions-=r formatoptions-=o

Executing: setlocal formatoptions-=c formatoptions-=r formatoptions-=o
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 369: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 312: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 507: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 66: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand <Lua 297: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing BufModifiedSet Autocommands for "*"
autocommand <Lua 250: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:194>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 386: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 424: ~/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/init.lua:101>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 435: ~/.config/nvim/lua/autocmds.lua:31>

calling TurnOffRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded'| return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOffRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number norelativenumber
TurnOffRelativeNumber returning #0

continuing in InsertEnter Autocommands for "*"

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing ModeChanged Autocommands for "*"
autocommand <Lua 300: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"
-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#31435c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#1e2938
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#585959
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#31435c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename guifg=#dfdfe0 guibg=#c94f6d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_filename guifg=#719cd6 guibg=#c94f6d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconDefault_normal guifg=#6d8086 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconDefault_insert guifg=#6d8086 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconDefault_visual guifg=#6d8086 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconDefault_replace guifg=#6d8086 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconDefault_command guifg=#6d8086 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconDefault_terminal guifg=#6d8086 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconDefault_inactive guifg=#6d8086 guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_insert_to_lualine_c_filename guifg=#81b29a guibg=#c94f6d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_insert_to_lualine_c_normal guifg=#81b29a guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
auto-removing autocommand: BufDelete <buffer=6>
auto-removing autocommand: WinClosed <buffer=6>
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufFilePost Autocommands for "*"
autocommand <Lua 413: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing BufFilePost Autocommands for "*"
autocommand unlet! b:git_dir

Executing: unlet! b:git_dir
Executing TermOpen Autocommands for "*"
autocommand <Lua 265: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:339>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing TermClose Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:344>

Executing: 
Executing: hi NotifyINFOIcon3 guifg=#384e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#223041
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#666767
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#384e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#405878
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#27364a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#737474
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#405878
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#466184
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#2b3b51
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#7f8080
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#466184
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#4c698f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#2e4058
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#898a8b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#4c698f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#517099
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#31455e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#939394
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#517099
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#5576a2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#344963
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#9b9c9c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#5576a2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#597ba9
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#374c68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#a2a3a4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#597ba9
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#5d80b0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#394f6c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#a8a9aa
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#5d80b0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6084b5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3a516f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#aeafaf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6084b5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6288ba
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3c5472
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#b2b3b4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6288ba
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#658bbe
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3d5575
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#b6b7b8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#658bbe
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#668dc2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#3f5777
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#babbbc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#668dc2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6890c5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#405879
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#bdbebf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6890c5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#405a7a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#bfc0c1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6b93ca
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#415b7c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c2c2c3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6b93ca
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6c95cc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#425b7d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c3c4c5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6c95cc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6d96ce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#425c7e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c5c6c7
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6d96ce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6d97cf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#435d7f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c6c7c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6d97cf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6e98d0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#435d7f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c7c8c9
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6e98d0
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6e98d1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#435e80
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c8c9ca
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6e98d1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6f99d2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445e80
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#c9cacb
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6f99d2
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6f99d3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445e81
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cacbcc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6f99d3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#6f9ad3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f81
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cacbcc
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6f9ad3
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#709ad4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cbcccd
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709ad4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cbcccd
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#445f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cbcccd
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd4
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#455f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#455f82
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456082
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#709bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719bd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cccdce
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing WinClosed Autocommands for "*"
autocommand <Lua 268: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 268: vim/_editor.lua:0>

Executing: 
Executing WinClosed Autocommands for "<buffer=4>"
autocommand :lua require('plenary.window').try_close(1004, true)

Executing: :lua require('plenary.window').try_close(1004, true)
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
auto-removing autocommand: BufDelete <buffer=4>
Executing WinClosed Autocommands for "*"
autocommand <Lua 268: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 268: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 433: ~/.config/nvim/lua/autocmds.lua:31>

calling TurnOffRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded'| return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOffRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number norelativenumber
TurnOffRelativeNumber returning #0

continuing in BufLeave Autocommands for "*"

Executing: 
Executing WinLeave Autocommands for "*"
autocommand <Lua 260: vim/_editor.lua:0>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinLeave Autocommands for "*"
autocommand setlocal nocursorline

Executing: setlocal nocursorline
Executing WinClosed Autocommands for "*"
autocommand <Lua 268: vim/_editor.lua:0>

Executing: 
Executing WinClosed Autocommands for "<buffer=8>"
autocommand :lua require('plenary.window').try_close(1008, true)

Executing: :lua require('plenary.window').try_close(1008, true)
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
auto-removing autocommand: BufDelete <buffer=8>
auto-removing autocommand: VimResized <buffer=8>
Executing WinEnter Autocommands for "*"
autocommand <Lua 259: vim/_editor.lua:0>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand setlocal cursorline

Executing: setlocal cursorline
Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing: let s:tmux_is_last_pane = 0
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 105: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 251: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
Executing: 
autocommand <Lua 253: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 316: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:89>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufEnter Autocommands for "*"
autocommand if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif

Executing: if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
Executing:    exe s:persist() | endif
calling <SNR>67_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>67_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.79181.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>67_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>67_persist returning ''

continuing in BufEnter Autocommands for "*"

Executing: 
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 429: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in BufEnter Autocommands for "*"

Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif

Executing: if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif
Executing:  call peekaboo#on() | endif
calling peekaboo#on()

line 1:   if get(b:, 'peekaboo_on', 0)
line 2:     return
line 3:   endif
line 4: 
line 5:   let prefix = get(g:, 'peekaboo_prefix', '')
line 6:   let ins_prefix = get(g:, 'peekaboo_ins_prefix', '')
line 7:   execute 'nmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  0)'
line 7: nmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  0)
line 8:   execute 'xmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  1)'
line 8: xmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  1)
line 9:   execute 'nmap <buffer> <expr> '.prefix.    '@     peekaboo#peek(v:count1, ''@'', 0)'
line 9: nmap <buffer> <expr> @     peekaboo#peek(v:count1, '@', 0)
line 10:   execute 'imap <buffer> <expr> '.ins_prefix.'<c-r> peekaboo#peek(1, "\<c-r>",  0)'
line 10: imap <buffer> <expr> <c-r> peekaboo#peek(1, "\<c-r>",  0)
line 11:   let b:peekaboo_on = 1
line 12:   return ''
peekaboo#on returning ''

continuing in BufEnter Autocommands for "*"

Executing:  endif
Executing: edit nvim/lua/config/nvim-lspconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufDelete Autocommands for "*"
autocommand <Lua 107: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:64>

Executing: 
Executing BufDelete Autocommands for "*"
autocommand <Lua 247: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufReadPre Autocommands for "*"
autocommand setlocal cursorline

Executing: setlocal cursorline
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Reading ShaDa file "/Users/christopher.griffith/.local/state/nvim/shada/main.shada" marks
Reading undo file: /Users/christopher.griffith/.local/state/nvim/undo/%Users%christopher.griffith%projects%dotfiles%nvim%lua%config%nvim-lspconfig.lua
Executing BufReadPost Autocommands for "*"
autocommand <Lua 12: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/filetype.lua:10>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 19: runtime! ftplugin/lua.vim ftplugin/lua.lua ftplugin/lua_*.vim ftplugin/lua_*.lua ftplugin/lua/*.vim ftplugin/lua/*.lua
Searching for "ftplugin/lua.vim ftplugin/lua.lua ftplugin/lua_*.vim ftplugin/lua_*.lua ftplugin/lua/*.vim ftplugin/lua/*.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/lua/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 19: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua.vim"
line 1: " Vim filetype plugin file.
line 2: " Language:^I^ILua
line 3: " Maintainer:^I^IDoug Kearns <dougkearns@gmail.com>
line 4: " Previous Maintainer:^IMax Ischenko <mfi@ukr.net>
line 5: " Contributor:^I^IDorai Sitaram <ds26@gte.com>
line 6: "^I^I^IC.D. MacEachern <craig.daniel.maceachern@gmail.com>
line 7: " Last Change:^I^I2022 Nov 19
line 8: 
line 9: if exists("b:did_ftplugin")
line 10:   finish
line 11: endif
line 12: let b:did_ftplugin = 1
line 13: 
line 14: let s:cpo_save = &cpo
line 15: set cpo&vim
line 16: 
line 17: setlocal comments=:--
line 18: setlocal commentstring=--\ %s
line 19: setlocal formatoptions-=t formatoptions+=croql
line 20: 
line 21: let &l:define = '\<function\|\<local\%(\s\+function\)\='
line 22: 
line 23: " TODO: handle init.lua
line 24: setlocal includeexpr=tr(v:fname,'.','/')
line 25: setlocal suffixesadd=.lua
line 26: 
line 27: let b:undo_ftplugin = "setlocal cms< com< def< fo< inex< sua<"
line 28: 
line 29: if exists("loaded_matchit") && !exists("b:match_words")
line 30:   let b:match_ignorecase = 0
line 31:   let b:match_words = '\<\%(do\|function\|if\)\>:' .. '\<\%(return\|else\|elseif\)\>:' .. '\<end\>,' .. '\<repeat\>:\<until\>,' .. '\%(--\)\=\[\(=*\)\[:]\1]'
line 37:   let b:undo_ftplugin ..= " | unlet! b:match_words b:match_ignorecase"
line 38: endif
line 39: 
line 40: if (has("gui_win32") || has("gui_gtk")) && !exists("b:browsefilter")
line 41:   let b:browsefilter = "Lua Source Files (*.lua)\t*.lua\n" ..^I       "All Files (*.*)\t*.*\n"
line 43:   let b:undo_ftplugin ..= " | unlet! b:browsefilter"
line 44: endif
line 45: 
line 46: let &cpo = s:cpo_save
line 47: unlet s:cpo_save
line 48: 
line 49: " vim: nowrap sw=2 sts=2 ts=8 noet:
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua.vim
continuing in <SNR>1_LoadFTPlugin
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/lua/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/lua.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/lua.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/lua_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/lua_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/lua/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/lua/*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/lua.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/lua.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/lua_*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/lua_*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/lua/*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/lua/*.lua"
line 23:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 23:       endfor
line 24:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/lua.vim
Searching for "indent/lua.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/lua.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/lua.vim"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/)
chdir(/Users/christopher.griffith/projects/dotfiles)
line 14: sourcing "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/lua.vim"
line 1: " Vim indent file
line 2: " Language:^ILua script
line 3: " Maintainer:^IMarcus Aurelius Farias <marcus.cf 'at' bol.com.br>
line 4: " First Author:^IMax Ischenko <mfi 'at' ukr.net>
line 5: " Last Change:^I2017 Jun 13
line 6: "^I^I2022 Sep 07: b:undo_indent added by Doug Kearns
line 7: 
line 8: " Only load this indent file when no other was loaded.
line 9: if exists("b:did_indent")
line 10:   finish
line 11: endif
line 12: let b:did_indent = 1
line 13: 
line 14: setlocal indentexpr=GetLuaIndent()
line 15: 
line 16: " To make Vim call GetLuaIndent() when it finds '\s*end' or '\s*until'
line 17: " on the current line ('else' is default and includes 'elseif').
line 18: setlocal indentkeys+=0=end,0=until
line 19: 
line 20: setlocal autoindent
line 21: 
line 22: let b:undo_indent = "setlocal autoindent< indentexpr< indentkeys<"
line 23: 
line 24: " Only define the function once.
line 25: if exists("*GetLuaIndent")
line 26:   finish
line 27: endif
line 28: 
line 29: function! GetLuaIndent()
finished sourcing /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/lua.vim
continuing in <SNR>2_LoadIndent
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/lua.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/lua.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/lua.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/lua.lua
Searching for "indent/lua.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/lua.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/lua.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/lua.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/lua.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/lua.lua"
not found in runtime path: "indent/lua.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 22: ~/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua:11>

Searching for "parser/lua.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/lua.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/lua.*"
Searching for "queries/lua/injections.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/injections.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/injections.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/injections.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/injections.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/injections.scm"
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 108: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:74>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing FileType Autocommands for "lua"
autocommand <Lua 188: ~/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/configs.lua:103>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 282: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/install.lua:559>

Searching for "parser/lua.so" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/lua.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/lua.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/lua.so"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/lua.so"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/lua.so"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 283: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/lua/highlights.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/highlights.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/highlights.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/highlights.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/highlights.scm"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>108_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 26:         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>108_SynSet returning #0

continuing in Syntax Autocommands for "*"

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/treesitter/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing FileType Autocommands for "*"
autocommand lua COLORIZER_SETUP_HOOK()

Executing: lua COLORIZER_SETUP_HOOK()
Executing FileType Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:42>

Executing: 
Executing FileType Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand setlocal formatoptions-=c formatoptions-=r formatoptions-=o

Executing: setlocal formatoptions-=c formatoptions-=r formatoptions-=o
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 369: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/lua/textobjects.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/textobjects.scm"
Searching for "queries/lua/textobjects.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/textobjects.scm"
Searching for "queries/lua/textobjects.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/textobjects.scm"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/lua/nvim-treesitter/textobjects/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/lua/nvim-treesitter/textobjects/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Searching for "queries/lua/textobjects.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/textobjects.scm"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/lua/nvim-treesitter/textobjects/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/lua/nvim-treesitter/textobjects/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Searching for "queries/lua/textobjects.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/textobjects.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/textobjects.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 312: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/lua/locals.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/locals.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/locals.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/locals.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/locals.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/locals.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 507: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing: 
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand <Lua 246: vim/_editor.lua:0>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 412: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand setlocal foldmethod=marker

Executing: setlocal foldmethod=marker
Executing BufReadPost Autocommands for "*"
autocommand <Lua 197: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns.lua:124>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing BufReadPost Autocommands for "*"
autocommand call s:detect(expand("<amatch>:p"))

Executing: call s:detect(expand("<amatch>:p"))
calling <SNR>118_detect('/Users/christopher.griffith/projects/...les/nvim/lua/config/nvim-lspconfig.lua')

line 1: ^Iif exists("b:node_root") | return | endif
line 1:  return | endif
line 1:  endif
line 2: ^Ilet dir = a:dir
line 3: 
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
line 11:  endif
line 12: ^I^Ilet dir = parent
line 13: ^Iendwhile
line 4: ^Iwhile 1
line 5: ^I^Ilet is_node = 0
line 6: ^I^Ilet is_node = is_node || filereadable(dir . "/package.json")
line 7: ^I^Ilet is_node = is_node || isdirectory(dir . "/node_modules")
line 8: ^I^Iif is_node | return node#initialize(dir) | endif
line 8:  return node#initialize(dir) | endif
line 8:  endif
line 9: 
line 10: ^I^Ilet parent = fnamemodify(dir, ":h")
line 11: ^I^Iif parent == dir | return | endif
line 11:  return | endif
<SNR>118_detect returning #0

continuing in BufReadPost Autocommands for "*"

Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && s:isNode() | setf javascript | en

Executing: if !did_filetype() && s:isNode() | setf javascript | en
Executing:  setf javascript | en
Executing:  en
Executing BufReadPost Autocommands for "*"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing: if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif
Executing:    unlet b:git_dir | endif
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand <Lua 105: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 251: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
autocommand <Lua 253: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 316: ~/.local/share/nvim/lazy/telescope-file-browser.nvim/lua/telescope/_extensions/file_browser/config.lua:89>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufEnter Autocommands for "*"
autocommand if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif

Executing: if !get(g:, 'obsession_no_bufenter') |   exe s:persist() | endif
Executing:    exe s:persist() | endif
calling <SNR>67_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>67_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.79181.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>67_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>67_persist returning ''

continuing in BufEnter Autocommands for "*"

Executing: 
Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 429: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in BufEnter Autocommands for "*"

Executing: 
Executing BufEnter Autocommands for "*"
autocommand if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif

Executing: if !exists('*getcmdwintype') || empty(getcmdwintype()) | call peekaboo#on() | endif
Executing:  call peekaboo#on() | endif
calling peekaboo#on()

line 1:   if get(b:, 'peekaboo_on', 0)
line 2:     return
line 3:   endif
line 4: 
line 5:   let prefix = get(g:, 'peekaboo_prefix', '')
line 6:   let ins_prefix = get(g:, 'peekaboo_ins_prefix', '')
line 7:   execute 'nmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  0)'
line 7: nmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  0)
line 8:   execute 'xmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  1)'
line 8: xmap <buffer> <expr> "     peekaboo#peek(v:count1, '"',  1)
line 9:   execute 'nmap <buffer> <expr> '.prefix.    '@     peekaboo#peek(v:count1, ''@'', 0)'
line 9: nmap <buffer> <expr> @     peekaboo#peek(v:count1, '@', 0)
line 10:   execute 'imap <buffer> <expr> '.ins_prefix.'<c-r> peekaboo#peek(1, "\<c-r>",  0)'
line 10: imap <buffer> <expr> <c-r> peekaboo#peek(1, "\<c-r>",  0)
line 11:   let b:peekaboo_on = 1
line 12:   return ''
peekaboo#on returning ''

continuing in BufEnter Autocommands for "*"

Executing:  endif
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 106: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:60>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 254: vim/_editor.lua:0>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand lua require("trouble").action("on_win_enter")

Executing: lua require("trouble").action("on_win_enter")
Executing BufWinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in BufWinEnter Autocommands for "*"

Executing: unlet! b:keymap_name
Executing ModeChanged Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing ModeChanged Autocommands for "*"
autocommand <Lua 300: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 

Executing InsertLeave Autocommands for "*"
autocommand <Lua 356: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:48>

Executing: 
Executing InsertLeave Autocommands for "*"
autocommand <Lua 391: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing InsertLeave Autocommands for "*"
autocommand <Lua 432: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in InsertLeave Autocommands for "*"

Executing: 
Searching for "queries/lua/highlights.scm" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/queries/lua/highlights.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/queries/lua/highlights.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/highlights.scm"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.config/nvim/after/queries/lua/highlights.scm"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/queries/lua/highlights.scm"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_filename guifg=#719cd6 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_insert_to_lualine_c_filename guifg=#81b29a guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconLua_normal guifg=#51a0cf guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconLua_insert guifg=#51a0cf guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconLua_visual guifg=#51a0cf guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconLua_replace guifg=#51a0cf guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconLua_command guifg=#51a0cf guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconLua_terminal guifg=#51a0cf guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_x_filetype_DevIconLua_inactive guifg=#51a0cf guibg=None gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing LspAttach Autocommands for "*"
autocommand <Lua 345: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:95>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 347: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/init.lua:187>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 443: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/signature.lua:56>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing LspAttach Autocommands for "*"
autocommand <Lua 345: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:95>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 347: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/init.lua:187>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 443: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/signature.lua:56>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/lua/noice/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.config/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#456083
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#cdcecf
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#719cd6
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#405a7a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#bfc0c1
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#6992c8
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#5a7caa
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#374c68
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#a3a4a5
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#5a7caa
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#496489
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#2c3e54
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#848485
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#496489
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#394e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#233042
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#676768
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#394e6b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#2b3b52
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#1a2532
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#4e4e4f
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#2b3b52
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#202c3d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#141b25
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#3a3b3b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#202c3d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#18212d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#0e141b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#2b2b2b
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#18212d
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#111821
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#0b0f14
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#1f1f20
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#111821
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#0c1118
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#080b0e
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#171717
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#0c1118
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#090c11
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#05080a
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#101010
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#090c11
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing: hi NotifyINFOIcon3 guifg=#06090c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#040507
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#0b0c0c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#06090c
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOIcon3 guifg=#040608
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBorder3 guifg=#030405
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOBody3 guifg=#080808
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: hi NotifyINFOTitle3 guifg=#040608
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinClosed Autocommands for "*"
autocommand <Lua 268: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWipeout Autocommands for "*"
autocommand <Lua 248: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing InsertEnter Autocommands for "*"
autocommand <Lua 386: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 424: ~/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/init.lua:101>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 435: ~/.config/nvim/lua/autocmds.lua:31>

calling TurnOffRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded'| return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOffRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number norelativenumber
TurnOffRelativeNumber returning #0

continuing in InsertEnter Autocommands for "*"

Executing: 
Executing InsertEnter Autocommands for "<buffer=1>"
autocommand <Lua 595: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing ModeChanged Autocommands for "*"
autocommand <Lua 300: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: -- INSERT --

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Executing BufModifiedSet Autocommands for "*"
autocommand <Lua 250: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:194>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: redrawtabline
Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename guifg=#dfdfe0 guibg=#c94f6d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_filename guifg=#719cd6 guibg=#c94f6d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_insert_to_lualine_c_filename guifg=#81b29a guibg=#c94f6d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 19: runtime! ftplugin/cmp_menu.vim ftplugin/cmp_menu.lua ftplugin/cmp_menu_*.vim ftplugin/cmp_menu_*.lua ftplugin/cmp_menu/*.vim ftplugin/cmp_menu/*.lua
Searching for "ftplugin/cmp_menu.vim ftplugin/cmp_menu.lua ftplugin/cmp_menu_*.vim ftplugin/cmp_menu_*.lua ftplugin/cmp_menu/*.vim ftplugin/cmp_menu/*.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/ftplugin/cmp_menu/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/cmp_menu.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/cmp_menu.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/cmp_menu_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/cmp_menu_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/cmp_menu/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin/cmp_menu/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/cmp_menu.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/cmp_menu.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/cmp_menu_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/cmp_menu_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/cmp_menu/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/cmp_menu/*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/cmp_menu.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/cmp_menu.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/cmp_menu_*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/cmp_menu_*.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/cmp_menu/*.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/ftplugin/cmp_menu/*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/cmp_menu_*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/cmp_menu_*.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/cmp_menu/*.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/ftplugin/cmp_menu/*.lua"
not found in runtime path: "ftplugin/cmp_menu.vim ftplugin/cmp_menu.lua ftplugin/cmp_menu_*.vim ftplugin/cmp_menu_*.lua ftplugin/cmp_menu/*.vim ftplugin/cmp_menu/*.lua"
line 23:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
line 23:       endfor
line 24:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/cmp_menu.vim
Searching for "indent/cmp_menu.vim" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/cmp_menu.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/cmp_menu.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/cmp_menu.vim"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/cmp_menu.vim"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/cmp_menu.vim"
not found in runtime path: "indent/cmp_menu.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/cmp_menu.lua
Searching for "indent/cmp_menu.lua" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/indent/cmp_menu.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent/cmp_menu.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/indent/cmp_menu.lua"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.config/nvim/after/indent/cmp_menu.lua"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/indent/cmp_menu.lua"
not found in runtime path: "indent/cmp_menu.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 22: ~/.local/share/nvim/lazy/nvim-ts-context-commentstring/plugin/ts_context_commentstring.lua:11>

Searching for "parser/cmp_menu.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/cmp_menu.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/cmp_menu.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/cmp_menu.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/cmp_menu.*"
not found in runtime path: "parser/cmp_menu.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 108: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:74>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/lua/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 282: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/install.lua:559>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 283: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/cmp_menu.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/cmp_menu.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/cmp_menu.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/cmp_menu.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/cmp_menu.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/cmp_menu.*"
not found in runtime path: "parser/cmp_menu.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand lua COLORIZER_SETUP_HOOK()

Executing: lua COLORIZER_SETUP_HOOK()
Executing FileType Autocommands for "*"
autocommand <Lua 355: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:42>

Executing: 
Executing FileType Autocommands for "*"
autocommand lua require('transparent').clear()

Executing: lua require('transparent').clear()
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand setlocal formatoptions-=c formatoptions-=r formatoptions-=o

Executing: setlocal formatoptions-=c formatoptions-=r formatoptions-=o
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 369: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 312: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 507: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufNew Autocommands for "*"
autocommand <Lua 252: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:205>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinClosed Autocommands for "*"
autocommand <Lua 268: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 64: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 390: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 303: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 67: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "<buffer=1>"
autocommand <Lua 598: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/util/init.lua:91>

Executing: 
Searching for "parser/luadoc.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/luadoc.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/luadoc.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/luadoc.*"
not found in runtime path: "parser/luadoc.*"
Searching for "parser/comment.*" in runtime path
Searching for "/Users/christopher.griffith/.config/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/site/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-repeat/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-autotag/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-fugitive/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-sort-motion/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-unimpaired/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vimwiki/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-zoomwin/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/fuzzy.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-peekaboo/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-illuminate/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lsp-ts-utils/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-node/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-tmux-navigator/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/vim-obsession/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/transparent.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/bufdelete.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspkind-nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/null-ls.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lspsaga.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/Comment.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-import.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-node-modules.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-file-browser.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope-undo.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-colorizer.lua/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/gitsigns.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nightfox.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-lspconfig/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mason.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-autopairs/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.surround/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/mini.indentscope/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/wilder.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/glance.nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/nvim-ts-context-commentstring/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/opt/homebrew/Cellar/neovim/0.9.5/lib/nvim/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-zsh/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-fuzzy-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp-document-symbol/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-nvim-lua/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.config/nvim/after/parser/comment.*"
Searching for "/Users/christopher.griffith/.local/state/nvim/lazy/readme/parser/comment.*"
not found in runtime path: "parser/comment.*"
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing WinScrolled Autocommands for "*"
autocommand <Lua 69: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:669>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"
-- INSERT --
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 262: vim/_editor.lua:0>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing ModeChanged Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing ModeChanged Autocommands for "*"
autocommand <Lua 300: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 

Executing InsertLeave Autocommands for "*"
autocommand <Lua 356: ~/.local/share/nvim/lazy/null-ls.nvim/lua/null-ls/init.lua:48>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
Executing InsertLeave Autocommands for "*"
autocommand <Lua 391: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertLeave Autocommands for "*"
autocommand <Lua 432: ~/.config/nvim/lua/autocmds.lua:26>

calling TurnOnRelativeNumber()

line 1:     if IsExcludedFileType() =~ 'excluded' | return | endif
calling IsExcludedFileType()

line 1:     if &ft =~ 'NvimTree'
line 2:         return 'excluded'
line 3:     elseif &ft =~ 'sagarename'
line 4:         return 'excluded'
line 5:     endif
IsExcludedFileType returning #0

continuing in TurnOnRelativeNumber

line 1:  return | endif
line 1:  endif
line 2:     set number relativenumber
TurnOnRelativeNumber returning #0

continuing in InsertLeave Autocommands for "*"

Executing: 
Executing InsertLeave Autocommands for "<buffer=1>"
autocommand <Lua 594: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp/semantic_tokens.lua:211>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 63: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>74_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>74_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>74_Remove_Matches returning #0

continuing in <SNR>74_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
<SNR>74_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 578: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:114>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing ModeChanged Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:663>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing ModeChanged Autocommands for "*"
autocommand <Lua 300: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufWritePre Autocommands for "*"
autocommand <Lua 436: ~/.config/nvim/lua/autocmds.lua:41>

calling StripTrailingWhitespace()

line 1:     if &ft =~ 'markdown' | return | endif
line 1:  return | endif
line 1:  endif
line 2:     %s/\s\+$//e
StripTrailingWhitespace returning #0

continuing in BufWritePre Autocommands for "*"

Executing: 
Executing BufWritePre Autocommands for "<buffer=1>"
autocommand <Lua 546: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp.lua:1652>

Executing: 
Executing BufWritePre Autocommands for "<buffer=1>"
autocommand <Lua 568: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/attach.lua:368>

Executing: 
           "nvim/lua/config/nvim-lspconfig.lua" 
"nvim/lua/config/nvim-lspconfig.lua" 125L, 3245B written
Writing undo file: /Users/christopher.griffith/.local/state/nvim/undo/%Users%christopher.griffith%projects%dotfiles%nvim%lua%config%nvim-lspconfig.lua
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufWritePost Autocommands for "*"
autocommand <Lua 256: vim/_editor.lua:0>

Executing: 
Executing BufWritePost Autocommands for "*"
autocommand <Lua 138: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns.lua:124>

Executing: 
Executing BufWritePost Autocommands for "*"
autocommand <Lua 294: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:59>

Executing: 
Executing BufWritePost Autocommands for "<buffer=1>"
autocommand <Lua 547: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp.lua:1679>

chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles/nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 255: vim/_editor.lua:0>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 110: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp.lua:1874>

Executing: 
autocommand <Lua 123: ~/.local/share/nvim/lazy/mason.nvim/lua/mason/init.lua:9>

Executing: 
autocommand <Lua 377: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/async.lua:17>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand exe s:persist()

Executing: exe s:persist()
calling <SNR>67_persist()

line 1:   if exists('g:SessionLoad')
line 2:     return ''
line 3:   endif
line 4:   let sessionoptions = &sessionoptions
line 5:   if exists('g:this_obsession')
line 6:     let tmp = g:this_obsession . '.' . getpid() . '.obsession~'
line 7:     try
line 8:       set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages
line 9:       exe s:doautocmd_user('ObsessionPre')
calling <SNR>67_doautocmd_user('ObsessionPre')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 9: 
line 10:       execute 'mksession!' fnameescape(tmp)
line 10: mksession! /Users/christopher.griffith/projects/dotfiles/Session.vim.79181.obsession~
chdir(/Users/christopher.griffith/projects/dotfiles)
line 11:       let v:this_session = g:this_obsession
line 12:       let body = readfile(tmp)
line 13:       call insert(body, 'let g:this_session = v:this_session', -3)
line 14:       call insert(body, 'let g:this_obsession = v:this_session', -3)
line 15:       if type(get(g:, 'obsession_append')) == type([])
line 16:         for line in g:obsession_append
line 17:           call insert(body, line, -3)
line 18:         endfor
line 19:       endif
line 20:       call writefile(body, tmp)
line 21:       call rename(tmp, g:this_obsession)
line 22:       let g:this_session = g:this_obsession
line 23:       exe s:doautocmd_user('Obsession')
calling <SNR>67_doautocmd_user('Obsession')

line 1:   if !exists('#User#' . a:arg)
line 2:     return ''
<SNR>67_doautocmd_user returning ''

continuing in <SNR>67_persist

line 23: 
line 24:     catch /^Vim(mksession):E11:/
line 25:       return ''
line 26:     catch
line 27:       unlet g:this_obsession
line 28:       let &l:readonly = &l:readonly
line 29:       return 'echoerr '.string(v:exception)
line 30:     finally
line 31:       let &sessionoptions = sessionoptions
line 32:       call delete(tmp)
line 33:     endtry
line 34:   endif
line 35:   return ''
<SNR>67_persist returning ''

continuing in VimLeavePre Autocommands for "*"

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 601: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/attach.lua:378>

Executing: 
Writing ShaDa file "/Users/christopher.griffith/.local/state/nvim/shada/main.shada"
Executing VimLeave Autocommands for "*"
autocommand <Lua 244: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/state.lua:360>

Executing: 
Executing VimLeave Autocommands for "*"
autocommand <Lua 287: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:65>

Executing: 
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(nvim/lua/config/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_c_filename guifg=#dfdfe0 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_command_to_lualine_c_filename guifg=#dbc074 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_c_filename guifg=#719cd6 guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing: highlight! lualine_transitional_lualine_a_insert_to_lualine_c_filename guifg=#81b29a guibg=#39506d gui=None
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(vim/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/projects/dotfiles)
chdir(/Users/christopher.griffith/.local/share/nvim/lazy/barbar.nvim/lua/barbar/ui/)
chdir(/Users/christopher.griffith/projects/dotfiles)
Executing LspDetach Autocommands for "*"
autocommand <Lua 346: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/codeaction/lightbulb.lua:141>

Executing: 
Executing LspDetach Autocommands for "*"
autocommand <Lua 348: ~/.local/share/nvim/lazy/lspsaga.nvim/lua/lspsaga/symbol/init.lua:210>

Executing: 
Executing LspDetach Autocommands for "<buffer=1>"
autocommand <Lua 592: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/lua/vim/lsp/semantic_tokens.lua:219>

Executing: 
Executing DiagnosticChanged Autocommands for "*"
autocommand <Lua 261: ~/.local/share/nvim/lazy/barbar.nvim/lua/barbar/events.lua:223>

Executing: 
Executing DiagnosticChanged Autocommands for "*"
autocommand lua require'trouble'.refresh({auto = true, provider = "diagnostics"})

Executing: lua require'trouble'.refresh({auto = true, provider = "diagnostics"})