# Prefix Key
unbind-key C-b
set -g prefix C-w # In the terminal, <C-,> is mapped to send <C-,w> (0x17)

# Set default shell
set -g default-command $SHELL

# Automatically set window title
setw -g automatic-rename off
set -g set-titles on

# Variables {{{

SEP_L=""
SEP_R=""

BLACK="#000000"
BLUE="#39506d"
GRAY="#303030"
LIGHT_BLUE="#719cd6"
PURPLE="#9d79d6"
WHITE="#cdcecf"

BLACK__LIGHT_BLUE="#[fg=${BLACK},bg=${LIGHT_BLUE}]"
BLACK__PURPLE="#[fg=${BLACK},bg=${PURPLE}]"
LIGHT_BLUE__BLUE="#[fg=${LIGHT_BLUE},bg=${BLUE}]"
PURPLE__LIGHT_BLUE="#[fg=${PURPLE},bg=${LIGHT_BLUE}]"
WHITE__BLUE="#[fg=${WHITE},bg=${BLUE}]"
WHITE__BLUE__BOLD="#[fg=${WHITE},bg=${BLUE},bold]"
WHITE__LIGHT_BLUE="#[fg=${WHITE},bg=${LIGHT_BLUE}]"

# }}}

# Status Window format
setw -g window-status-current-format "${WHITE__LIGHT_BLUE} #I ${LIGHT_BLUE__BLUE}${SEP_L}${WHITE__BLUE__BOLD} #W* "
setw -g window-status-format "${WHITE__LIGHT_BLUE} #I ${LIGHT_BLUE__BLUE}${SEP_L}${LIGHT_BLUE__BLUE} #W "

# Status Window styling {{{

set -g status on
set -g status-interval 1
set -g status-justify "left"
set -g status-left-length 60
set -g status-right-length 90
set -g status-style "${WHITE__BLUE}"
set -g status-left-style "${WHITE__BLUE}"
set -g status-right-style "${WHITE__BLUE}"
set -g status-left ""
set -g status-right "#{prefix_highlight} ${LIGHT_BLUE__BLUE}${SEP_R}${BLACK__LIGHT_BLUE} #{pane_current_path} ${PURPLE__LIGHT_BLUE}${SEP_R}${BLACK__PURPLE} %m/%d/%Y %r "

setw -g window-status-style "${WHITE__BLUE}"
setw -g window-status-separator ""
setw -g window-status-current-style "${WHITE__BLUE}"
setw -g window-status-activity-style "${WHITE__BLUE}"
setw -g window-status-bell-style "${WHITE__BLUE}"
setw -g window-status-last-style "${WHITE__BLUE}"

# }}}

# Window Styling
set -g window-style "fg=${WHITE},bg=${GRAY}"
set -g window-active-style "fg=${WHITE},bg=${BLACK}"

# Pane Styling
set -g pane-border-style "fg=${WHITE},bg=${GRAY}"
set -g pane-active-border-style "fg=${WHITE},bg=${GRAY}"

set -g message-command-style "${WHITE__BLUE}"
set -g message-style "${WHITE__BLUE}"
set -g mode-style "${WHITE__BLUE}"

# General Settings
set -g base-index 1
setw -g pane-base-index 1
set -g history-limit 10000
setw -g monitor-activity off
set -g visual-activity on
set -g visual-bell off
set -g visual-silence on
set -g bell-action none

# Make scrolling with wheels work
set -g mouse on
bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# No delay for escape key press
set -sg escape-time 0

# New Window Default Directory
bind-key c new-window -c ~/projects/od-env/projects

# Split Panes
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"

# Reload tmux config
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Close tmux
bind-key C-k kill-session

# Swap Windows
bind-key C-h swap-window -t -1 \; select-window -t -1
bind-key C-l swap-window -t +1 \; select-window -t +1

# Vim mode {{{

setw -g mode-keys vi
set -g status-keys vi

# Smart pane switching/resizing with awareness of Vim splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R

bind-key -n M-C-h send-keys M-h
bind-key -n M-C-l send-keys M-l
bind-key -n M-h resize-pane -L
bind-key -n M-l resize-pane -R

bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "resize-pane -U"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "resize-pane -D"

# Vim style copy
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"

# }}}

# Automatically renumber window numbers on closing a pane
set -g renumber-windows on

# Don't wrap searches
set -w -g wrap-search off

# Restore neovim sessions
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'off'

# Terminal
set -g default-terminal 'screen-256color'
# Terminal Overrides
#   Block Cursor in VIM normal/visual mode
#   Underscore Cursor in VIM insert mode
#   True Color
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q:Tc'

# Ensure FocusGained and FocusLost events work
set -g focus-events on

# Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-copycat'

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_fg '255'
set -g @prefix_highlight_bg '27'
set -g @prefix_highlight_prefix_prompt '--Prefix--'

set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on' # Restore session when starting tmux
set -g @continuum-save-interval '1' # minutes (default is 15)


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# Note: This won't run unless you've already executed: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
run -b '~/.tmux/plugins/tpm/tpm'
